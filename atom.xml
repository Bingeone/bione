<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bingeone博客园</title>
  
  <subtitle>博客</subtitle>
  <link href="https://bingeone.github.io/bione/atom.xml" rel="self"/>
  
  <link href="https://bingeone.github.io/bione/"/>
  <updated>2022-01-30T14:15:55.257Z</updated>
  <id>https://bingeone.github.io/bione/</id>
  
  <author>
    <name>Bingeone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu20.04下mysql数据库相关操作</title>
    <link href="https://bingeone.github.io/bione/posts/1178053341.html"/>
    <id>https://bingeone.github.io/bione/posts/1178053341.html</id>
    <published>2022-01-25T14:15:06.000Z</published>
    <updated>2022-01-30T14:15:55.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装mysql、重置密码"><a href="#安装mysql、重置密码" class="headerlink" title="安装mysql、重置密码"></a>安装mysql、重置密码</h3><ul><li>更新下载源：sudo apt-get update</li><li>安装：sudo apt install mysql-server</li></ul><p><img src="https://i.loli.net/2021/09/06/Aqf6QprFeaYOEI1.png"></p><ul><li>安装mysql客户端：sudo apt install mysql-client</li></ul><p><img src="https://i.loli.net/2021/09/06/RHr3MOe6QIFg9Cb.png"></p><ul><li>重启mysql服务：sudo service mysql restart</li><li>配置mysql：sudo mysql_secure_installation</li></ul><p><img src="https://i.loli.net/2021/09/06/KXRMQHw3SOhpB1x.png"></p><ul><li>接上述内容</li></ul><p><img src="https://i.loli.net/2021/09/06/9Srutcn58sDv4Lg.png"></p><ul><li>接上述内容</li></ul><p><img src="https://i.loli.net/2021/09/06/mR1zpeCZnXovDP9.png"></p><ul><li>用最大权限直接登陆mysql</li></ul><p><img src="https://i.loli.net/2021/09/06/JW1l9INLYhkCsXP.png"></p><ul><li>select user,authentication_string,plugin,host from mysql.user;</li></ul><img src="https://i.loli.net/2021/09/06/82W3aj1fxTRQlIr.png"  /><ul><li>直接输入重置密码：ALTER USER ‘root‘@’localhost’ IDENTIFIED BY “123456”;        结果大概率报错（ERROR 1819），显示密码过于简单不满足要求</li><li>查看密码要求： show variables like ‘validate_password%’;</li></ul><img src="https://i.loli.net/2021/09/06/YZHVvwO8enqom2y.png"  /><ul><li>密码重置配置</li></ul><blockquote><p>mysql&gt; set global validate_password.policy=0;</p><p>Query OK, 0 rows affected (0.00 sec)</p><p>mysql&gt; set global validate_password.length=1;</p><p>Query OK, 0 rows affected (0.01 sec)</p><p>mysql&gt; alter user ‘root’@‘localhost’ identified by ‘123456’;        </p><p>Query OK, 0 rows affected (0.04 sec)</p><p>mysql&gt; flush privileges;        </p><p>Query OK, 0 rows affected (0.04 sec)</p><p>mysql&gt; ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH caching_sha2_password by ‘123456’;    </p><p>Query OK, 0 rows affected (0.04 sec)</p></blockquote><img src="https://i.loli.net/2021/09/06/R4DSeAtuJ2VqIp6.png"  /><p><a href="https://blog.csdn.net/ingenuou_/article/details/107602508">详情参考该博文</a></p><h3 id="Ubuntu下彻底卸载mysql数据库"><a href="#Ubuntu下彻底卸载mysql数据库" class="headerlink" title="Ubuntu下彻底卸载mysql数据库"></a>Ubuntu下彻底卸载mysql数据库</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、查看相关文件</span><br><span class="line">dpkg --list|grep mysql</span><br><span class="line">2、卸载</span><br><span class="line">sudo apt-get remove mysql-common</span><br><span class="line">3、卸载</span><br><span class="line">sudo apt-get autoremove --purge mysql-server-5.7</span><br><span class="line">4、清除残留数据</span><br><span class="line">dpkg -l|grep ^rc|awk &#x27;&#123;print$2&#125;&#x27;|sudo xargs dpkg -P</span><br><span class="line">5、查看MySQL的剩余依赖项</span><br><span class="line">dpkg --list|grep mysql</span><br><span class="line">6、继续删除剩余依赖项</span><br><span class="line">sudo apt-get autoremove --purge mysql-apt-config</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装mysql、重置密码&quot;&gt;&lt;a href=&quot;#安装mysql、重置密码&quot; class=&quot;headerlink&quot; title=&quot;安装mysql、重置密码&quot;&gt;&lt;/a&gt;安装mysql、重置密码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更新下载源：sudo apt-get updat</summary>
      
    
    
    
    <category term="数据库" scheme="https://bingeone.github.io/bione/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="mysql" scheme="https://bingeone.github.io/bione/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker容器技术基础</title>
    <link href="https://bingeone.github.io/bione/posts/3708940461.html"/>
    <id>https://bingeone.github.io/bione/posts/3708940461.html</id>
    <published>2022-01-25T14:15:06.000Z</published>
    <updated>2022-01-30T14:15:34.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p><a href="https://www.docker.com/">Docker</a>是一种基于go语言开发、开源的应用容器引擎。Docker公司原先是一家叫dotCloud平台的服务商，docker是dotCloud平台利用Linux容器技术开发形成一套内部工具。2103年dotCloud平台的业务开展艰难，新聘Ben Golub 作为CEO，将公司重命名为Docker，放弃原来的PaaS平台。向世界开放推广Docker和容器技术，当前docker版本分为社区版(CE：免费版)和企业版(EE：收费版)。</p><p>Docker三个<strong>基本概念</strong>：</p><ul><li><strong>镜像（Image）</strong>:Docker 镜像，就相当于是一个 root 文件系统</li><li><strong>容器（Container）</strong>:容器可以被创建、启动、停止、删除、暂停等</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像</li></ul><blockquote><p>镜像和容器的关系:</p><p>镜像是静态的定义，容器是镜像运行时的实体</p></blockquote><p><strong>Docker特点</strong>：</p><blockquote><p>借助Docker，你可以将容器当做重量轻、模块化的虚拟机来使用，同时，你还将获得高度的灵活性，从而实现对容器的高效创建、部署和复制，并能将其从一个环境顺利迁移至另外一个环境。</p></blockquote><h2 id="docker安装教程"><a href="#docker安装教程" class="headerlink" title="docker安装教程"></a>docker安装教程</h2><ul><li><a href="https://docs.docker.com/engine/install/">官网教程</a></li><li><a href="http://c.biancheng.net/view/3121.html">docker中文教程一</a></li><li><a href="https://www.runoob.com/docker/windows-docker-install.html">docker中文教程二</a></li></ul><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><ul><li>查看镜像</li></ul><blockquote><p>docker images    </p></blockquote><p>镜像存储在docker宿主机的/var/lib/docker的目录下</p><ul><li>搜索镜像</li></ul><blockquote><p>docker search 镜像名</p></blockquote><ul><li>拉取镜像</li></ul><blockquote><p>docker pull 镜像名</p></blockquote><ul><li>删除镜像</li></ul><blockquote><p>docker rmi -f 镜像id            # -f 表示强制删除</p><p>docker rmi  ‘docker iamges -q’        #删除所有镜像</p></blockquote><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><ul><li>查看容器</li></ul><blockquote><p>docker ps        # 查看正在运行的容器</p><p>docker ps -a     # 查看所容器</p><p>docker ps -l     # 查看最后一次运行的容器</p><p>docker ps -f status=exited    #停止所有容器</p></blockquote><ul><li>创建和启动容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=容器名称镜像名称：标签/bin/bash</span><br><span class="line">-i<span class="comment"># 表示运行容器</span></span><br><span class="line">-t <span class="comment"># 表示容器启动后并进入其命令行模式</span></span><br><span class="line">--name<span class="comment"># 为创建的容器命名</span></span><br><span class="line">-v<span class="comment"># 表示目录映射关系（目录挂载）</span></span><br><span class="line">-p<span class="comment"># 表示端口映射</span></span><br><span class="line">-d<span class="comment"># 创建一个守护式容器在后台运行，但不登录</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例：</span></span><br><span class="line"><span class="comment"># 直接进入容器的命令模式</span></span><br><span class="line">docker run -it --name=mycentos centos:7 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器后台守护模式退出容器不影响其运行</span></span><br><span class="line">docker run -di --name=mycentos2 centos:7</span><br><span class="line">docker <span class="built_in">exec</span> -it mycentos2 /bin/bash <span class="comment">#进入到命令模式exce表示执行</span></span><br></pre></td></tr></table></figure><ul><li>退出</li></ul><blockquote><p>exit</p><p>docker stop 容器name或者id        # 停止后台运行的容器，相当杀死后台</p><p>docker start 容器name或者id        # 启动容器</p></blockquote><ul><li>宿主机和容器之间文件传输</li></ul><blockquote><p>docker cp 文件名    mycentos2:/usr/local            # 从宿主机到容器</p><p>docker cp mycentos2:/usr/local/文件名 宿主机路径        # 不加路径和名字默认为根目录</p></blockquote><ul><li>文件共享目录</li></ul><blockquote><p>docker run -di -v /usr/local/mydata:/usr/local/mydata –name=mycentos3 centos:7     #共享文件夹路径/usr/local/mydata（在创建容器的时候挂载）</p></blockquote><ul><li>查看容器内部运行的数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker inspect mycentos3</span><br><span class="line"></span><br><span class="line">docker inspect --format=&#123;&#123;.NetworkSettings.IPAddress&#125;&#125; mycentos3<span class="comment"># 查看容器的ip</span></span><br></pre></td></tr></table></figure><ul><li>删除容器</li></ul><blockquote><p>docker rm 容器名称或id            # 前提先停止容器运行: docker stop mycentos3</p></blockquote><br><h2 id="常用容器部署"><a href="#常用容器部署" class="headerlink" title="常用容器部署"></a>常用容器部署</h2><h3 id="mysql部署"><a href="#mysql部署" class="headerlink" title="mysql部署"></a>mysql部署</h3><ul><li>拉取mysql镜像</li></ul><blockquote><p>docker pull mysql:5.7</p></blockquote><ul><li>部署镜像</li></ul><blockquote><p>docker run -di –name=mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7    </p><p>​        -e MYSQL_ROOT_PASSWORD=root        # 初始化mysql登录配置</p><p>​        3306:3306        # 宿主机与容器端口映射</p></blockquote><ul><li>启动mysql</li></ul><blockquote><p>docker exec -it mysql /bin/bash</p></blockquote><ul><li>进入mysql</li></ul><blockquote><p>mysql -uroot -proot –default-character-set=utf8</p><p>​        -proot            #设置初始密码为root</p><p>​        –default-character-set=utf8        # 初始编码格式为utf8</p></blockquote><ul><li>mysql常用查询命令</li></ul><blockquote><p>show databases;        # 查数据库</p><p>use mysql（数据库名）    # 选择数据库</p><p>show tables;                # 查表格</p><p>desc 表名;                    # 显示表结构</p></blockquote><br><h3 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h3><ul><li>拉取nginx镜像</li></ul><blockquote><p>docker pull nginx         # 拉取最新版的nginx</p></blockquote><ul><li>部署到后台运行</li></ul><blockquote><p>docker run -di –name=nginx -p 80:80 nginx</p><p>​            80:80        # 宿主机和容器端口映射</p><p>​            宿主机ip:80    # 浏览器访问nginx</p></blockquote><ul><li>配置nginx一般过程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容器nginx配置文件拷贝到宿主机上修改</span></span><br><span class="line">docker cp nginx:/etc/nginx /usr/<span class="built_in">local</span>/mydata/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件重命名，修改nginx相关配置</span></span><br><span class="line">mv ngnix conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止nginx运行</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除nginx镜像</span></span><br><span class="line">docker rm nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新部署并配置挂载目录</span></span><br><span class="line">docker run -di --name=nginx -p 80:80 -v /usr/<span class="built_in">local</span>/mydata/conf:/etc/nginx nginx</span><br></pre></td></tr></table></figure><br><h3 id="redis部署"><a href="#redis部署" class="headerlink" title="redis部署"></a>redis部署</h3><ul><li>拉取redis镜像</li></ul><blockquote><p>docker pull redis</p></blockquote><ul><li>部署到后台运行</li></ul><blockquote><p>docker run -di –name=redis -p 6379:6379 redis</p></blockquote><ul><li>可视化工具访问</li></ul><blockquote><p>宿主机ip：6379</p></blockquote><br><h3 id="rabbitmq部署"><a href="#rabbitmq部署" class="headerlink" title="rabbitmq部署"></a>rabbitmq部署</h3><blockquote><p>实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）</p></blockquote><ul><li>拉取镜像</li></ul><blockquote><p>docker pull rabbitmq:3.7.12        # 常用版本</p></blockquote><ul><li>部署后台运行</li></ul><blockquote><p>docker run -di –name=rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:3.7.12</p></blockquote><ul><li>进入rabbitmq </li></ul><blockquote><p>docker exec -it rabbitmq /bin/bash</p></blockquote><ul><li>激活rabbitmq的ui界面插件，并通过网页访问</li></ul><blockquote><p>rabbitmq-plugins enable rabbitmq_management        # 激活插件</p><p>宿主机ip + 端口: 15672            # 访问网页端rabbitmq        初始账号密码：guest</p></blockquote><br><h3 id="Elasticsearch部署"><a href="#Elasticsearch部署" class="headerlink" title="Elasticsearch部署"></a>Elasticsearch部署</h3><blockquote><p>Elasticsearch是一个基于<a href="https://baike.baidu.com/item/Lucene/6753302">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的<a href="https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/7847410">全文搜索引擎</a>，基于RESTful web接口。</p></blockquote><ul><li>拉取镜像</li></ul><blockquote><p>docker pull elasticsearch</p></blockquote><ul><li>修改虚拟内存区域大小，否者会因为过小而无法启动</li></ul><blockquote><p>sysctl -w vm.max_map_count=262144            # 此步骤关键，宿主机内存过小是个问题</p></blockquote><ul><li>启动，环境配置，目录挂载</li></ul><blockquote><p>docker run -di –name=elasticsearch -p 9300:9300 -e “discovery.type=single-node” -e “cluster.name=elasticsearch” -v /usr/local/mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins elasticsearch:7.5.0</p></blockquote><ul><li>在elasticsearch容器中安装插件</li></ul><blockquote><p>elasticsearch-plugins install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.0/elasticsearch-analysis-ik-7.5.0.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.5.0/elasticsearch-analysis-ik-7.5.0.zip</a>        # ik中文分词器</p></blockquote><ul><li>安装完成后在容器外部重启elasticsearch</li></ul><blockquote><p>docker restart elasticsearch </p></blockquote><ul><li>在网页上访问</li></ul><blockquote><p>宿主机ip + 端口（9300）</p></blockquote><br><h3 id="Zookeeper部署"><a href="#Zookeeper部署" class="headerlink" title="Zookeeper部署"></a>Zookeeper部署</h3><blockquote><p>分布式锁是控制分布式系统之间同步访问共享资源的一种方式。</p></blockquote><ul><li>拉取镜像</li></ul><blockquote><p>docker pull zookeeper:3.4.13        </p></blockquote><ul><li>部署后台运行</li></ul><blockquote><p>docker run -di –name=zookeeper -p 2181:2181 zookeeper</p></blockquote><br><h2 id="迁移和备份"><a href="#迁移和备份" class="headerlink" title="迁移和备份"></a>迁移和备份</h2><ul><li>容器保存为镜像</li></ul><blockquote><p>docker commit redis myredis            # 将redis 打包成myredis镜像文件</p></blockquote><ul><li>镜像备份</li></ul><blockquote><p>docker save -o myredis.tar myredis        # 备份镜像</p></blockquote><ul><li>恢复备份</li></ul><blockquote><p>docker load -i myredis.tar</p></blockquote><br><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><blockquote><p>由一系列的命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像</p></blockquote><ul><li>常用命令</li></ul><table><thead><tr><th>命令</th><th align="left">作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td align="left">定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td align="left">声明镜像的创建者</td></tr><tr><td>ENV key value</td><td align="left">设置环境变量（可以多写）</td></tr><tr><td>RUN command</td><td align="left">Dockerfile的核心（可以多写）</td></tr><tr><td>ADD sourece_dir/file<br>dest_dir/file</td><td align="left">将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file<br>dest_dir/file</td><td align="left">和ADD 相似，但是如果有压缩文件并不会解压</td></tr><tr><td>WORKDIR path_dir</td><td align="left">设置工作目录</td></tr></tbody></table><ul><li>使用脚本创建镜像（示例：基于centos7 构建jdk8）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"></span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER xxxx</span><br><span class="line">WORKDIR /usr</span><br><span class="line">RUN mkdir /usr/<span class="built_in">local</span>/java</span><br><span class="line">ADD jdk-8u211-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java</span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/java/jdk1.8.0_211</span><br><span class="line">ENV PATH <span class="variable">$JAVA_HOME</span>/bin/:<span class="variable">$PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><blockquote><p>docker build -t=“jdk1.8” .                # 点前面有空格，点指定为当前目录的Dockerfile</p></blockquote><p><img src="https://i.loli.net/2021/09/16/o9CAIDFzGN7WHXh.png"></p><br><h2 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h2><h3 id="私有仓库的搭建和配置"><a href="#私有仓库的搭建和配置" class="headerlink" title="私有仓库的搭建和配置"></a>私有仓库的搭建和配置</h3><ul><li>拉取私有仓库镜像</li></ul><blockquote><p>docker pull registry</p></blockquote><ul><li>启动私有仓库容器</li></ul><blockquote><p>docker run -di –name=registry -p 5000:5000 registry</p><p>仓库地址 https://宿主机ip:5000/v2/_catalog</p></blockquote><ul><li>修改daemon.json</li></ul><blockquote><p>vim /etc/docker/daemon.json</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[“宿主机ip”:5000]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启docker服务</li></ul><blockquote><p>systemctl restart docker</p></blockquote><h3 id="仓库镜像上传"><a href="#仓库镜像上传" class="headerlink" title="仓库镜像上传"></a>仓库镜像上传</h3><ul><li>镜像打标签</li></ul><blockquote><p>docker tag jdk1.8 宿主机ip:5000/jdk1.8    # 前面为镜像名称，后面为镜像的标签名</p></blockquote><ul><li>上传</li></ul><blockquote><p>docker push 宿主机ip:5000/jdk1.8            # 标签格式固定</p></blockquote><ul><li>拉取镜像</li></ul><blockquote><p>安装docker，配置vim /etc/docker/daemon.json内容，然后重启systemctl restart docker</p><p>{<br>“insecure-registries”:[“宿主机ip”:5000]<br>}</p></blockquote><br><h2 id="DockerMaven插件"><a href="#DockerMaven插件" class="headerlink" title="DockerMaven插件"></a>DockerMaven插件</h2><h3 id="Maven插件部署步骤"><a href="#Maven插件部署步骤" class="headerlink" title="Maven插件部署步骤"></a>Maven插件部署步骤</h3><ul><li>修改宿主机的docker配置，使其允许远程访问</li></ul><blockquote><p>vim /lib/systemd/system/docker.service</p></blockquote><ul><li>修改ExecStart开头行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure><ul><li>刷新配置</li></ul><blockquote><p>systemctl daemon-reload            # 刷新配置daemon.json</p><p>systemctl restart docker                # 重启docker</p></blockquote><ul><li>启动registry</li></ul><blockquote><p>systemctl start registry        # 重启registry容器</p></blockquote><ul><li>将java项目打包成镜像</li></ul><blockquote><p>此处略过视频内容，详情查看<a href="https://github.com/spotify/docker-maven-plugin">maven插件教程</a></p></blockquote><ul><li>启动镜像后台运行</li></ul><blockquote><p>docker run -di –name=test -p 7070:7070 镜像名称</p></blockquote><ul><li>网页访问</li></ul><blockquote><p>宿主机ip:7070</p></blockquote><br><h2 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h2><ul><li>启动</li></ul><blockquote><p>开机启动： sudo systemctl enable docker.service</p><p>禁止开机启动：sudo systemctl disable docker.service</p></blockquote><ul><li><strong>非root用户操作docker更改权限</strong></li></ul><blockquote><p>sudo groupadd docker            # 创建docker用户组</p><p>sudo usermod -aG docker $USER        # 添加docker到用户组中</p><p>newgrp docker        # 激活用户组</p></blockquote><ul><li>重新加载和重启docker</li></ul><blockquote><p>sudo systemctl daemon-reload        # 重新加载配置</p><p>sudo systemctl restart docker        # 重启</p></blockquote><ul><li>查看建立的链接</li></ul><blockquote><p>sudo netstat -tanlp</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; title=&quot;Docker简介&quot;&gt;&lt;/a&gt;Docker简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;是一</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="docker" scheme="https://bingeone.github.io/bione/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译和Cmake使用</title>
    <link href="https://bingeone.github.io/bione/posts/4072117687.html"/>
    <id>https://bingeone.github.io/bione/posts/4072117687.html</id>
    <published>2022-01-25T14:15:06.000Z</published>
    <updated>2022-01-30T14:15:38.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h3><ul><li><p>使用gcc编译C代码</p></li><li><p>使用g++ 编译C++代码</p></li><li><p>man gcc/g++  查看使用手册</p></li><li><p>编译过程</p><ol><li><p><strong>预处理-Pre-Proccessing          # .i文件</strong></p><blockquote><p>#-E 选项指示编译器仅对输入文件进行预处理</p><p>g++ -E test.cpp -o test.i        // .i文件</p></blockquote></li><li><p><strong>编译-Compiling           #.s文件</strong></p><blockquote><p>#-s 编译选项告诉 g++ 在为C++ 代码产生了汇编语言文件后停止编译</p><p>#g++ 产生的汇编语言文件的缺省扩展名是 .s</p><p>g++ -S test.i -o test.s</p></blockquote></li><li><p><strong>汇编-Assembling        # .o文件</strong></p><blockquote><p>#-c  选项告诉 g++ 仅把源代码编译为机器语言的目标代码</p><p>g++ -c test.s -o test.o</p></blockquote></li><li><p><strong>链接-Linking       #bin文件</strong></p><blockquote><p>#-o 编译选项来为将产生的可执行文件用指定文件名==(单一文件编译)==</p><p>g++ test.o -o test</p><p>#==多目录多文件下编译实例如下：==</p><p>g++ main.cpp src/swap.cpp -Iinclude -o main    —– 编译文件main.cpp swap.cpp ;        头文件(引用的 .h文件)indclude     可执行文件 main</p></blockquote></li></ol></li><li><p>g++重要的编译参数</p><ul><li><p>-g    编译带调试信息的可执行文件   </p><blockquote><p>#带有调试的文件</p><p>g++ -g text.cpp -o test</p></blockquote></li><li><p>-O[数字]      优化源代码</p><blockquote><p>##优化即  例如省略代码中从未使用过的变量，直接将变量表达式用结果值代替等等，这些操作会缩减目标文件的所含的代码量，提高最终生成的可执行文件的运行效率。</p><p>g++  test.cpp -O2 -o test</p></blockquote></li><li><p>-I       指定头文件搜索目录</p><blockquote><p>g++  -I/myinclude(路径) test.cpp</p></blockquote></li><li><p>-Wall   打印警告信息</p><blockquote><p>#打印出gcc提供的警告信息</p><p>g++ -Wall test.cpp </p></blockquote></li><li><p>-w   关闭警告信息</p><blockquote><p>g++ -w test.cpp</p></blockquote></li><li><p>-o    输出文件头名</p><blockquote><p>g++ test.cpp -o test</p></blockquote></li><li><p>-std=c++11   设置编译标准</p><blockquote><p>g++  -std=c++11 test.cpp </p></blockquote></li><li><p>案例：</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例:</span></span><br><span class="line">g++ main.cpp src/Gun.cpp src/Soldier.cpp -Iinclude -o myexe -Wall -g -O2//输出 警告 调试 优化代码</span><br></pre></td></tr></table></figure></li></ul><h3 id="CMake-简要使用"><a href="#CMake-简要使用" class="headerlink" title="CMake 简要使用"></a>CMake 简要使用</h3><h4 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a><strong>编译流程</strong></h4><p>==在linux平台上CMake构建 C/C++工程的流程==: </p><ul><li>编写CMakeListstxt</li><li>执行命令cmake PATH 生成Makefile(PATH 是顶层CMakeLists.txt 所在目录)</li><li>执行命令make进行编译</li></ul><h4 id="两种构建方式"><a href="#两种构建方式" class="headerlink" title="两种构建方式"></a>两种构建方式</h4><ul><li><p>内部构建(in-source build): 会在同级目录下产生大量的中间文件，使工程文件杂乱无章</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内部构建</span></span><br><span class="line"><span class="comment"># 在当前工程文件目录下，编译本目录的CMakeists.txt，生成Makefile和其他文件</span></span><br><span class="line">cmake .</span><br><span class="line"><span class="comment"># 执行make命令，生成target</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>  ==<strong>简单的CMakeLists.txt编写如下：</strong>==</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最低版本要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="keyword">project</span>(HELLOWORLD)</span><br><span class="line"><span class="comment"># 编译.cpp文件生成可执行文件（如下：helloWorld_cmake）</span></span><br><span class="line"><span class="keyword">add_executable</span>(helloWorld_cmake helloworld.cpp)</span><br></pre></td></tr></table></figure></li><li><p>外部构建(out-of -source build): 编译输出文件与工程文件不再同一目录下==(推荐使用)==</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 外部构建</span></span><br><span class="line"><span class="comment"># 1.在当前目录下，创建一个build文件夹</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="comment"># 2.进入到build文件夹中</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 3.编译上级目录的CMakeists.txt，生成Makefile和其他文件</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># 4.执行make命令，生成target</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>  ==<strong>复杂多目录下构建CMakeLists.txt编写如下：</strong>==</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最低版本要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="keyword">project</span>(SWAP)</span><br><span class="line"><span class="comment"># 项目引用的头文件(.h文件)</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 编译多目录使用的.cpp文件生成可执行文件（如下：main_cmake）</span></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp src/swap.cpp )</span><br></pre></td></tr></table></figure></li></ul><h4 id="CMake编写CMakeLists-txt"><a href="#CMake编写CMakeLists-txt" class="headerlink" title="CMake编写CMakeLists.txt"></a>CMake编写CMakeLists.txt</h4><h5 id="语法及注意事项"><a href="#语法及注意事项" class="headerlink" title="语法及注意事项"></a>语法及注意事项</h5><ul><li><p>基本语法格式：指令(参数1 参数2)</p><ul><li>参数使用==<strong>括弧</strong>==括起</li><li>参数之间使用==<strong>空格</strong>==或==<strong>分号</strong>==分开</li></ul></li><li><p>指令不分大小写</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加到头文件搜索路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure></li><li><p>变量是大小写相关的，使用**${}<strong>方式</strong>取值<strong>。但在</strong>if**语句中是直接使用变量名</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置一个变量HELLO，值是hello.cpp</span></span><br><span class="line"><span class="keyword">set</span>(HELLO hello.cpp)  </span><br><span class="line"><span class="keyword">add_executable</span>(hello main.cpp <span class="variable">$&#123;HELLO&#125;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h5><p>==cmake_c_flags==：gcc编译选项<br>==cmake_cxx_flags==：g++编译选项</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在cmake_cxx_flags编译选项后追加-std=c++14</span></span><br><span class="line"><span class="keyword">set</span>(cmake_cxx_flags <span class="string">&quot;$&#123;cmake_cxx_flags&#125; -std=c++14&quot;</span>)</span><br></pre></td></tr></table></figure><p>==cmake_build_type==：编译类型(Debug, Release)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定编译类型为debug，因为在调试时需要选择debug</span></span><br><span class="line"><span class="keyword">set</span>(cmake_build_type Debug)</span><br><span class="line"><span class="comment"># 设定编译类型为release，因为在发布时需要选择release</span></span><br><span class="line"><span class="keyword">set</span>(cmake_build_type release)</span><br></pre></td></tr></table></figure><p>==executable_output_path==：可执行文件输出的存放路径</p><p>==library_output_path==：库文件输出的存放路径</p><p>​    </p><h5 id="重要指令"><a href="#重要指令" class="headerlink" title="重要指令"></a>重要指令</h5><p>==cmake_minimum_required==：指定CMake的最小版本要求<br>语法：cmake_minimum_required(VERSION 版本号 [FATAL_ERROR])</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最小版本要求为3.0</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br></pre></td></tr></table></figure><p>==project==：定义工程名称，并可指定工程支持的语言<br>语法：project(工程名称 [CXX] [C] [java])</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定工程名为HELLOWORLD</span></span><br><span class="line"><span class="keyword">project</span>(HELLOWORLD)</span><br></pre></td></tr></table></figure><p>==set==：显式的定义变量<br>语法：set(变量名 [变量值] [CACHE TYPE DOCSTRING [FORCE]])</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为main.cpp hello.cpp</span></span><br><span class="line"><span class="keyword">set</span>(SRC sayhello.cpp hello.cpp)</span><br></pre></td></tr></table></figure><p>==include_directories==：向工程添加多个特定的头文件搜索路径，相当于指定g++编译器的-I参数<br>语法：include_directories([AFTER|BEFORE][SYSTEM] dir1 dir2 …)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/<span class="keyword">include</span>/myincludefolder ./<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><p>==link_directories==：向工程添加多个特定的库文件搜索路径，相当于指定g++编译器的-L参数<br>语法：link_directories(dir1 dir2 …)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(/usr/lib/mylibfolder ./lib)</span><br></pre></td></tr></table></figure><p>==add_library==：生成库文件<br>语法：add_library(库名 [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 .. sourceN)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过变量 SRC 生成 libhello.so 共享库</span></span><br><span class="line"><span class="comment"># SHARED代表动态库，STATIC代表静态库</span></span><br><span class="line"><span class="keyword">add_library</span>(hello SHARED <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><p>==add_compile_options==：添加编译参数<br>语法：add_compile_options(编译参数)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加编译参数 -wall -std=c++11</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(-wall -std=c++<span class="number">11</span> -o2)</span><br></pre></td></tr></table></figure><p>==add_executable==：生成可执行文件<br>语法：add_executable(exe文件名 source1 source2 .. sourceN)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译main.cpp生成可执行文件main</span></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br></pre></td></tr></table></figure><p>==target_link_libraries==：为target添加需要链接的共享库，相当于指定g++编译器-l参数<br>语法：target_link_libraries(target library1&lt;debug|optimized&gt; library2…)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将hello动态库文件链接到可执行文件main</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(main hello)</span><br></pre></td></tr></table></figure><p>==add_subdirectory==：向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置<br>语法：add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加src子目录，src中需要有一个CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br></pre></td></tr></table></figure><p>==aux_source_directory==：发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表<br>语法：aux_source_directory(文件夹路径 变量名)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为当前目录下所有的源代码文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC)</span><br><span class="line"><span class="comment"># 编译SRC变量所代表的源代码文件，生成main可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(main <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong>：<a href="http://www.wang-hj.cn/?p=2629">CMake 资料</a></p><h5 id="Vscode-调试-C-代码"><a href="#Vscode-调试-C-代码" class="headerlink" title="Vscode 调试 C++代码"></a>Vscode 调试 C++代码</h5><ul><li>调试代码一般操作流程(==前提配置好launch.json文件==)<ul><li>在主程序main.cpp文件打断点</li><li>按F5，进入并命中断点位置</li><li>F11，单步执行（执行代码行所指向所有文件）</li><li>F10，单步并跳过执行（略过代码行所指向所有文件）</li><li>执行完程序，按F5退出调试</li></ul></li></ul><p>​    ==(launch.json 和 tasks.json 文件配置)—linux/ubuntu系统==</p><ul><li>launch.json 配置</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;g++ - 生成和调试活动文件&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build/main_cmake&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,     </span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;Build&quot;</span>,   <span class="comment">//此处直接调用tasks任务执行，省略 在终端执行（cmake ..) 和 (make)两步命令</span></span><br><span class="line">            <span class="string">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;/usr/bin/gdb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>tasks.json 配置—作用：实现自动化调试，省去代码修改在编译过程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,<span class="comment">//声明最低cmake版本</span></span><br><span class="line"><span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span>    <span class="comment">//需要进入到我们执行build任务的文件夹中</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;tasks&quot;</span>: [    <span class="comment">//tasks包含三个小任务</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line"><span class="string">&quot;label&quot;</span>: <span class="string">&quot;cmake&quot;</span>,    <span class="comment">//第一个任务的名字叫cmake</span></span><br><span class="line"><span class="string">&quot;command&quot;</span>: <span class="string">&quot;cmake&quot;</span>,    <span class="comment">//它要执行的命令是cmake</span></span><br><span class="line"><span class="string">&quot;args&quot;</span>: [</span><br><span class="line"><span class="string">&quot;..&quot;</span>    <span class="comment">//参数是..</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;label&quot;</span>: <span class="string">&quot;make&quot;</span>,    <span class="comment">//第二个任务的名字叫make</span></span><br><span class="line"><span class="string">&quot;group&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line"><span class="string">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;command&quot;</span>: <span class="string">&quot;make&quot;</span>,    <span class="comment">//它要执行的命令是make</span></span><br><span class="line"><span class="string">&quot;args&quot;</span>: [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;label&quot;</span>: <span class="string">&quot;Build&quot;</span>,    <span class="comment">//第三个任务的名字叫Build</span></span><br><span class="line"><span class="string">&quot;dependsOrder&quot;</span>: <span class="string">&quot;sequence&quot;</span>,    <span class="comment">//顺序执行依赖项</span></span><br><span class="line"><span class="string">&quot;dependsOn&quot;</span>:[    <span class="comment">//依赖的两个项为cmake和make</span></span><br><span class="line"><span class="string">&quot;cmake&quot;</span>,    <span class="comment">//即第一个任务的label</span></span><br><span class="line"><span class="string">&quot;make&quot;</span>      <span class="comment">//即第二个任务的label</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;GCC编译器&quot;&gt;&lt;a href=&quot;#GCC编译器&quot; class=&quot;headerlink&quot; title=&quot;GCC编译器&quot;&gt;&lt;/a&gt;GCC编译器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用gcc编译C代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用g++ 编译C++代码&lt;/p&gt;</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Cmake" scheme="https://bingeone.github.io/bione/tags/Cmake/"/>
    
  </entry>
  
  <entry>
    <title>Linux 基础知识</title>
    <link href="https://bingeone.github.io/bione/posts/2396000966.html"/>
    <id>https://bingeone.github.io/bione/posts/2396000966.html</id>
    <published>2022-01-25T14:15:06.000Z</published>
    <updated>2022-01-30T14:15:45.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-使用技巧"><a href="#ubuntu-使用技巧" class="headerlink" title="ubuntu 使用技巧"></a>ubuntu 使用技巧</h2><ol><li>mkdir的技巧</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建 ～/a/b/c</span></span><br><span class="line">mkdir -p  ~/a/b/c/</span><br><span class="line"><span class="comment">#创建多个文件夹</span></span><br><span class="line">mkdir  a b c</span><br></pre></td></tr></table></figure><ol start="2"><li>touch</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建文件</span></span><br><span class="line">touch a.txt</span><br><span class="line"><span class="comment">#在绝对路径中创建文件</span></span><br><span class="line">touch /home/robot/myfile.txt</span><br></pre></td></tr></table></figure><ol start="3"><li>rm 删除</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">rm a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除文件夹</span></span><br><span class="line">rm -rf a或者 trash-put a  <span class="comment">#将文件移动到回收站 需安装trash-cli</span></span><br></pre></td></tr></table></figure><ol start="4"><li>cp 复制</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制文件夹到指定位置</span></span><br><span class="line">cp -r myfile/ /home/robot/</span><br></pre></td></tr></table></figure><ol start="5"><li>mv 移动或重命名文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移动文件夹到指定位置</span></span><br><span class="line">mv myfile /home/robot</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名文件夹</span></span><br><span class="line">mv myfile myfile01</span><br></pre></td></tr></table></figure><ol start="6"><li>man 查看linux命令手册</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看ls手册</span></span><br><span class="line">man ls</span><br><span class="line"><span class="comment">#查看帮助reboot </span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>reboot  重启linux系统</p></li><li><p>shutdown 立即关机</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 立即关机</span></span><br><span class="line">shotdown -h now </span><br></pre></td></tr></table></figure><ol start="9"><li><p>ctrl + - 缩小命令行字体大小，ctrl + shift + + 放大</p></li><li><p>ctrl + alt + T 在桌面快速启动终端</p></li><li><p>ls -lah    查看当前目录下所有文件详情</p></li><li><p>time  加执行文件，可以计时运行文件消耗时间</p></li><li><p>查看ubuntu 挂载详情 df -h</p></li><li><p>切换用户：su root</p></li><li><p>更新linux环境：source /etc/environment</p></li><li><p>软链接如：sudo ln -fs /usr/bin/npm /usr/local/bin/npm</p></li><li><p>linux 端口占用查看和关闭</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看已经连接的服务端口（ESTABLISHED）</span></span><br><span class="line"></span><br><span class="line">netstat -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的服务端口（LISTEN，ESTABLISHED）</span></span><br><span class="line"></span><br><span class="line">netstat -ap</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定端口，可以结合grep命令：</span></span><br><span class="line"></span><br><span class="line">netstat -ap | grep 8000</span><br><span class="line"></span><br><span class="line"><span class="comment">#还可以使用lsof命令：</span></span><br><span class="line"></span><br><span class="line">lsof -i:4000</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭正在使用端口的程序，用kill + 对应的pid</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 pid(号)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="18"><li>pip 下载镜像源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用方法：</span></span><br><span class="line">pip install requsets -i https://pypi.tuna.tsinghua.edu.cn/simple/ Scip</span><br><span class="line"><span class="comment">#镜像源列表：</span></span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/ //阿里</span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/ //清华</span><br><span class="line">https://pypi.douban.com/ //豆瓣</span><br><span class="line">https://pypi.hustunique.com/ //华中理工大学</span><br><span class="line">https://pypi.sdutlinux.org/ //山东理工大学</span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/ //中国科学技术大学</span><br></pre></td></tr></table></figure><ol start="19"><li>ubuntu 系统命令行设置投屏显示 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用单显示屏---关闭笔记电脑屏幕（即主屏 LVDS-1不同笔记本可能不一样有eDP-1端口等）</span></span><br><span class="line">xrandr --output LVDS-1 --off  </span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展屏幕模式</span></span><br><span class="line">xrandr --output HDMI-1 --right-of LVDS-1 --auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切回主屏命令（或者直接合上笔记本再打开）</span></span><br><span class="line">xrandr --output LVDS-1 --auto</span><br></pre></td></tr></table></figure><p>​      <a href="https://blog.csdn.net/qq_38863413/article/details/101454236">Ubuntu系统笔记本投屏显示器方法—参考</a></p><ol start="20"><li>在linux中制作desktop快捷链接方式  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建一个连接程序</span></span><br><span class="line">vim typora.desktop</span><br><span class="line"></span><br><span class="line">[DesktopEntry]</span><br><span class="line">Name=Typora</span><br><span class="line"><span class="comment">#打开软件路径</span></span><br><span class="line">Exec=/opt/Typora/bin/Typora-linux-x64/Typora</span><br><span class="line"><span class="comment">#类型</span></span><br><span class="line">Type=Application</span><br><span class="line"><span class="comment">#图标位置</span></span><br><span class="line">Icon=opt/Typora/bin/Typora-linux-x64/resources/assets/iconicon_512x512.png</span><br><span class="line"></span><br><span class="line"><span class="comment">#将程序拷贝到目标地址</span></span><br><span class="line">cp typora.desktop /usr/share/applications/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将可执行的程序链接到终端的可执行命令，即配置环境</span></span><br><span class="line">ln -s /home/robot/software/Typora/bin/Typora-linux-x64/Typora /usr/sbin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改可执行权限(在./Typora文件中)</span></span><br><span class="line">chown root.rootchrome-sandbox</span><br><span class="line">chmod 755 chrome-sandbox</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="21"><li>Linux 系统目录结构</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> / ：根 </span><br><span class="line">每一个文件和目录从根目录开始。</span><br><span class="line">只有root用户具有该目录下的写权限。请注意，/root是root用户的主目录，这与/不一样</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> /bin ：用户二进制文件</span><br><span class="line">包含二进制可执行文件。</span><br><span class="line">在单用户模式下，你需要使用的常见Linux命令都位于此目录下。系统的所有用户使用的命令都设在这里。</span><br><span class="line">例如：ps、ls、ping、grep、cp</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> /sbin ：系统二进制文件</span><br><span class="line">就像/bin，/sbin同样也包含二进制可执行文件。</span><br><span class="line">但是，在这个目录下的linux命令通常由系统管理员使用，对系统进行维护。例如：iptables、reboot、fdisk、ifconfig、swapon命令</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> /etc ：配置文件</span><br><span class="line">包含所有程序所需的配置文件。</span><br><span class="line">也包含了用于启动/停止单个程序的启动和关闭shell脚本。例如：/etc/resolv.conf、/etc/logrotate.conf</span><br><span class="line">hosts：设备名称（或域名）到ip地址的解析，相当于本地存在的dns功能。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> /dev ：设备文件</span><br><span class="line">包含设备文件。</span><br><span class="line">这些包括终端设备、USB或连接到系统的任何设备。例如：/dev/tty1、/dev/usbmon0</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> /proc ：进程信息</span><br><span class="line">包含系统进程的相关信息。</span><br><span class="line">这是一个虚拟的文件系统，包含有关正在运行的进程的信息。例如：/proc/&#123;pid&#125;目录中包含的与特定pid相关的信息。</span><br><span class="line">这是一个虚拟的文件系统，系统资源以文本信息形式存在。例如：/proc/uptime</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> /<span class="keyword">var</span> ：变量文件</span><br><span class="line"><span class="keyword">var</span>代表变量文件。</span><br><span class="line">这个目录下可以找到内容可能增长的文件。</span><br><span class="line">这包括 - 系统日志文件（/<span class="keyword">var</span>/log）;包和数据库文件（/<span class="keyword">var</span>/lib）;电子邮件（/<span class="keyword">var</span>/mail）;打印队列（/<span class="keyword">var</span>/spool）;</span><br><span class="line">锁文件（/<span class="keyword">var</span>/lock）;多次重新启动需要的临时文件（/<span class="keyword">var</span>/tmp）;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> /tem ：临时文件</span><br><span class="line">包含系统和用户创建的临时文件。</span><br><span class="line">当系统重新启动时，这个目录下的文件都将被删除。</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> /usr ：系统应用程序</span><br><span class="line">包含二进制文件、库文件、文档和二级程序的源代码。</span><br><span class="line">/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：at、awk、cc、less、scp。</span><br><span class="line">/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例如：atd、cron、sshd、useradd、userdel。</span><br><span class="line">/usr/lib中包含了/usr/bin和/usr/sbin用到的库。</span><br><span class="line">/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> /home ：HOME 目录</span><br><span class="line">所有用户用home目录来存储他们的个人档案。</span><br><span class="line">例如：/home/robot/</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> /boot ：引导加载程序文件</span><br><span class="line">包含引导加载程序相关的文件。</span><br><span class="line">内核的initrd、vmlinux、grub文件位于/boot下。</span><br><span class="line">例如：initrd.img-<span class="number">2.6</span><span class="number">.32</span>-<span class="number">24</span>-generic、vmlinuz-<span class="number">2.6</span><span class="number">.32</span>-<span class="number">24</span>-generic</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> /lib ：系统库</span><br><span class="line">包含支持位于/bin和/sbin下的二进制文件的库文件.</span><br><span class="line">库文件名为 ld或lib.so.*</span><br><span class="line">例如：ld-<span class="number">2.11</span><span class="number">.1</span>.so，libncurses.so<span class="number">.5</span><span class="number">.7</span></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> /opt代表可选的。</span><br><span class="line">包含从个别厂商的附加应用程序。</span><br><span class="line">附加应用程序应该安装在/opt/或者/opt/的子目录下。</span><br><span class="line"></span><br><span class="line"><span class="number">14</span> /mnt ：挂载目录</span><br><span class="line">临时安装目录，系统管理员可以挂载文件系统。</span><br><span class="line"></span><br><span class="line"><span class="number">15</span> /media ：可移动媒体设备</span><br><span class="line">用于挂载可移动设备的临时目录。</span><br><span class="line">举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器的/media/floppy;</span><br><span class="line"></span><br><span class="line"><span class="number">16</span> /srv ：服务数据</span><br><span class="line">srv代表服务。</span><br><span class="line">包含服务器特定服务相关的数据。</span><br><span class="line">例如，/srv/cvs包含cvs相关的数据。</span><br></pre></td></tr></table></figure><ol start="22"><li>SSH 协议</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 ~/.bashrc 文件中配置如下命令：</span></span><br><span class="line"><span class="built_in">alias</span> name01 = <span class="string">&quot;ssh root@192.168.17.2&quot;</span></span><br><span class="line"></span><br><span class="line">注：在终端中输入 name01相当于ssh root@192.168.17.2,其中<span class="built_in">alias</span>是别名</span><br><span class="line">执行过程中需要输入远程许可密码，可以使用ssh-keygen生成本地秘钥，然后将该秘钥复制到远程服务器的authorized_keys文件（在 ~/.ssh位置），</span><br><span class="line">内容追加方式添加。</span><br></pre></td></tr></table></figure><ol start="23"><li>开启ssh远程登陆—在ubuntu上配置流程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 opnessh-server</span></span><br><span class="line">sudo apt update //更新源文件</span><br><span class="line">sudo apt upgrate//更新软件，升级包文件</span><br><span class="line">sudo apt install openssh-server //下载ssh第三包</span><br><span class="line"><span class="comment"># 激活和参看ssh状态</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> ssh //激活</span><br><span class="line">sudo systemctl start ssh//启动</span><br><span class="line">sudo systemctl status ssh//查看ssh网络状态</span><br><span class="line"><span class="comment">#设置firewall允许ssh端口(默认port 22)</span></span><br><span class="line">sudo ufw allow ssh//sudo ufw allow|deny [service] 开启或禁用某个服务</span><br><span class="line">sudo ufw <span class="built_in">enable</span>// 重启firewall</span><br><span class="line">sudo ufw status</span><br><span class="line"><span class="comment">#查看本机网络ip及用户名</span></span><br><span class="line">ifconfig</span><br><span class="line">whoami</span><br><span class="line"><span class="comment">#在其他平台上通过远程连接工具(xshell等)登陆ubuntu</span></span><br><span class="line">ssh username@ip//需要输入登陆ubuntu该用户的密码</span><br><span class="line"><span class="comment">#-------------------------其他操作-------------------------</span></span><br><span class="line"><span class="comment">#更改端口号</span></span><br><span class="line">sudo vim /etc/ssh/sshd_config //将port 22 更改成1024之后的端口如(port 2222)，取消<span class="comment">#号注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启ssh</span></span><br><span class="line">sudo /etc/init.d/ssh restart </span><br><span class="line">sudo service ssh restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务状态</span></span><br><span class="line">ps ax | grep ssh</span><br><span class="line">sudo netstat -ant// 查看与外部连接端口情况</span><br><span class="line"></span><br><span class="line"><span class="comment">#用root账号密码远程登陆需要设置</span></span><br><span class="line">sudo password root (密码)//重置密码</span><br><span class="line">sudo vim /etc/ssh/sshd_config//取消root登陆限制，更改成PermitRootLogin yes</span><br><span class="line">sudo service ssh restart//重启</span><br></pre></td></tr></table></figure><ol start="24"><li>ubuntu 安装、卸载清除</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">sudo apt-get install softname</span><br><span class="line"><span class="comment"># 卸载软件</span></span><br><span class="line">sudo apt-get remove softname</span><br><span class="line"><span class="comment"># 卸载清理配置</span></span><br><span class="line">sudo apt-get remove -purge softname</span><br><span class="line"><span class="comment"># 更新软件信息数据库</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 系统升级</span></span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="comment"># 搜索软件包</span></span><br><span class="line">sudo apt-cache search softname</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------deb 软件的安装卸载--------</span></span><br><span class="line"><span class="comment"># 安装deb软件包</span></span><br><span class="line">dpkg -i xxx.deb</span><br><span class="line"><span class="comment"># 删除deb软件包</span></span><br><span class="line">dpkg -r xxx.deb</span><br><span class="line"><span class="comment"># 删除deb软件包及配置文件</span></span><br><span class="line">dpkg -r -purge xxx.deb</span><br><span class="line"><span class="comment"># 查看软件包信息</span></span><br><span class="line">dpkg -info xxx.deb</span><br><span class="line"><span class="comment"># 查看文件拷贝详情</span></span><br><span class="line">dpkg -L xxx.deb</span><br><span class="line"><span class="comment"># 查看系统中安装的deb包详情</span></span><br><span class="line">dpkg -l</span><br><span class="line"><span class="comment"># 重新配置软件包</span></span><br><span class="line">dpkg -reconfigure xxx</span><br></pre></td></tr></table></figure><ol start="25"><li>删除缓存</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoclean<span class="comment"># 清理旧版本的软件缓存</span></span><br><span class="line">sudo apt-get clean <span class="comment"># 清理所有软件缓存</span></span><br><span class="line">sudo apt-get autoremove<span class="comment"># 删除系统不再使用的孤立软件</span></span><br><span class="line"><span class="comment">#--------------------------------</span></span><br><span class="line"><span class="comment"># 卸载：tracker(此应用与文件管理器关联)</span></span><br><span class="line"><span class="comment"># 这个东西一般我只要安装ubuntu就会第一删掉tracker 他不仅会产生大量的cache文件而且还会影响开机速度。所以在新得利里面删掉就行。</span></span><br></pre></td></tr></table></figure><ol start="26"><li>删除多余内核</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前Ubuntu系统使用的内核</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看所有内核</span></span><br><span class="line">dpkg --get-selections | grep linux</span><br><span class="line"><span class="comment"># 删除旧内核，注意一般选内核号较小的</span></span><br><span class="line">sudo apt-get remove linux-image-xxxxx-generic</span><br><span class="line">sudo apt-get remove linux-headers-xxxxx</span><br><span class="line">sudo apt-get remove linux-headers-xxxxx-generic</span><br></pre></td></tr></table></figure><ol start="27"><li>.tar.gz文件解压缩命令—linux文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩命令</span></span><br><span class="line">tar -zcvf 压缩文件名.tar.gz</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf 文件名.tar.gz</span><br></pre></td></tr></table></figure><ol start="28"><li>ubuntu中Python虚拟环境</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------pipenv---------------</span></span><br><span class="line"><span class="comment"># 安装 pip3</span></span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"><span class="comment"># 安装 pipenv</span></span><br><span class="line">pip install pipenv</span><br><span class="line"><span class="comment"># 全局安装 pipenv</span></span><br><span class="line">sudo -H pip install -U pipenv</span><br></pre></td></tr></table></figure><ol start="29"><li>linux系统架构</li></ol><blockquote><p>linux系统架构：AMD、ARM、x86、x86_64等</p><p>公认i386为32位系统，也就是x86</p><p>ARM架构是一个32位精简指令集（RISC）<a href="https://baike.baidu.com/item/%E5%A4%84%E7%90%86%E5%99%A8">处理器</a>架构，主要应用在智能手机和平板电脑</p><p>x86_64,x64,AMD64基本上是同一个东西，市面上的intel/amd的桌面级CPU基本上都是x86_64</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line">uname -a</span><br><span class="line">uname -r</span><br><span class="line"><span class="comment"># 查看linux版本信息</span></span><br><span class="line">cat /etc/issue</span><br><span class="line"><span class="comment"># 查看linux是64为还是32位</span></span><br><span class="line">file /bin/ls</span><br><span class="line"><span class="comment"># 查看系统的架构</span></span><br><span class="line">arch</span><br><span class="line">dpkg --print-architecture</span><br><span class="line">file /lib/systemd/systemd</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wf19930209/article/details/79536506">cpu架构叫法区别x86\x86_64\amd64</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ubuntu-使用技巧&quot;&gt;&lt;a href=&quot;#ubuntu-使用技巧&quot; class=&quot;headerlink&quot; title=&quot;ubuntu 使用技巧&quot;&gt;&lt;/a&gt;ubuntu 使用技巧&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;mkdir的技巧&lt;/li&gt;
&lt;/ol&gt;
&lt;figure </summary>
      
    
    
    
    <category term="Linux" scheme="https://bingeone.github.io/bione/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://bingeone.github.io/bione/tags/Linux/"/>
    
    <category term="ubuntu" scheme="https://bingeone.github.io/bione/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>初始化Django项目一般流程(虚拟环境env)</title>
    <link href="https://bingeone.github.io/bione/posts/3869305285.html"/>
    <id>https://bingeone.github.io/bione/posts/3869305285.html</id>
    <published>2022-01-25T14:15:06.000Z</published>
    <updated>2022-01-30T14:15:20.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化项目环境要求"><a href="#初始化项目环境要求" class="headerlink" title="初始化项目环境要求"></a>初始化项目环境要求</h3><ul><li>vs code</li><li>python3.8或更高的版本</li><li>Django最新版本(在虚拟环境中安装)</li><li>注：此项目演示在Ubuntu 20.04.3 LTS 中，在Linux系统中类似</li></ul><h3 id="一般过程"><a href="#一般过程" class="headerlink" title="一般过程"></a>一般过程</h3><ul><li>在某个位置，新建一个文件夹storefront，并进入文件夹内</li></ul><p><img src="https://i.loli.net/2021/09/01/da76hunmiTWMOy4.png"></p><ul><li>用pipenv 安装django，前提python中有pipenv包(或者pip3 install pipenv)</li></ul><p><img src="https://i.loli.net/2021/09/01/IocmbSH4rkCwysq.png"></p><ul><li>在当前文件位置启动Vscode，可以看到pipfile 和 Pipfile.lock 两个文件</li></ul><p><img src="https://i.loli.net/2021/09/01/c7ns483wGEISFgR.png"></p><ul><li><p>激活python虚拟环境，命令 pipenv shell  命令行前面多出小括号如(storefront)表示虚拟环境激活</p></li><li><p>django-admin 可以查看所有的子命令</p></li></ul><p><img src="https://i.loli.net/2021/09/01/kHvGb3nsKqDRwMr.png"></p><ul><li>新建一个项目storefront ，命令 django-admin startproject storefront . (此处点意思以当前为目录项目名)</li></ul><p><img src="https://i.loli.net/2021/09/01/OFR54bpNndmzrHg.png"></p><ul><li>本地启动django，命令 python manage.py runserver (端口默认8000，可自定义端口如python manage.py runserver 8080)</li></ul><p><img src="https://i.loli.net/2021/09/01/cdeGBlz94tAqFUu.png"></p><ul><li>红色提示 : ”Run ‘python manage.py migrate’ to apply them.”  ，表示该项目还没有进行数据库迁移绑定</li><li><a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 为django在浏览器启动本地ip，8000为默认端口，如下表示启动成功</li></ul><p><img src="https://i.loli.net/2021/09/01/jRVuD6k3sA5Plrv.png"></p><ul><li>在vscode终端terminal 启动django，先在terminal查看安装django中python解释器位置，命令 pipenv –venv</li></ul><p><img src="https://i.loli.net/2021/09/01/cbhv1pN3ltI4UDi.png"></p><ul><li>ctrl + shift + p 打开 vs code常用搜索栏，输入 python: Select Interpreter ，选择对应上面位置python解释器</li></ul><p><img src="https://i.loli.net/2021/09/01/kdMNFrajpoBnYA8.png"></p><ul><li>pipenv shell 激活python虚拟环境，命令行前面多出小括号如（storefront），表示虚拟环境激活，deactivate 表示退出虚拟环境</li></ul><p><img src="https://i.loli.net/2021/09/01/c4mLSxQZA8THqCw.png"></p><ul><li>python manage.py runserver   启动django项目</li><li>创建项目子应用playground，命令 python manage.py startapp playground  </li></ul><p><img src="https://i.loli.net/2021/09/01/E9MCHPqTSpbdxQW.png"></p><ul><li>数据库迁移</li></ul><blockquote><p>python manage.py makemigrations 生成迁移（如生成一个0001_initial.py文件）</p><p>python manage.py migrate 执行迁移（根据0001_initial.py文件执行表格迁移）</p><p>python manage.py migrate store 0003    执行迁移回退上一步（对应的应用store，回退到的版本0003）</p></blockquote><p>  <img src="https://i.loli.net/2021/09/06/FTD7PUlXwctbBR6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初始化项目环境要求&quot;&gt;&lt;a href=&quot;#初始化项目环境要求&quot; class=&quot;headerlink&quot; title=&quot;初始化项目环境要求&quot;&gt;&lt;/a&gt;初始化项目环境要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vs code&lt;/li&gt;
&lt;li&gt;python3.8或更高的版本&lt;/li</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="django" scheme="https://bingeone.github.io/bione/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Git版本控制精简版</title>
    <link href="https://bingeone.github.io/bione/posts/2489357851.html"/>
    <id>https://bingeone.github.io/bione/posts/2489357851.html</id>
    <published>2021-12-05T14:05:57.000Z</published>
    <updated>2022-01-07T14:21:17.754Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://git-scm.com/">Git</a>是一种强大高效VCS(version control system版本控制系统)，能够实现项目文件过程的实时监控。git使用方式与其他版本控制系统（如CVS、Subversion、Perfoce）类似，但前后者之间区别的：git保存处理数据，对当时项目状态采用创建一种快照的索引方式；后者处理存储信息是基于文件随时间累积差异。</p><h3 id="Git的特点"><a href="#Git的特点" class="headerlink" title="Git的特点"></a>Git的特点</h3><ul><li>直接记录快照，而非差异比较</li><li>近乎所有操作都是本地执行</li><li>Git 保证完整性</li><li>Git 一般只添加数据</li><li>三种状态：<strong>已提交</strong>（committed）、<strong>已修改</strong>（modified） 和 <strong>已暂存</strong>（staged）<ul><li>已修改表示修改了文件，但还没保存到数据库中</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</li><li>已提交表示数据已经安全地保存在本地数据库中</li></ul></li><li>三个阶段：工作区、暂存区以及 Git 目录<ul><li>工作区（操作文件的目录文件）是对项目的某个版本独立提取出来的内容</li><li>暂存区是一个文件（过度文件），保存了下次提交的文件列表信息，一般在 Git 仓库目录中</li><li>Git 仓库目录（.git directory目录文件）是 Git 用来保存项目的元数据和对象数据库的地方</li></ul></li></ul><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>windows下:</p><blockquote><p><a href="https://git-scm.com/download/win">git官网下载</a></p></blockquote><p>ubuntu下:</p><blockquote><p>linux各个发行版<a href="https://git-scm.com/download/linux">安装Git命令</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新安装源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Git-使用前配置"><a href="#Git-使用前配置" class="headerlink" title="Git 使用前配置"></a>Git 使用前配置</h3><ol><li><p>git config –global user.name 提交人姓名</p></li><li><p>git config –global user.email  提交人邮箱</p></li><li><p>git config –list  查看配置信息</p></li><li><p>如需要修改，重复上述命令即可</p></li></ol><h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><ol start="0"><li><p>git init 初始化git仓库</p></li><li><p>git status  查看过渡区的文件状况</p></li><li><p>git add 文件名  提交文件到过渡区</p></li><li><p>git commit -m ‘提交注释’正式提交到git的本地仓库</p></li><li><p>git log 查看提交的记录</p></li><li><p>git diff HEAD – 文件名 查看此文件变动信息</p></li><li><p>git restore  文件名       可以从git本地仓库中下载文件到工作目录<br> git reset HEAD 文件名      从缓存取撤回文件</p></li><li><p>git log –pretty=oneline     查看提交 版本信息在一行显示<br> git log –oneline        每行显示一条commit</p></li><li><p>git reset –hard HEAD~3          表示回退3个版本（^^^三个版本，可以回退删除的文件）<br> git reset –hard 版本信息标识     可以回退到指定的版本</p></li><li><p>git reflog  可以查看所有的提交信息，包括之前回退后没有标识信息的版本</p></li><li><p>git ls-files   查看git本地仓库的文件信息</p></li><li><p>git checkout – 文件名   可以从git本地仓库中下载文件到工作目录（工作目录文件可以直接删除）<br>  git checkout 分支名        切换分支（或  git switch 分支名）<br>  git checkout -b 分支名    创建分支并切换到该分支上<br>  git checkout -m|-M          重命名分支<br>  git branch 分支名            创建分支<br>  git branch                         查看分支列</p><p>  git merge 分支名         将该分支上的文件合并到master 上（在切换到master的前提下）<br>  git branch -d 分支名    将该分支删除        </p></li><li><p>git rm 文件名    可以删除git本地仓库和工作目录的文件<br> git add 文件名  可以删除已存在的文件（没有就是添加）</p></li><li><p><strong>主干和分支冲突（conflict）解决</strong><br> 冲突出现：通道上会显示主干和分支两个名字 （同一个文件同一行内容不同，产生冲突）<br> 解决方式：需要在主干（main）上对应的文件进行冲突内容的修改，并再一次提交（commit），这时通道就会切回一个支干，（注：分支上的对应文件的内容不会相应修改，只能以主干上的为准，只是解决操作显示错误问题，不能够同时修改主干和分支的文件内容）<br> git log –graph –pretty=oneline    查看冲突线路图</p></li><li><p><strong>多人协同冲突</strong><br> 冲突出现：（同一个文件同一行内容不同，产生冲突） push远程时会报错冲突<br> 解决方式： 需要将内容pull下来，然后查看相关冲突的文档内容并修改，再次commit，并push就可以<br> 一般操作先从远程pull，修改不同内容后再commit</p></li><li><p><strong>标签操作</strong>（tag：相当给当前打标签文件进行压缩保存包，可以直接下载）<br> git tag                              查看所有带标签的号<br> git tag  标签号                对当前支干通道打标签<br> git tag  标签号  版本标识            对某个文件打标签<br> git tag  -a 标签号 -m ‘注释内容’ 版本标识    对某个文件打标签，并加注释内容</p><p> git push origin –tags            推送所有没有被推送的标签<br> git push origin :refs/tags/v1.0(标签号)        删除远程标签<br> git tag -d v1.0（标签号）            删除本地标签</p></li></ol><h3 id="与Github关联方法"><a href="#与Github关联方法" class="headerlink" title="与Github关联方法"></a>与Github关联方法</h3><ul><li>方式一：本地先建好仓库，在github上再建仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen –t rsa(生成秘钥key，用于关联远程仓库，如github)，生成了id_rsa和id_rsa.pub</span><br><span class="line">将生成id_rsa.pub用记事本或者其他软件打开，将其全部复制到github上</span><br><span class="line">再点击New SSH key</span><br><span class="line">Tile 是填写SSH key的标题名字</span><br><span class="line">Key 是id_rsa.pub复制的文件数据内容，</span><br><span class="line">测试是否关联成功：ssh -T git@github.com</span><br><span class="line">对于 oschina 的 “码云” ，执行 ssh -T git@git.oschina.net</span><br><span class="line">对于 coding 的 “码市” ，执行 ssh -T git@git.coding.net</span><br><span class="line"></span><br><span class="line">git branch -a      查看所有分支（远程和本地）</span><br><span class="line">git push origin dev1推送本地某个分支到远程</span><br><span class="line">git push origin :dev1删除远程某个分子</span><br><span class="line"></span><br><span class="line">git fetch在github上手动添加分支，需要这个命令刷新</span><br><span class="line">git checkout -b dev2 origin/dev2将远程新建的分支下载到本地，并切换到该分支上</span><br></pre></td></tr></table></figure><ul><li>方式二：在github上先建仓库，再将其git clone下来（也能关联远程）</li></ul><h3 id="操作注意事项"><a href="#操作注意事项" class="headerlink" title="操作注意事项"></a>操作注意事项</h3><blockquote><p>一般在分支上提交修改文件，然后git switch main 切换到主分支上，再推送到远程仓库<br>不能在要删除的分支上使用 git branch -d 删除该分支</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从暂存区撤销文件</span></span><br><span class="line">git reset HEAD -- .  <span class="comment"># (注意最后的一个&quot;.&quot;,这条命令帮助我们一次性撤销所有放入暂存区的文件)</span></span><br><span class="line">git reset HEAD -- filename<span class="comment"># (撤销指定目标文件)</span></span><br><span class="line">git rm --cached filename<span class="comment"># (撤销指定目标文件)</span></span><br><span class="line">git rm -f filename  <span class="comment"># 命令，也能把文件从暂存区删除，此命令同时删除了本地文件，回收站中也找不到了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git status中文乱码问题</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git log 乱码问题</span></span><br><span class="line">git config --global i18n.commitencoding utf-8</span><br><span class="line">git config --global i18n.logoutputencoding utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除未被追踪（tracked）</span></span><br><span class="line">git clean -xf</span><br><span class="line"></span><br><span class="line"><span class="comment">#区域关系：</span></span><br><span class="line">workspace即工作区，也就是本地计算机</span><br><span class="line">staging 即版本库中的stage，暂存区</span><br><span class="line"><span class="built_in">local</span> repository 即版本库中的master（main），也称本地仓库</span><br><span class="line">Remote repository 则是远程仓库</span><br><span class="line"></span><br><span class="line"><span class="comment">#用git config命令查看配置文件：</span></span><br><span class="line">命令参数 –list, 简写 -l</span><br><span class="line">格式：git config  -l</span><br><span class="line">查看仓库级的config，即.git/.config，命令：git config --<span class="built_in">local</span> -l</span><br><span class="line">查看全局级的config，即C:\Users\.gitconfig，命令：git config --global -l</span><br><span class="line">查看系统级的config，即D:\Program Files\Git\etc\gitconfig，命令：git config --system -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#用git config命令编辑配置文件（一般在电脑所对应的文件修改，即上述）</span></span><br><span class="line">命令参数 –edit, 简写 -e</span><br><span class="line">格式：git config [–<span class="built_in">local</span>|–global|–system] -e</span><br><span class="line">查看仓库级的config，即.git/.config，命令：git config --<span class="built_in">local</span> -e，git config -e默认是<span class="comment">#编辑仓库级的配置文件。</span></span><br><span class="line">查看全局级的config，即C:\Users\zuoyu.ht\.gitconfig，命令：git config --global -e</span><br><span class="line">查看系统级的config，即D:\Program Files\Git\etc\gitconfig，命令：git config --system -e</span><br></pre></td></tr></table></figure><p><strong>学习资料</strong></p><p><a href="https://git-scm.com/book/zh/v2">git学习手册下载</a></p><p><a href="https://git-scm.com/downloads/guis/">GUI可视化工具</a>：</p><ul><li><a href="https://tortoisegit.org/download/">TortoiseGit(小乌龟) </a> </li><li><a href="https://www.sourcetreeapp.com/enterprise">Source Tree</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;是一种强大高效VCS(version control system版本控制系统)，能够实现项目文件过程的实时监控。git使用方式与其他版本控制系统（如CVS、Subversion、Perfoce）类</summary>
      
    
    
    
    <category term="开发工具" scheme="https://bingeone.github.io/bione/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="git" scheme="https://bingeone.github.io/bione/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Vim常用快捷操作</title>
    <link href="https://bingeone.github.io/bione/posts/3517918973.html"/>
    <id>https://bingeone.github.io/bione/posts/3517918973.html</id>
    <published>2021-12-05T14:05:57.000Z</published>
    <updated>2021-12-05T14:26:03.467Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.vim.org/download.php">Vim</a>是从 vi 单纯的文字处理软件发展成强大的程序开发工具，具备代码补完、编译及错误跳转等方便编程的功能，并且支持强大的第三方插件。</p><h3 id="Vim安装教程"><a href="#Vim安装教程" class="headerlink" title="Vim安装教程"></a>Vim安装教程</h3><p>windows下:</p><ul><li>从<a href="https://www.vim.org/download.php">官网</a>下载EXE安装包</li><li>直接点击安装安装包，一直next安装，过程中可以指定安装位置</li><li>配置环境变量(通用配置)，我的电脑&gt;属性&gt;高级系统设置&gt;高级&gt;环境变量&gt;系统变量&gt;Path&gt;新建&gt;vim.exe文件位置(自定义安装位置)</li></ul><blockquote><p><a href="https://www.cnblogs.com/zhujiangyu/p/13456698.html">windows安装图文教程</a></p><p><a href="https://www.cnblogs.com/Eric-jx/p/10491922.html">windows环境配置图文教程</a></p></blockquote><p>ubuntu下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新安装源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装vim</span></span><br><span class="line">sudo apt-get install vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim的配置文件</span></span><br><span class="line">sudo vim /etc/vim/vimrc</span><br></pre></td></tr></table></figure><h3 id="Vim-常用快捷操作"><a href="#Vim-常用快捷操作" class="headerlink" title="Vim 常用快捷操作"></a>Vim 常用快捷操作</h3><ul><li><p>Vim 三种模式</p><ul><li>命令模式(Command mode)：启动时默认状态，可以执行移动、复制、删除等操作，不可编辑</li><li>插入模式(Insert mode)：按 i 进入编辑模式，正常文本编辑</li><li>底行模式(Last line mode)：执行保存、退出以及其他的一些功能。按下Shift+:即可进入底行模式</li></ul></li><li><p>保存文件并退出—— :wq!        # 感叹号</p></li><li><p>退出不保存—— :q </p></li><li><p>模式切换——— esc</p></li><li><p>Vim 插件下载<a href="https://vimawesome.com/plugin/youcompleteme"><strong>Vim Awesome官网</strong></a>（演示：插件管理器Vundle.vim ,不同管理器下载、卸载方式有差异）</p><ul><li>在命令模式下，输入: PluginInstall  下载插件(前提：在./vimrc 文件中添加插件名称)</li><li>输入：PluginClean 卸载插件(前提：在./vimrc 文件中删除插件或注释)</li><li>常用插件<ul><li>youcompleteme—-代码补全</li><li>NEDRTree——树状目录结构</li></ul></li></ul></li></ul><table><thead><tr><th>功能(命令模式下)</th><th>快捷键</th><th>功能(命令模式下)</th><th>快捷键</th></tr></thead><tbody><tr><td>上下左右移动</td><td>h/j/k/l(方向键)</td><td>插入(编辑模式)</td><td>i</td></tr><tr><td>删除/剪切当前行</td><td>dd</td><td>按词向后移动</td><td>w</td></tr><tr><td>复制当前行</td><td>yy</td><td>按词向前移动</td><td>b</td></tr><tr><td>粘贴(向下)</td><td>p</td><td>选中当前行</td><td>V</td></tr><tr><td>撤销</td><td>u</td><td>上一页</td><td>ctrl + b</td></tr><tr><td>反撤销</td><td>ctrl + r</td><td>下一页</td><td>ctrl + f</td></tr><tr><td>回到首端</td><td>gg / home</td><td>重复上一次命令</td><td>`</td></tr><tr><td>回到尾端</td><td>G / end</td><td>删除当前字符</td><td>x</td></tr><tr><td>全局替换</td><td>:% s/要替内容/内容/g</td><td>在查找str选中下，向下移动光标定位到str</td><td>n</td></tr><tr><td>局部替换</td><td>:开始行,结束行s/要替换内容/内容</td><td>在查找str选中下，向上移动光标定位到str</td><td>N</td></tr><tr><td>定位指定行</td><td>数字+gg</td><td></td><td></td></tr><tr><td>搜索内容</td><td>:/内容</td><td></td><td></td></tr><tr><td>自动补全</td><td>ctrl + n (Vim默认)</td><td></td><td></td></tr><tr><td>删除当前行</td><td>cc</td><td></td><td></td></tr></tbody></table><ul><li>Vim键盘快捷键图示<a href="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif">链接</a></li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif"></p><ul><li>ctrl + n 自动补全</li><li>批量注释</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 5-15 行添加 // 注释</span></span><br><span class="line">:5,15s<span class="comment">#^#//#g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 5-15 行取消 // 注释</span></span><br><span class="line">:5,15s<span class="comment">#^//##g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 5-15 行添加 # 注释</span></span><br><span class="line">:5,15s/^/<span class="comment">#/g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 5-15 行取消 # 注释</span></span><br><span class="line">:5,15s/^<span class="comment">#//g</span></span><br></pre></td></tr></table></figure><h3 id="Linux常用文本工具"><a href="#Linux常用文本工具" class="headerlink" title="Linux常用文本工具"></a>Linux常用文本工具</h3><ul><li>vi/vim</li><li>gedit</li><li>nano</li><li>常用编辑命令</li></ul><table><thead><tr><th align="left">命令</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">echo</td><td align="left">屏幕打印与文本输出</td></tr><tr><td align="left">cat</td><td align="left">合并文件或查看文件内容</td></tr><tr><td align="left">tail</td><td align="left">显示文件内容的尾部</td></tr><tr><td align="left">grep</td><td align="left">文本过滤工具</td></tr></tbody></table><blockquote><p>echo “hello”       # 打印文本内容</p><p>#将内容写入txt文件中</p><p>echo “hello,world”&gt;hello.txt</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.vim.org/download.php&quot;&gt;Vim&lt;/a&gt;是从 vi 单纯的文字处理软件发展成强大的程序开发工具，具备代码补完、编译及错误跳转等方便编程的功能，并且支持强大的第三方插件。&lt;/p&gt;
&lt;h3 id=&quot;Vim安装教程&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="开发工具" scheme="https://bingeone.github.io/bione/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="vim" scheme="https://bingeone.github.io/bione/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>python面对对象</title>
    <link href="https://bingeone.github.io/bione/posts/4035240104.html"/>
    <id>https://bingeone.github.io/bione/posts/4035240104.html</id>
    <published>2021-11-06T15:05:57.000Z</published>
    <updated>2021-11-06T15:07:37.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象简述"><a href="#面向对象简述" class="headerlink" title="面向对象简述"></a>面向对象简述</h3><p>Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。</p><p>对象可以包含任意数量和类型的数据。</p><blockquote><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base  class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul></blockquote><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br><span class="line"><span class="comment"># 类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。</span></span><br></pre></td></tr></table></figure><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><blockquote><p>类对象的两种用法: 属性引用和实例化</p><p>属性引用和Python中所有的属性引用语法相同：object.name</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"><span class="comment"># 实例化类</span></span><br><span class="line">x = Myclass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问类的属性和方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Myclass 类的属性i 为：&quot;</span>, x.i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Myclass 类的方法func为：&quot;</span>, x.func())</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">Myclass 类的属性i 为：<span class="number">1</span></span><br><span class="line">Myclass 类的方法func为: hello world!</span><br></pre></td></tr></table></figure><ul><li>类有一个名为 _<em>init</em>_() 的特殊方法（<strong>构造方法</strong>），该方法在类实例化时会自动调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, realpart, imagpart</span>)</span></span><br><span class="line"><span class="function">    <span class="title">self</span>.<span class="title">r</span> = <span class="title">realpart</span></span></span><br><span class="line"><span class="function">        <span class="title">self</span>.<span class="title">i</span> = <span class="title">imagpart</span></span></span><br><span class="line"><span class="function"><span class="title">x</span> = <span class="title">Complex</span>(<span class="params"><span class="number">3.0</span>, -<span class="number">2</span>,<span class="number">5</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="params">x.r, x.i</span>)</span></span><br><span class="line"><span class="function">#结果</span></span><br><span class="line"><span class="function">3.0 -2.5</span></span><br></pre></td></tr></table></figure><ul><li>self代表类的实例</li></ul><blockquote><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__class__)</span><br><span class="line">y = Text()</span><br><span class="line">y.yunc()</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;__main__.Test <span class="built_in">object</span> at <span class="number">0x7fa4e933a3a0</span>&gt;<span class="comment"># 类对象所在的地址</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Test</span>&#x27;&gt;# <span class="title">self</span>为<span class="title">Test</span>类的实例</span></span><br></pre></td></tr></table></figure><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><blockquote><p>在类的内部，使用 <strong>def</strong> 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line"><span class="meta">... </span>    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">... </span>    age = <span class="string">&#x27;&#x27;</span><span class="comment"># 定义基本属性</span></span><br><span class="line"><span class="meta">... </span>    __weight = <span class="number">0</span><span class="comment"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n, a, w</span>):</span><span class="comment"># 定义构造方法</span></span><br><span class="line"><span class="meta">... </span>            self.name = n</span><br><span class="line"><span class="meta">... </span>            self.age = a</span><br><span class="line"><span class="meta">... </span>            self.__weight = w</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name, self.age))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = people(<span class="string">&quot;xiaoli&quot;</span>, <span class="number">18</span>, <span class="number">55</span>)<span class="comment"># 类people实例化</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.speak()<span class="comment"># 调用speak方法（也叫函数）</span></span><br><span class="line">xiaoli 说: 我 <span class="number">18</span> 岁。</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>子类继承父类的属性和方法（派生类 DerivedClassName，基类 BaseClassName）</p><p>class DerivedClassName(modname, BaseClassName):</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span><span class="comment"># 父类定义</span></span><br><span class="line"><span class="meta">... </span>    name=<span class="string">&#x27;&#x27;</span><span class="comment"># 定义基本属性</span></span><br><span class="line"><span class="meta">... </span>    age=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">... </span>    __weight = <span class="number">0</span><span class="comment"># 定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w</span>):</span><span class="comment"># 定义构造方法</span></span><br><span class="line"><span class="meta">... </span>            slef.name = n</span><br><span class="line"><span class="meta">... </span>            self.age = a</span><br><span class="line"><span class="meta">... </span>            self.__weight = w</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(<span class="string">&quot;%s说：我%d岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">student</span>(<span class="params">people</span>):</span><span class="comment"># 单继承示例 （子类）</span></span><br><span class="line"><span class="meta">... </span>    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w,g</span>):</span></span><br><span class="line"><span class="meta">... </span>            people.__init__(self,n,a,w)<span class="comment"># 调用父类的构函</span></span><br><span class="line"><span class="meta">... </span>            self.grade = g</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span><span class="comment"># 重写父类的方法</span></span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(<span class="string">&quot;%s 说：我%d岁，我在读%d年级&quot;</span> %(self.name, self.age,self.grade))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = student(<span class="string">&quot;小李&quot;</span>, <span class="number">10</span>,<span class="number">50</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.speak()</span><br><span class="line">小李 说：我<span class="number">10</span>岁，我在读<span class="number">5</span>年级</span><br></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><blockquote><p>class DerivedClassName(Base1, Base2, Base3):</p><p>注意圆括号中父类的顺序</p><p>若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    age=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    __weight=<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w</span>):</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>说:我<span class="subst">&#123;self.age&#125;</span>岁！&quot;</span>)</span><br><span class="line"><span class="comment"># 单继承示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>(<span class="params">people</span>):</span></span><br><span class="line">    grade=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w,g</span>):</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>说：我读<span class="subst">&#123;self.grade&#125;</span>年级！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">speaker</span>():</span></span><br><span class="line">    topic=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,t</span>):</span></span><br><span class="line">        self.name=n</span><br><span class="line">        self.topic=t</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;我叫<span class="subst">&#123;self.name&#125;</span>,我是一个演说家，演讲的主题是<span class="subst">&#123;self.topic&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 多重继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sample</span>(<span class="params">speaker,student</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span></span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"></span><br><span class="line">test = sample(<span class="string">&#x27;Tim&#x27;</span>,<span class="number">25</span>,<span class="number">65</span>,<span class="number">4</span>,<span class="string">&#x27;English&#x27;</span>)</span><br><span class="line">test.speak()<span class="comment"># 方法名同，默认调用的是在括号中排前地父类的方法</span></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">我叫Tim,我是一个演说家，演讲的主题是English</span><br></pre></td></tr></table></figure><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span><span class="comment"># 定义父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span><span class="comment"># 定义子类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myMethod</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c = Child()<span class="comment"># 实例化</span></span><br><span class="line">c.myMethod()<span class="comment"># 子类调用方法重写</span></span><br><span class="line"><span class="built_in">super</span>(Child,c).myMethod()<span class="comment">#用子类对象调用，父类覆盖相同的方法 super()函数是用于调用父类</span></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">调用子类方法</span><br><span class="line">调用父类方法</span><br></pre></td></tr></table></figure><h3 id="类属性与方法"><a href="#类属性与方法" class="headerlink" title="类属性与方法"></a>类属性与方法</h3><ul><li>类的私有属性</li></ul><blockquote><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong></p></blockquote><ul><li>类的方法</li></ul><blockquote><p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例</p></blockquote><ul><li>类的私有方法</li></ul><blockquote><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。<strong>self.__private_methods</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JustCounter</span>:</span></span><br><span class="line">    __secretCount = <span class="number">0</span><span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span><span class="comment"># 公开变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__secretCount +=<span class="number">1</span></span><br><span class="line">        self.publicCount +=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(self.__secretCount)</span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()<span class="comment"># 输出 1</span></span><br><span class="line">counter.count()<span class="comment"># 输出 2</span></span><br><span class="line"><span class="built_in">print</span>(counter.publicCount)<span class="comment">#输出 2，反应上次publicCount的值</span></span><br><span class="line"><span class="built_in">print</span>(counter.__secretCount)<span class="comment"># 私有属性在类外部无法调用，报错</span></span><br></pre></td></tr></table></figure><ul><li>类的私有方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, url</span>):</span></span><br><span class="line">        self.name =name<span class="comment"># public</span></span><br><span class="line">        self.url = url<span class="comment"># private</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">who</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;url: <span class="subst">&#123;self.url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__foo</span>(<span class="params">self</span>):</span><span class="comment"># 私有方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;私有方法&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span><span class="comment"># 公开方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;公开方法&#x27;</span>)</span><br><span class="line">        self.__foo()</span><br><span class="line">a = Site(<span class="string">&#x27;百度&#x27;</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>)<span class="comment"># 实例化</span></span><br><span class="line">a.who()<span class="comment"># 调who</span></span><br><span class="line">a.foo()<span class="comment"># 调foo及__foo()方法</span></span><br><span class="line">a.__foo()<span class="comment"># 私有方法无法访问</span></span><br></pre></td></tr></table></figure><h3 id="类的专用方法"><a href="#类的专用方法" class="headerlink" title="类的专用方法"></a>类的专用方法</h3><blockquote><p>_<em>init</em>_: 构造函数，在生成对象时调用</p><p>_<em>del</em>_: 析构函数，释放对象时使用</p><p>_<em>repr</em>_: 打印、转换</p><p>_<em>setitem</em>_: 按照索引赋值</p><p>_<em>getitem</em>_: 按照索引获值</p><p>_<em>len</em>_: 获得长度</p><p>_<em>cmp</em>_: 比较运算</p><p>_<em>call</em>_: 函数调用</p><p>_<em>add</em>_: 加运算</p><p>_<em>sub</em>_: 减运算</p><p>_<em>mul</em>_: 乘运算</p><p>_<em>truediv</em>_: 除运算</p><p>_<em>mod</em>_: 求余运算</p><p>_<em>pow</em>_: 乘方运算</p></blockquote><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><blockquote><p>对类的专有方法进行重载</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,a,b</span>):</span></span><br><span class="line">        self.a =a</span><br><span class="line">        self.b=b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Vector (<span class="subst">&#123;self.a&#125;</span>,<span class="subst">&#123;self.b&#125;</span>)&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self,other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Vector(self.a + other.a,self.b + other.b)</span><br><span class="line">        </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(v1 + v2)<span class="comment"># 调用__str__</span></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">Vector (<span class="number">7</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;面向对象简述&quot;&gt;&lt;a href=&quot;#面向对象简述&quot; class=&quot;headerlink&quot; title=&quot;面向对象简述&quot;&gt;&lt;/a&gt;面向对象简述&lt;/h3&gt;&lt;p&gt;Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>python装饰器</title>
    <link href="https://bingeone.github.io/bione/posts/4059878826.html"/>
    <id>https://bingeone.github.io/bione/posts/4059878826.html</id>
    <published>2021-11-06T15:05:57.000Z</published>
    <updated>2021-11-06T15:07:14.969Z</updated>
    
    <content type="html"><![CDATA[<p><strong>装饰器</strong>好比一种语法糖，实现优化语言、增强被修饰对象的行为。装饰器是可调用的对象，其参数是另一个函数(被装饰的函数)；装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象^1^。装饰器两大特性：</p><ul><li>能把被装饰的函数替换成其他函数</li><li>装饰器在加载模块时立即执行</li></ul><h3 id="装饰器在python装饰方式特点"><a href="#装饰器在python装饰方式特点" class="headerlink" title="装饰器在python装饰方式特点"></a>装饰器在python装饰方式特点</h3><ul><li>通用装饰器装饰函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">functionName</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_in</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        ret = functionName(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func_in</span><br><span class="line"></span><br><span class="line"><span class="meta">@func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test---&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test2---&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test---a=%d---&quot;</span> %a)</span><br><span class="line"></span><br><span class="line">ret = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test return value is %s&quot;</span> %ret)</span><br><span class="line"></span><br><span class="line">a = test2()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test2 return value is %s&quot;</span>%a)         <span class="comment"># 没有返回值， 返回None</span></span><br><span class="line"></span><br><span class="line">test3(<span class="number">11</span>)</span><br><span class="line"><span class="comment">#-------------结果----------------</span></span><br><span class="line">---test---</span><br><span class="line">test <span class="keyword">return</span> value <span class="keyword">is</span> haha</span><br><span class="line">---test2---</span><br><span class="line">test2 <span class="keyword">return</span> value <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line">---test---a=<span class="number">11</span>---</span><br></pre></td></tr></table></figure><ul><li>带参数的装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_arg</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">functionName</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_in</span>():</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----记录日记-args----&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> arg == <span class="string">&quot;haha&quot;</span>:</span><br><span class="line">                functionName()<span class="comment"># 此处相当于调用def test()</span></span><br><span class="line">                functionName()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;---不记录---&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func_in</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@func_arg(<span class="params"><span class="string">&quot;haha&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test---&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@func_arg(<span class="params"><span class="string">&quot;nihao&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test2---&quot;</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment">#-----------结果---------------</span></span><br><span class="line">----记录日记-args----</span><br><span class="line">---test---</span><br><span class="line">---test---</span><br><span class="line">----记录日记-args----</span><br><span class="line">---不记录---</span><br></pre></td></tr></table></figure><ul><li>被装饰函数有参数传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">functionName</span>):</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---func---1---&quot;</span>)<span class="comment"># ②</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_in</span>(<span class="params">a,b</span>):</span><span class="comment"># ③</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---func_in---1---&quot;</span>)<span class="comment"># ⑧</span></span><br><span class="line">        functionName(a,b)<span class="comment"># ⑨⑪</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---func_in---2---&quot;</span>)<span class="comment"># ⑫</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---func---2---&quot;</span>)<span class="comment"># ④</span></span><br><span class="line">    <span class="keyword">return</span> func_in <span class="comment"># ⑤</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func   </span><span class="comment"># 裝飾器的效果 相当于第18行 test = func(test)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span><span class="comment"># ① ⑥</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----test- a=%d,b=%d----&quot;</span>%(a,b))<span class="comment"># ⑩</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test = func(test)</span></span><br><span class="line">test(<span class="number">11</span>,<span class="number">22</span>)<span class="comment"># ⑦ ⑬</span></span><br><span class="line"><span class="comment">#-----------结果: 在第14、19行打斷點調試運行結果---------------</span></span><br><span class="line">---func---<span class="number">1</span>---</span><br><span class="line">---func---<span class="number">2</span>---</span><br><span class="line">---func_in---<span class="number">1</span>---</span><br><span class="line">----test- a=<span class="number">11</span>,b=<span class="number">22</span>----</span><br><span class="line">---func_in---<span class="number">2</span>---</span><br></pre></td></tr></table></figure><ul><li>被装饰函数有多个参数*args和**kwargs传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">functionName</span>):</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---func---1---&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_in</span>(<span class="params">*args,**kwargs</span>):</span>      </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---func_in---1---&quot;</span>)</span><br><span class="line">        functionName(*args,**kwargs)  </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---func_in---2---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---func---2---&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> func_in </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func </span><span class="comment"># 相当于 test_1 = func(test_1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_1</span>(<span class="params">a,b,c,d</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----test- a=%d,b=%d,c=%d,d=%d----&quot;</span>%(a,b,c,d))</span><br><span class="line"></span><br><span class="line"><span class="comment">#test_1 = func(test_1)</span></span><br><span class="line">test_1(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>)<span class="comment"># *args关键位置接受11，**kwargs关键字接受22,33,44</span></span><br><span class="line"><span class="comment">#-----------结果---------------</span></span><br><span class="line">---func---<span class="number">1</span>---</span><br><span class="line">---func---<span class="number">2</span>---</span><br><span class="line">---func_in---<span class="number">1</span>---</span><br><span class="line">----test- a=<span class="number">11</span>,b=<span class="number">22</span>,c=<span class="number">33</span>,d=<span class="number">44</span>----</span><br><span class="line">---func_in---<span class="number">2</span>---</span><br></pre></td></tr></table></figure><ul><li>对带有返回值的函数装饰</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">functionName</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----func----1----&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_in</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----func_in----1---&quot;</span>)</span><br><span class="line">        xxxx = functionName()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----func_in----2----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> xxxx</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----func----2----&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> func_in </span><br><span class="line"></span><br><span class="line"><span class="meta">@func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----test----&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;AAAA&quot;</span></span><br><span class="line">ret = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test return value is %s&quot;</span>%ret)</span><br><span class="line"><span class="comment">#-----------结果---------------</span></span><br><span class="line">----func----<span class="number">1</span>----</span><br><span class="line">----func----<span class="number">2</span>----</span><br><span class="line">----func_in----<span class="number">1</span>---</span><br><span class="line">----test----</span><br><span class="line">----func_in----<span class="number">2</span>----</span><br><span class="line">test <span class="keyword">return</span> value <span class="keyword">is</span> AAAA</span><br></pre></td></tr></table></figure><ul><li>装饰的顺序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----装饰1----&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----验证通过1-----&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w2</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----装饰2----&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----验证通过2-----&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="meta">@w2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----3----&quot;</span>)</span><br><span class="line"></span><br><span class="line">f3()</span><br><span class="line"><span class="comment">#-----------结果: 函数f3 对装饰内容就近原则，执行内部函数从上而下输出---------------</span></span><br><span class="line">----装饰<span class="number">2</span>----</span><br><span class="line">----装饰<span class="number">1</span>----</span><br><span class="line">-----验证通过<span class="number">1</span>-----</span><br><span class="line">-----验证通过<span class="number">2</span>-----</span><br><span class="line">----<span class="number">3</span>----</span><br></pre></td></tr></table></figure><ul><li>多个装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeBold</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warpped</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----1-----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;b&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/b&gt;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> warpped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数: 完成数据包裹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeItalic</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warpped</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----2-----&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;i&gt;&quot;</span> + fn() + <span class="string">&quot;&lt;/i&gt;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> warpped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeItalic         </span><span class="comment"># 先调用 -a- </span></span><br><span class="line"><span class="meta">@makeBold           </span><span class="comment"># 然后 -b- </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span>():</span>        <span class="comment"># 再执行 -c-  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----3-----&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello,world-3&quot;</span> </span><br><span class="line"></span><br><span class="line">ret = test3() </span><br><span class="line"><span class="built_in">print</span>(ret) </span><br><span class="line"><span class="comment">#-----------结果: 函数返回值多层装饰输出, 先函数f3的返回值，再遵循装饰就近原则---------------</span></span><br><span class="line">-----<span class="number">2</span>-----</span><br><span class="line">-----<span class="number">1</span>-----</span><br><span class="line">-----<span class="number">3</span>-----</span><br><span class="line">&lt;i&gt;&lt;b&gt;Hello,world-<span class="number">3</span>&lt;/b&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包中外部函数返回的不是一个具体的值，而是一个函数。通常返回的函数会赋值给一个变量，后面会被继续执行调用。</p><ul><li>计算移动平均值的类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Averager</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.series = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, new_value</span>):</span></span><br><span class="line">        self.series.append(new_value)</span><br><span class="line">        total = <span class="built_in">sum</span>(self.series)</span><br><span class="line">        <span class="keyword">return</span> total/<span class="built_in">len</span>(self.series)</span><br><span class="line"><span class="comment">#--------------averager_oo.py-----------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> averager_oo <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = Averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure><ul><li>计算移动平均值的高阶函数(闭包形式)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>:</span></span><br><span class="line">    series = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = <span class="built_in">sum</span>(series)</span><br><span class="line">        <span class="keyword">return</span> total/<span class="built_in">len</span>(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager<span class="comment"># 返回值是 averager 函数</span></span><br><span class="line"><span class="comment">#--------------averager.py-----------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> averager <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_varnames<span class="comment"># __code__ 属性查看局部变量和自由变量</span></span><br><span class="line">(<span class="string">&#x27;new_value&#x27;</span>, <span class="string">&#x27;total&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">&#x27;series&#x27;</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__</span><br><span class="line">(&lt;cell at <span class="number">0x7f13cb64eee0</span>: <span class="built_in">list</span> <span class="built_in">object</span> at <span class="number">0x7f13ca9f9040</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure><h3 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h3><ul><li>@staticmethod和@classmethod</li></ul><blockquote><p>​    @staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。</p><p>​    @classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHi</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;say hello&quot;</span>)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_2</span>():</span><span class="comment"># 无参数要求</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;say hi&quot;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_3</span>(<span class="params">cls</span>):</span><span class="comment"># 第一个参数必须cls</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;say well&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    a = SayHi()</span><br><span class="line">    a.func_1()</span><br><span class="line">    SayHi.func_2() <span class="comment"># 直接类名.方法名()来调用</span></span><br><span class="line">    SayHi.func_3() <span class="comment"># 直接类名.方法名()来调用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment">#-----------结果---------------</span></span><br><span class="line">say hello</span><br><span class="line">say hi</span><br><span class="line">say well</span><br></pre></td></tr></table></figure><ul><li>@property</li></ul><blockquote><p>@property 装饰器，可以直接通过方法名来访问方法，不需要在方法名后添加一对“（）”小括号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;I&#x27;m the &#x27;x&#x27; property.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getx(): self._x=&quot;</span>, self._x)</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self._x = value</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setx()&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;del()&quot;</span>)</span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    a = C()</span><br><span class="line">    a.x = <span class="number">1</span><span class="comment"># 输出setx()</span></span><br><span class="line">    a.x<span class="comment"># 输出getx()</span></span><br><span class="line">    <span class="keyword">del</span> a.x<span class="comment"># 输出del()</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------结果-------------</span></span><br><span class="line">setx()</span><br><span class="line">getx(): self._x= <span class="number">1</span></span><br><span class="line"><span class="keyword">del</span>()</span><br></pre></td></tr></table></figure><ul><li>不使用装饰器形式的property函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;getx(): self._x=&quot;</span>, self._x)</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self._x = value</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;setx()&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;del()&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    y = <span class="built_in">property</span>(getx, setx, delx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    a = C()</span><br><span class="line">    a.y = <span class="number">1</span></span><br><span class="line">    a.y</span><br><span class="line">    <span class="keyword">del</span> a.y</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment">#-----------结果-------------</span></span><br><span class="line">setx()</span><br><span class="line">getx(): self._x= <span class="number">1</span></span><br><span class="line"><span class="keyword">del</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;装饰器&lt;/strong&gt;好比一种语法糖，实现优化语言、增强被修饰对象的行为。装饰器是可调用的对象，其参数是另一个函数(被装饰的函数)；装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象^1^。装饰器两大特性：&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>python类和对象\模块\错误和异常</title>
    <link href="https://bingeone.github.io/bione/posts/3069614490.html"/>
    <id>https://bingeone.github.io/bione/posts/3069614490.html</id>
    <published>2021-11-06T15:05:57.000Z</published>
    <updated>2021-11-06T15:07:25.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol><li><p>局部变量</p><p> 局部变量就是在函数内部定义的变量<br> 不同的函数可以有相同的变量名，不产生影响<br> 它的作用临时保存函数中使用的数据 （可以在函数内，使用global重新定义变量值，起到修改全局变量的作用）</p></li><li><p>全局变量<br> 全局变量，在函数外部定义的变量<br> 对于不可变类型的全局变量，需要使用global修改全局变量<br> 对于可变类型的全局变量，不需要global，就可以修改全局变量，例如列表，字典等</p></li><li><p>LEGB 规则<br> 在python中查找“名称“时，是按照LEGB规则查找：local–&gt;Enclosed–&gt;Global–&gt;Built in<br> local            指函数或者类的方法内部<br> Enclosed        指嵌套函数<br> Global        指模块中的全局变量<br> Built in         指python为自己保留的特殊名称</p></li><li><p>面对对象(object)—— 一种”设计者“思维，协同合作，编写大规模程序(对象之间的关系)<br> 面向过程(procedure)—— 一种”执行者“思维，不需要协作，编写小规模程序(程序的逻辑流程)</p></li><li><p>实例方法：从属于实例对象的方法    格式</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">object</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>方法名(<span class="params">self，[形参列表]</span>):</span></span><br><span class="line">函数体</span><br><span class="line">    </span><br><span class="line"><span class="comment">#方法的调用格式</span></span><br><span class="line"><span class="built_in">object</span>.方法名（[实参列表]）</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span>(<span class="built_in">object</span>)获取对象的所有的属性、方法</span><br><span class="line"><span class="built_in">object</span>. __dict__对象的属性字典</span><br><span class="line"><span class="keyword">pass</span>空语句</span><br><span class="line"><span class="built_in">isinstance</span>(对象，类型)判断<span class="string">&#x27;对象&#x27;</span>是不是<span class="string">&#x27;指定类型&#x27;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>类属性和类方法: 类方法操作（调用）类属性    </li></ol><blockquote><p>类属性从属于“类对象”的属性，也称为“类变量”，可以被所有实例对象共享</p><p>类方法从属于“类对象”的方法，类方法通过装饰器@classmethod来定义</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义的格式：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名：</span></span><br><span class="line"><span class="class">类变量名=初始值</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">classmethod</span></span></span><br><span class="line"><span class="class"><span class="title">def</span>类方法名(<span class="params">cls, [形参列表]</span>)：</span></span><br><span class="line"><span class="class">函数体</span></span><br><span class="line"><span class="class"># 在类中或者类外面，读写方式：</span></span><br><span class="line"><span class="class">类名.类变量名</span></span><br><span class="line"><span class="class"># 调用类方法</span></span><br><span class="line"><span class="class">类名.类方法名（参数列表）</span></span><br></pre></td></tr></table></figure><blockquote><p>@classmethon 必须在方法上面一行<br>第一个self必须要，指的就是“类对象”本身<br>调用类方法格式：    类名.类方法名（参数列表）<br>类方法中访问实例属性和实例方法会导致错误<br>子类继承父类方法时，传入cls是子类对象，而非父类对象</p></blockquote><p><code>静态方法:</code>python中允许定义与“类对象”无关的方法，<br>“静态方法”和模板中定义的普通函数没有区别，只不过“静态方法”放到了“类的名字空间里面”，需要通过“类调用”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义的格式：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名：</span></span><br><span class="line"><span class="class">类变量名=初始值</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">staticmethod</span></span></span><br><span class="line"><span class="class"><span class="title">def</span> 静态方法名（[形参列表]）:</span></span><br><span class="line">函数体</span><br><span class="line"><span class="comment"># 在类中或者类外面，读写方式：</span></span><br><span class="line">类名.类变量名</span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">类名.静态方法名([形参列表])</span><br></pre></td></tr></table></figure><blockquote><p>@staticmethod 必须在方法的上面一行<br>调用静态方法的格式：    类名.静态方法名([形参列表])<br>静态方法中访问实例属性和实例方法会导致错误</p></blockquote><ol start="7"><li><p>方法没有重载<br> 如果我们定义了多个重名的方法，只有最后一个有效，这就是Python中没有方法重载！</p></li><li><p><strong>私有属性和私有方法（实现封装）</strong></p><p> python 对于类成员没有严格的访问限制，与其他语言有区别，要点：<br> a. 通常我们约定,两个下滑线开头的属性是私有的(private),其他公共的(public)<br> b. 类的内部可以访问私有属性(方法)<br> c. 类的外部不能直接访问属性(方法)<br> d. 类的外部可以通过”__类名__私有属性(方法)名” 进行访问</p></li><li><p><strong>@property (属性)  get和set的方法</strong></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, salary</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__salary = salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__salary</span><br><span class="line"></span><br><span class="line"><span class="meta">    @salary.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary</span>(<span class="params">self,salary</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">1000</span>&lt; salary &lt;<span class="number">50000</span>:</span><br><span class="line">            self.__salary=salary</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入有误，工资范围在1000~50000之间&quot;</span>)</span><br><span class="line">        </span><br><span class="line">empl = Employee(<span class="string">&#x27;高崎&#x27;</span>, <span class="number">20000</span>)</span><br><span class="line"><span class="built_in">print</span>(empl.salary)</span><br><span class="line">empl.salary = <span class="number">30000</span></span><br><span class="line"><span class="built_in">print</span>(empl.salary)</span><br></pre></td></tr></table></figure><ol start="10"><li><p><strong>面向对象的三大特征 ：封装、继承、多态</strong></p><p><strong>封装</strong>：隐藏对象的属性和实现的细节，只对外提供必要的方法<br><strong>继承</strong>：继承可以让子类继承父类的特性，提高代码的重用性<br><strong>多态</strong>：同一个方法调用由于对象不同产生不同的行为</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承语法格式：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类(<span class="params">父类<span class="number">1</span>[父类<span class="number">2</span>，父类<span class="number">3.</span>..]</span>)</span></span><br><span class="line"><span class="class">类体</span></span><br></pre></td></tr></table></figure><ol start="11"><li>object根类_dir()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C.mro())</span><br><span class="line">[&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">C</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">B</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">__main__</span>.<span class="title">A</span>&#x27;&gt;, &lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;]</span></span><br></pre></td></tr></table></figure><blockquote><p>通过类的方法mro()或者类的属性 _mro_ 可以输出这个类的继承层次结构。</p><p>object类是所有的类的父类，因此所有的类都有object的属性和方法</p></blockquote><ol start="12"><li><p>重写_<em>str</em>_()方法</p><p>这里的重写要return返回，不能打印会报错！</p></li><li><p>多重继承<br>python中支持多重继承，一个子类可以有多个‘直接父类’<br>如果父类中有相同的名字的方法，在子类没有指定父类名时，解释器将‘从左向右’按顺序搜索 即MOR() 方法解释顺序</p></li><li><p>super() .调用父类的方法</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>, self)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># A.say(self)# 调用A的方法</span></span><br><span class="line">    <span class="built_in">super</span>().say()<span class="comment"># 调用A的方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>, self)</span><br><span class="line">B().say()</span><br></pre></td></tr></table></figure><ol start="15"><li><p><strong>多态</strong>: 指同一个方法调用由于对象不同可能会产生不同的行为。<br>注意：<br>多态是方法的多态，属性没有多态。<br>多态存在有两个必要的条件：继承、方法重写</p></li><li><p>特殊方法和运算符重载</p></li><li><p>特殊属性</p><p>特殊方法——-含义<br>obj.__dict__    对象的属性字典<br>obj.__class__    对象所属的类<br>class.__bases__    类的基类元组（多继承）<br>class.__base__    类的基类<br>class.__mro__    类层次结构<br>class.__subclasses__()    子类列表</p></li><li><p><strong>对象的浅拷贝和深拷贝</strong></p><p>浅拷贝    拷贝时对象包含子对象内容不拷贝<br>深拷贝    递归拷贝对象中包含的子对象，内容</p></li><li><p>return 作用特点<br>负责函数返回值<br>退出当前函数，导致return下方的所有代码（函数内部）不执行</p></li><li><p><strong>设计模式</strong>—工厂模式和单例模式（Singleton Pattern）（常用）    GOF(goup of four)23种设计模式<br>工厂模式：实现了创建者和调用者的分离，使用专门的工厂类将选择实现类、创建对象进行统一的管理和控制。<br>单例模式：核心作用是确保一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p></li></ol><h2 id="python-模块"><a href="#python-模块" class="headerlink" title="python 模块"></a>python 模块</h2><ol><li><p><strong>模块</strong>: 只要以.py为后缀的文件，都可以称为模块<br> 包含的东西：变量    函数    class面向对象（类–对象）    可执行代码<br> 优势: 管理方便，易于维护，降低复杂度</p></li><li><p><strong>模块的使用方法</strong><br> 自定义模块<br> 导入模块：</p><p> ​        import 模块名1，模块名2…<br> 导入模块之后怎么使用：<br> ​        模块名.变量<br> ​        模块名.函数名（参数）<br> ​        模块名.类</p><p> 导入模块中的相关的数据</p><pre><code>     from 模块  import  变量, 函数,类     (导入之后,可以直接使用)</code></pre></li><li><p>自定义模块的定义和使用</p><p> 导入自定义模块<br> 问题：在导入模块的时候，模块中的代码也会被执行一次<br> 解决：在自定义模块中，新增控制代码：</p><pre><code>     if \_\_name\_\_==&#39;\__main\_\_&#39;:      (# 此处 \_\_name__ 指引到该文件的 路径+名字)         测试代码</code></pre><p> from 模块 import 方法（函数）（* 代表全部功能）<br> 然后直接使用该方法<br> 注意：在导入全部功能时，如果module中有全局变量，即 __all__ = [],则会功能会失效，需要在在module中改成_<em>all</em>_ = [‘方法1’，’方法2’。。。]</p></li><li><p>packeage（包）的使用</p><p> 包的概念：可以理解为文件夹，在这个文件夹中含有以_<em>init</em>_.py文件<br> 包的作用：</p><p> ​        a. 将模块归类，便于管理</p><p> ​        b. 防止模块名冲突</p><p> 模块中的包，会产生一个新的名字：包名.模块名<br> 例如：</p><pre><code> Mymath package1.Mymath</code></pre><p> 导入方式：</p><p> 方式a：</p><p> ​    from Mymath import *</p><p> result = add(10,12)</p><p> 方式b：</p><p> ​    from package1.Mymath import *</p><p> result = add(10,12)</p></li><li><p><strong>自定义模块跨项目使用</strong></p></li></ol><blockquote><p>模块的发布</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a.为什么发布</span><br><span class="line">    自定义模块，切换项目之后，不好使用</span><br><span class="line">    系统模块，切换到新的项目中，可以用</span><br><span class="line">原因：</span><br><span class="line">b.sys.path</span><br><span class="line">    导入模块时，搜索路径列表</span><br><span class="line">    如果所有的路径中都没有导入的模块，会报错无法使用该模块</span><br><span class="line"></span><br><span class="line">模块引入问题</span><br><span class="line"> <span class="number">1</span>、哪些模块可以引用</span><br><span class="line">    sys.path</span><br><span class="line">        存放列表，存储一系列目录</span><br><span class="line"> <span class="number">2</span>、被引入模块之后，更新问题</span><br><span class="line">    模块重载：</span><br><span class="line">            <span class="keyword">from</span> imp <span class="keyword">import</span> reload</span><br><span class="line">            reload(目标重载)</span><br><span class="line">            重新调用函数</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">    a. 将模块所在路径，手动加入到sys.path中   <span class="comment"># 此处显示报错，原因是在默认的路径中找不到对应的模块，而只有在调用运行时才使用自定义的模块，运行不会报错（手动添加模块的弊端）</span></span><br><span class="line">    b. 将自定义模块，发布到系统目录           <span class="comment"># 发布自定义模块并安装，对所有项目都可用</span></span><br><span class="line">        发布自定义模块的步骤：</span><br><span class="line">            <span class="number">1.</span>确定发布的模块（目录结构）</span><br><span class="line">                |-- setup.py</span><br><span class="line">                |-- package1</span><br><span class="line">                    |</span><br><span class="line">                    --自定义模块 Mymath</span><br><span class="line"></span><br><span class="line">            <span class="number">2.</span>setup的编辑工作</span><br><span class="line">                setup()</span><br><span class="line">                    <span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line">                    setup(name=<span class="string">&#x27;自定义压缩包&#x27;</span>,version=<span class="string">&#x27;1.0&#x27;</span>,description=<span class="string">&#x27;四则运算&#x27;</span>,author=<span class="string">&#x27;wjb&#x27;</span>,py_modules=[<span class="string">&#x27;package1.Mymath&#x27;</span>,<span class="string">&#x27;package1.模块&#x27;</span>,])</span><br><span class="line"></span><br><span class="line">            <span class="number">3.</span>构建模块</span><br><span class="line">                python setup.py build<span class="comment"># 在命令行中，切换到setup.py 文件目录下，运行该命令，会生成build文件</span></span><br><span class="line">            <span class="number">4.</span>发布模块</span><br><span class="line">                python setup.py sdist<span class="comment"># 在命令行中，切换到setup.py 文件目录下，运行该命令，会生成dist文件，里面含有安装文件包</span></span><br></pre></td></tr></table></figure><p>​        </p><blockquote><p>模块的安装</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过命令形式安装（推荐），更安全</span><br><span class="line">a.找到之前发布的压缩包，解压操作<span class="comment"># 在dist文件中，正常解压 .tar.gz压缩包（此为先前发布产生的压缩包）</span></span><br><span class="line">b.python setup.py install<span class="comment"># 在命令行中切换到解压的文件目录下，运行该命令</span></span><br><span class="line">暴力安装</span><br><span class="line">直接将安装的包，以及模块，复制到对应的系统目录中</span><br></pre></td></tr></table></figure><h2 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h2><ol><li>语法错误</li></ol><blockquote><p>SyntaxError: invalid syntax</p><p>解析器会复现出现句法错误的代码行，并用小“箭头”指向行里检测到的第一个错误</p></blockquote><ol start="2"><li>执行时检测到的错误称为 <em><strong>异常</strong></em>，异常不一定导致严重的后果</li></ol><blockquote><p>python内置异常常见，详细内置异常类型及含义可查阅<a href="https://docs.python.org/zh-cn/3/index.html">官网</a></p></blockquote><table><thead><tr><th>异常名称</th><th>含义</th></tr></thead><tbody><tr><td>BaseException</td><td>所有异常基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>Exception</td><td>常规错误基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零(所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>NameError</td><td>未声明/初始化对象</td></tr><tr><td>SyntaxError</td><td>语法错误</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>Waring</td><td>警告的基类</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法警告</td></tr></tbody></table><ol start="3"><li>异常的处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter a number: &quot;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Oops!  That was no valid number.  Try again...&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>try</strong>语句的工作流程：</p><ul><li>首先，执行try语句部分内容</li><li>假如没有触发异常，则会跳过except子句，执行完成try语句</li><li>如果在执行 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#try"><code>try</code></a> 子句时发生了异常，则跳过该子句中剩下的部分。 如果异常的类型与 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#except"><code>except</code></a> 关键字后指定的异常相匹配，则会执行 <em>except 子句</em>，然后跳到 try/except 代码块之后继续执行。</li><li>如果发生的异常与 <em>except 子句</em> 中指定的异常不匹配，则它会被传递到外部的 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#try"><code>try</code></a> 语句中；如果没有找到处理程序，则它是一个 <em>未处理异常</em> 且执行将终止并输出如上所示的消息。</li></ul><p><strong>except</strong>子句：可以用带圆括号的元组来指定多个异常</p><ul><li>如果发生的异常与 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#except"><code>except</code></a> 子句中的类是同一个类或是它的基类时，则该类与该异常相兼容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">C</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> [B, C, D]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> cls()</span><br><span class="line">    <span class="keyword">except</span> D:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> C:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> B:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">D</span><br></pre></td></tr></table></figure><blockquote><p>请注意如果颠倒 <em>except 子句</em> 的顺序（把 <code>except B</code> 放在最前），则会输出 B, B, B — 即触发了第一个匹配的 <em>except 子句</em>。</p></blockquote><p><a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#try"><code>try</code></a> … <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#except"><code>except</code></a> 语句具有可选的 <em>else 子句</em>，该子句如果存在，它必须放在所有 <em>except 子句</em> 之后。 它适用于 <em>try 子句</em> 没有引发异常但又必须要执行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>except 子句可以在异常名称后面指定一个变量。 这个变量会绑定到一个异常实例并将参数存储在 <code>instance.args</code> 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> inst:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(inst))    <span class="comment"># 打印变量类型</span></span><br><span class="line">    <span class="built_in">print</span>(inst.args)     <span class="comment"># 绑定变量</span></span><br><span class="line">    <span class="built_in">print</span>(inst)          <span class="comment"># 直接打印变量字符串</span></span><br><span class="line">                         </span><br><span class="line">    x, y = inst.args     <span class="comment"># 解包变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x =&#x27;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y =&#x27;</span>, y)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">Exception</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">(<span class="params"><span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span></span>)</span></span><br><span class="line"><span class="class">(<span class="params"><span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">x</span> = <span class="title">spam</span></span></span><br><span class="line"><span class="class"><span class="title">y</span> = <span class="title">eggs</span></span></span><br></pre></td></tr></table></figure><p>异常处理程序不仅会处理在 try 子句中发生的异常，还会处理在 try 子句 中调用（包括间接调用）的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    this_fails()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;Handling run-time error:&#x27;</span>, err)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Handling run-time error: division by zero</span><br></pre></td></tr></table></figure><ol start="4"><li>触发异常</li></ol><blockquote><p><code>raise</code> 语句支持强制触发指定的异常,唯一参数必须是异常实例或异常类（派生自 <code>Exception</code> 类）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> NameError(<span class="string">&#x27;Hiname&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> NameError:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;An exception flew by!&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">An exception flew by!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: Hiname</span><br></pre></td></tr></table></figure><ol start="5"><li>异常连</li></ol><blockquote><p><code>raise</code>语句支持可选的 <code>from</code> 子句，该子句用于启用链式异常</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ConnectionError</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    func()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Failed to open database&#x27;</span>) <span class="keyword">from</span> exc</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> func</span><br><span class="line">ConnectionError</span><br><span class="line"><span class="comment"># 上述异常是以下异常的直接原因</span></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">RuntimeError: Failed to <span class="built_in">open</span> database</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>用户自定义异常</li></ol><blockquote><p>异常类通常只提供让处理异常的程序提取错误信息的一些属性。创建能触发多个不同错误的模块时，一般只为该模块定义异常基类，然后再根据不同的错误条件，创建指定异常类的子类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Base class for exceptions in this module.&quot;&quot;&quot;</span> <span class="comment"># 异常基类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span>(<span class="params">Error</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Exception raised for errors in the input.# 异常类的子类，有输入错误引发的异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        expression -- input expression in which the error occurred</span></span><br><span class="line"><span class="string">        message -- explanation of the error</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, expression, message</span>):</span></span><br><span class="line">        self.expression = expression</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransitionError</span>(<span class="params">Error</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raised when an operation attempts a state transition that&#x27;s not</span></span><br><span class="line"><span class="string">    allowed.# 当操作尝试状态转换时不允许引发异常。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        previous -- state at beginning of transition</span></span><br><span class="line"><span class="string">        next -- attempted new state</span></span><br><span class="line"><span class="string">        message -- explanation of why the specific transition is not allowed</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, previous, <span class="built_in">next</span>, message</span>):</span></span><br><span class="line">        self.previous = previous</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        self.message = message</span><br></pre></td></tr></table></figure><ol start="7"><li>定义清理操作</li></ol><blockquote><p><code>try</code>—<code>finally</code> 特点：</p></blockquote><ul><li>如果执行 <code>try</code> 子句期间触发了某个异常，则某个 <code>except</code> 子句应处理该异常。如果该异常没有 <code>except</code> 子句处理，在 <code>finally</code> 子句执行后会被重新触发</li><li><code>except</code> 或 <code>else</code> 子句执行期间也会触发异常。 同样，该异常会在 <code>finally</code> 子句执行之后被重新触发</li><li>如果 <code>finally</code> 子句中包含 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#break"><code>break</code></a>、<a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#continue"><code>continue</code></a> 或 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#return"><code>return</code></a> 等语句，异常将不会被重新引发</li><li>如果执行 <code>try</code> 语句时遇到 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#break"><code>break</code></a>,、<a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#continue"><code>continue</code></a> 或 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#return"><code>return</code></a> 语句，则 <code>finally</code> 子句在执行 <code>break</code>、<code>continue</code> 或 <code>return</code> 语句之前执行</li><li>如果 <code>finally</code> 子句中包含 <code>return</code> 语句，则返回值来自 <code>finally</code> 子句的某个 <code>return</code> 语句的返回值，而不是来自 <code>try</code> 子句的 <code>return</code> 语句的返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">x,y</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        result = x/y</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&quot;division by zero!&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&quot;result is&quot;</span>, result)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&quot;executing finally clause&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">result <span class="keyword">is</span> <span class="number">2.0</span></span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">division by zero!</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divide(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">executing <span class="keyword">finally</span> clause</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> divide</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> /: <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>任何情况下都会执行 <code>finally</code>子句。<code>except</code> 子句不处理两个字符串相除触发的 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError"><code>TypeError</code></a>，因此会在 <code>finally</code> 子句执行后被重新触发。</p></blockquote><ol start="8"><li>预定义的清理操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这个代码的问题在于，执行完代码后，文件在一段不确定的时间内处于打开状态。在简单脚本中这没有问题，但对于较大的应用程序来说可能会出问题。<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#with"><code>with</code></a> 语句支持以及时、正确的清理的方式使用文件对象：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>语句执行完毕后，即使在处理行时遇到问题，都会关闭文件 <em>f</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对象&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;局部变量&lt;/p&gt;
&lt;p&gt; 局部变量就是在函数内部定义的变量&lt;br&gt; 不同的函数可以有相同的变量名，不产生影</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql关系数据库知识点精简版</title>
    <link href="https://bingeone.github.io/bione/posts/22842.html"/>
    <id>https://bingeone.github.io/bione/posts/22842.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-11-06T15:12:33.561Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 是最流行的关系型数据库管理系统，web应用开发常用的数据库之一，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。</p><h3 id="mysql数据库特点"><a href="#mysql数据库特点" class="headerlink" title="mysql数据库特点"></a>mysql数据库特点</h3><ul><li>是开源的，目前隶属于 Oracle 旗下产品。</li><li>支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>使用标准的 SQL 数据语言形式。</li><li>可以运行于多个系统上，并且支持多种语言。</li><li>对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。</li><li>支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li> 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>创建并使用数据库</li></ul><blockquote><p>create datebase ‘mydatebase’;</p><p>use ‘mydatebase’;</p></blockquote><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">create table `students`(</span><br><span class="line">`id` int not null auto_increment primary key,</span><br><span class="line"> `name` varchar(200) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 定义联合主键</span><br><span class="line">CREATE TABLE tb_enp4</span><br><span class="line">(</span><br><span class="line">    name  varchar(25),</span><br><span class="line">    deptld  int(11),</span><br><span class="line">    salary  float,</span><br><span class="line">    PRIMARY KEY(name,deptld)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 较完整形式</span><br><span class="line">create table students(</span><br><span class="line">id int unsigned not null auto_increment primary key,</span><br><span class="line">name varchar(30),</span><br><span class="line">age tinyint unsigned default 0,</span><br><span class="line">high decimal(5,2),</span><br><span class="line">gender enum(&quot;男&quot;,&quot;女&quot;),</span><br><span class="line">cls_id int unsigned</span><br><span class="line">);</span><br><span class="line">sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVSION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>数值类型</li></ul><blockquote><p>值数据类型(integer、smallint、decimal 和 numeric)，以及近似数值数据类型(float、real 和 double precision)</p></blockquote><ul><li>日期和时间类型</li></ul><blockquote><p>表示时间值的日期和时间类型为datetime(YYYY-MM-DD HH:MM:SS)、date(YYYY-MM-DD)、timestamp(YYYYMMDD HHMMSS)、time(HH:MM:SS)和year(YYYY)。</p></blockquote><ul><li>字符串类型</li></ul><br><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>char</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255 bytes</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>tinytext</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><br><blockquote><p>常见类型</p><p>int    char    varchar    datetime</p></blockquote><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全部插入（先查看desc students, 表的数据结构）</span><br><span class="line">insert into students values (0,&#x27;小乔&#x27;,18,160.00,02);</span><br><span class="line"></span><br><span class="line"># 部分插入或全部</span><br><span class="line">INSERT INTO `students` (`NAME`,`NICKNAME`,`SEX`) VALUES(&#x27;小张&#x27;,&#x27;张哥&#x27;,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><ul><li>普通查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 字段查询</span><br><span class="line">SELECT name,nickname FROM students;</span><br><span class="line"></span><br><span class="line"># id 倒叙查询</span><br><span class="line">SELECT id,name,nickname FROM students WHERE sex=&#x27;男&#x27; ORDER BY id DESC;</span><br><span class="line"></span><br><span class="line"># 按数据条数跳转查询: (0,2)表示从0开始2为步数跳转</span><br><span class="line">SELECT id,name,nickname FROM students WHERE sex=&#x27;男&#x27; ORDER BY id DESC LIMIT 0,2;</span><br><span class="line"></span><br><span class="line"># 查看表的结构，名字，字段和字段属性</span><br><span class="line">desc students(表名);</span><br><span class="line"></span><br><span class="line"># 查看表内容</span><br><span class="line">select * from students;</span><br><span class="line"></span><br><span class="line"># 查看表的完整属性</span><br><span class="line">show create table studebts</span><br><span class="line"></span><br><span class="line"># 查询字段</span><br><span class="line">select * from students where id&gt;3;/* 满足条件的所有字段 */</span><br><span class="line">select name,gender from students;/* 指定的字段 */</span><br><span class="line"></span><br><span class="line"># 查看运行时间</span><br><span class="line">show profiles;</span><br></pre></td></tr></table></figure><ul><li>多条件+逻辑符号查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"># and 同时满足条件</span><br><span class="line">select */字段名(表示所有字段) from 表名 where age&gt;18(条件)and age&lt;30;</span><br><span class="line"> </span><br><span class="line">#or 满足一种条件</span><br><span class="line">select */字段名(表示所有字段) from 表名 where age&gt;18(条件)or gender=2;</span><br><span class="line"> </span><br><span class="line"># not </span><br><span class="line">select */字段名(表示所有字段) from 表名 not(where age&gt;18(条件)or gender=2);同时否定两个条件</span><br><span class="line">select */字段名(表示所有字段) from 表名 notwhere age&gt;18(条件)or gender=2;否定not</span><br><span class="line">后面的条件。</span><br><span class="line"> </span><br><span class="line"># like 模糊查询</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;%小%&quot;；能查询名字中包含小的。</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;小%&quot; %代表字符或没有，能查询名字以小开头的。</span><br><span class="line"> </span><br><span class="line"># 查询名字是两个字</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;__&quot;(两个下划线);</span><br><span class="line">查询名字至少是两个字</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;__%&quot;;</span><br><span class="line"> </span><br><span class="line"># rlike后面接正则表达式</span><br><span class="line"># 查询以周开始的姓名</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name rlike &quot;^周.*&quot;;</span><br><span class="line"># 查询以周开始以伦结束的姓名</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name rlike &quot;^周.*伦s&quot;;</span><br><span class="line"> </span><br><span class="line"># in 查询年龄为12,18,30的</span><br><span class="line">select */字段名(表示所有字段) from 表名 not where age = 18 or age=22 or age=30;</span><br><span class="line">select */字段名(表示所有字段) from 表名 not where age in (18,22,30);</span><br><span class="line"></span><br><span class="line"># not in 查询年龄不是12,18,30的</span><br><span class="line">select */字段名(表示所有字段) from 表名 not where age not in (18,22,30);</span><br><span class="line"></span><br><span class="line"># 查询范围之内；</span><br><span class="line"># between...and..</span><br><span class="line">select */字段名(表示所有字段) from 表名  where age between 18 and 35;</span><br><span class="line"># 不在范围内</span><br><span class="line">select */字段名(表示所有字段) from 表名  where age not between 18 and 35;</span><br><span class="line">select */字段名(表示所有字段) from 表名  where not age not between 18 and 35;</span><br><span class="line"> </span><br><span class="line"># 空值判断</span><br><span class="line">select */字段名(表示所有字段) from 表名  where 字段名 is null;</span><br><span class="line"># 不空</span><br><span class="line">select */字段名(表示所有字段) from 表名  where 字段名 is not null;</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line"># 按照年龄18到35的男性排序,默认从小到大</span><br><span class="line">select */字段名(表示所有字段) from 表名  where （age between 18 and 35）and gender=1 order by age;</span><br><span class="line">select */字段名(表示所有字段) from 表名  where （age between 18 and 35）and gender=1 order by age asc;</span><br><span class="line"># 从大到小,支持按照多字段排序。</span><br><span class="line">select */字段名(表示所有字段) from 表名  where （age between 18 and 35）and gender=1 order by age dasc，id dasc;/*先age后id*/</span><br><span class="line"> </span><br><span class="line"># 聚合函数</span><br><span class="line"># count总数</span><br><span class="line">select count(*) as 男性人数（显示注解）from students where gender=1(条件);</span><br><span class="line"># 最大值max,最小值min，求和sum，求平均值avg</span><br><span class="line">select max/min/(age) from students;</span><br><span class="line"># 在students里女性的最大身高</span><br><span class="line">select max/sum(height) from students where gender=2;</span><br><span class="line"># 求平均值</span><br><span class="line">select sum(height)/count(*) from students where gender=2</span><br><span class="line"> </span><br><span class="line"># 保留几位小数round,还有四舍五入的作用</span><br><span class="line">select round(sum(height)/count(*),2(两位小数)) from students where gender=2;</span><br><span class="line"> </span><br><span class="line"># 分组</span><br><span class="line"># group by</span><br><span class="line">select gender(分组后的同一属性) from students group by gender;</span><br><span class="line">select gender，group_concat(name) from students group by gender; /* 可以显示分组后每一组里人的姓名 */</span><br><span class="line"></span><br><span class="line"># 分组后每一组的人数,count（*）是对分组后的数据进行聚合</span><br><span class="line">select gender，count(*) from students group by gender;</span><br><span class="line">select gender，max(age) from students group by gender;每组的最大年龄</span><br><span class="line">select gender，avg(age) from students group by gender;</span><br><span class="line"># 分组后男性的人数</span><br><span class="line">select gender，count(*) from students where gender=1 group by gender;</span><br><span class="line"></span><br><span class="line"># 分组后的跟多操作</span><br><span class="line"># 分组后查询男性的名字，id和年龄，中间添加空格。</span><br><span class="line">select gender，group_concat(name,&#x27; &#x27;,id,&#x27; &#x27;,gae) from students where gender=1 group by gender;</span><br><span class="line"> </span><br><span class="line"># having对结果的判断，where对原始数据的判断所以写的位置不同。</span><br><span class="line">select gender，group_concat(name），avg(age) from students where gender=1 group by gender having avg(age)&gt;30;</span><br><span class="line">select gender，group_concat(name） from students where group by gender having avg(age)&gt;30</span><br><span class="line"> </span><br><span class="line"># 分页</span><br><span class="line">select * from students where 条件 limit 2;只显示两行；</span><br><span class="line">select * from students where 条件 limit 5（开始位置，根据列表，这是第六个），2（两行）;</span><br><span class="line"># 分页显示公式</span><br><span class="line">select * from students where 条件 limit （第m页-1）*n，n;不能直接输入.</span><br><span class="line">                           </span><br><span class="line"># 连接查询 </span><br><span class="line"># inner join ...on on取交集，两个表的匹配列的交集</span><br><span class="line">select *(表示显示所有字段) from students inner join calsses on students.cla_id=classes.id; /* 通过students表里的cla_id和classes表里的id字段匹配连接 */</span><br><span class="line">select s.name,c.name from students as s inner join calsses as c on s.cla_id=c.id; /* 只显示students表里的姓名和classes表里的班级。*/</span><br><span class="line">                           </span><br><span class="line"># 例班级名字在前，学生所有信息在后，按班级排列后，按照id排列</span><br><span class="line">select c.name，s.* from students as s inner join calsses as c on s.cla_id=c.id order by c.name,s.id;</span><br><span class="line">                          </span><br><span class="line"># 左连接 left join on 两个表匹配以后把左边表的信息全部显示，右边表对不上的为空</span><br><span class="line">select c.name，s.* from students as s left join calsses as c on s.cla_id=c.id order by c.name,s.id;</span><br><span class="line">                           </span><br><span class="line"># 上边的语句可以当做新的表来查询</span><br><span class="line">select c.name，s.* from students as s left join calsses as c on s.cla_id=c.id order by c.name,s.id having c.id si null; /*查询两个表内无法匹配的内容。*/</span><br><span class="line">                           </span><br><span class="line"># 自关联 同一个表里的不同列有关联，例如省市县</span><br><span class="line">select *(显示内容) from m（表1）as n inne join m（表1） as s（第二个名字，一个表就可以相当于两个表用。） on n.列=s.列 having（条件） n.列=??;</span><br><span class="line"></span><br><span class="line"># 把一个sql语句当做另一个sql语句的条件</span><br><span class="line">select * from students where height=(select max(height);</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 按特定条件修改字段内容</span><br><span class="line">UPDATE students SET sex=&#x27;女&#x27; WHERE id&lt;=2;</span><br><span class="line"></span><br><span class="line"># 添加字段</span><br><span class="line">alter table students(表名) add 字段名 数据类型;</span><br><span class="line"></span><br><span class="line"># 修改字段的数据类型</span><br><span class="line">alter table students modify 字段名 数据类型;</span><br><span class="line"></span><br><span class="line"># 修改字段的名称</span><br><span class="line">alter table students change 字段名 新名字 数据类型;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 按条件删除数据</span><br><span class="line">delete from students where name=**; </span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line">alter table students dorp 字段名;</span><br><span class="line"></span><br><span class="line"># 删除表格</span><br><span class="line">dorp table students(表名)</span><br><span class="line"></span><br><span class="line"># 删除视图</span><br><span class="line">dorp view 视图名称</span><br><span class="line"></span><br><span class="line"># 逻辑删除</span><br><span class="line"># 逻辑删除增加新行进行删除标记</span><br><span class="line">alter table students add is_delete bit default 0;</span><br><span class="line">update students set is_delete = 1 where id=**;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 建立视图 用以方便查询</span><br><span class="line">create view 视图名称 as select 语句</span><br><span class="line"> </span><br><span class="line"># 查看视图</span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"># 使用视图</span><br><span class="line">select * from 视图名称</span><br><span class="line"></span><br><span class="line"># 删除视图</span><br><span class="line">dorp view 视图名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysql详细使用参见该<a href="https://www.runoob.com/mysql/mysql-data-types.html">教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MySQL 是最流行的关系型数据库管理系统，web应用开发常用的数据库之一，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。&lt;/p&gt;
&lt;h3 id=&quot;mysql数据库特点&quot;&gt;&lt;a href=&quot;#mysql数据库特点&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="数据库" scheme="https://bingeone.github.io/bione/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mysql" scheme="https://bingeone.github.io/bione/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python虚拟环境的搭建方式</title>
    <link href="https://bingeone.github.io/bione/posts/55879.html"/>
    <id>https://bingeone.github.io/bione/posts/55879.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-25T10:44:52.943Z</updated>
    
    <content type="html"><![CDATA[<p>在Python搭建项目常常会在一个封闭而独立的虚拟环境中操作，以便于后续项目的打包迁移到服务器等其它设备中加载运行。当前Python虚拟环境搭建常用工具有<strong>virtualenv</strong>/ <strong>venv</strong>/<strong>pipenv</strong>。</p><blockquote><p>virtualenv和venv使用方式相似，依赖模块环境在requirements.txt，需要手动更新内容</p><p>pipenv搭建环境会生成Pipfile和Pipfile.lock 两个特殊文件，项目所有模块环境包信息都会自动实时更新，项目迁移只需要将项目源码和这两个文件，在新的环境中（pipenv install –dev）一键安装其中的依赖包</p></blockquote><h3 id="virtualenv或venv"><a href="#virtualenv或venv" class="headerlink" title="virtualenv或venv"></a>virtualenv或venv</h3><blockquote><p>演示在Linux（ubuntu 20.04)环境下virtualenv和venv安装</p></blockquote><ul><li>安装virtualenv或venv模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line">pip3 install virtualenv<span class="comment"># 可以使用对python版本的pip进行安装 如</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># venv [linux(Ubuntu)]</span></span><br><span class="line">sudo apt install python3.9-venv<span class="comment"># 此处python最好指定搭建项目使用python的版本来安装</span></span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="comment">#在python3.3版本以后，venv作为标准模块配套在python环境中，无需单独安装</span></span><br></pre></td></tr></table></figure><ul><li>创建项目文件夹,并进入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir my_project</span><br><span class="line"><span class="built_in">cd</span> my_project</span><br></pre></td></tr></table></figure><ul><li>创建python虚拟环境文件夹为：my_env</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line">virtualenv --no-site-packages my_env</span><br><span class="line"></span><br><span class="line"><span class="comment"># venv</span></span><br><span class="line">python3 -m venv my_env</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">py -3 -m venv my_env</span><br></pre></td></tr></table></figure><blockquote><p>–no-site-packages参数说明：忽略配置系统中python环境所有第三方包，创建初始化pyhton环境</p><p>文件my_env：包含独立于系统外的pyhton文件</p></blockquote><ul><li>激活虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line"><span class="comment"># venv</span></span><br><span class="line"><span class="built_in">source</span> my_env/bin/activate<span class="comment"># 两者命令相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows</span></span><br><span class="line">my_env\Scripts\activate.bat<span class="comment"># windows 命令使用反斜杠\</span></span><br></pre></td></tr></table></figure><blockquote><p>激活后，命令行前缀会加上“(my_env)”虚拟环境文件夹名，与pipenv有点不同，后者添加当前文件夹名</p></blockquote><ul><li>安装第三方包及运行文件方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模块环境</span></span><br><span class="line">pip install requests<span class="comment"># 跟正常系统中安装方式一样，只不过安装包配置在当前虚拟环境中</span></span><br><span class="line"><span class="comment"># 运行文件</span></span><br><span class="line">python demo_01.py</span><br></pre></td></tr></table></figure><blockquote><p>pip常用命令：</p><p>(前面加上 python -m 指定特定python版本)</p><p>python -m pip install 包名 -i 代理url</p><p>python -m pip uninstall 包名</p><p>pip show 包名                                        将显示有关特定包的信息</p><p>pip list                                                     将显示虚拟环境中安装的所有软件包</p><p>pip freeze &gt; requirements.txt        将生成一个类似的已安装包列表，txt格式文件</p><p>python -m pip install -r requirements.txt    安装所有必需的包</p></blockquote><ul><li>退出虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/tutorial/venv.html">详细教程参考官网</a></p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><blockquote><p>将 pip 和 virtualenv 功能结合，更加符合项目迁移快速部署的pipenv，是当下主流推荐使用搭建pyhton虚拟环境的不二选择。</p></blockquote><ul><li>安装pipenv（前提安装pip ）</li></ul><p>sudo apt install python3-pip    安装pip，若安装忽略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install pipenv<span class="comment"># 正常安装</span></span><br><span class="line"></span><br><span class="line">sudo pip install --user pipenv<span class="comment"># --user可以单独给当前用户安装，但需要额外配置环境</span></span><br><span class="line"></span><br><span class="line">sudo -H pip install -U pipenv<span class="comment"># 全局安装 pipenv</span></span><br></pre></td></tr></table></figure><ul><li>查看安装环境配置是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ pipenv --version<span class="comment"># 显示版本号成功配置</span></span><br><span class="line">pipenv, version 2021.5.29</span><br></pre></td></tr></table></figure><p>若安装配置环境失败，<a href="https://blog.csdn.net/ksws0292756/article/details/79121558">可以参考此博文详细说明</a></p><ul><li>创建项目文件，并进入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir my_project</span><br><span class="line"><span class="built_in">cd</span> my_project</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install  <span class="comment"># 会生成Pipfile 和 Pipfile.lock 两个项目依赖环境包</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/13/VCmvUnbdKsFMihB.png"></p><ul><li>下载第三方包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install pillow <span class="comment"># 模块pillow</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/13/DqXHLEx2N4negv8.png"></p><ul><li>生成Pipfile 和 Pipfile.lock项目文件</li></ul><blockquote><p>Pipfile:    列出了 pillow包的信息和 Python 版本信息</p><p>Pipfile.lock ： 保存了pillow包的哈希值</p><p>注：迁移项目时，在这两个文件所在文件中，执行pipenv install，即可安装开发所需的第三包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pipfile文件</span></span><br><span class="line">[[<span class="built_in">source</span>]]</span><br><span class="line"><span class="comment"># pipenv 下载第三方包地址，可以更换成国内pip镜像源，如阿里等</span></span><br><span class="line">url = <span class="string">&quot;https://mirrors.aliyun.com/pypi/simple/&quot;</span></span><br><span class="line">verify_ssl = <span class="literal">true</span></span><br><span class="line">name = <span class="string">&quot;pypi&quot;</span></span><br><span class="line"></span><br><span class="line">[packages]<span class="comment"># 第三方包信息</span></span><br><span class="line">pillow = <span class="string">&quot;*&quot;</span><span class="comment"># 表示最新版本</span></span><br><span class="line"></span><br><span class="line">[dev-packages]<span class="comment"># pipenv install pillow --dev这种方式安装包会在此处显示</span></span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">&quot;3.9&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pipfile.lock文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hash&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;sha256&quot;</span>: <span class="string">&quot;50541ebd1e358e19fd1abf7ff833c7dbd5e3484685f8b85c606d51ffe7892041&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;pipfile-spec&quot;</span>: 6,</span><br><span class="line">        <span class="string">&quot;requires&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;python_version&quot;</span>: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;sources&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;pypi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://mirrors.aliyun.com/pypi/simple/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;verify_ssl&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;pillow&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hashes&quot;</span>: [  <span class="string">&quot;sha256:0412516dcc9de9b0a1e0ae25a280015809de8270f134cc2c1e32c4eeb397cf30&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;index&quot;</span>: <span class="string">&quot;pypi&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;==8.3.2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;develop&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pipenv常用命令</li></ul><blockquote><p>直接在命令行中输入 pipenv 可查看它的子命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建指定python版本的虚拟环境</span></span><br><span class="line">pipenv --python 3.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活项目虚拟环境</span></span><br><span class="line">pipenv shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line"><span class="built_in">exit</span>  或 deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装第三方包</span></span><br><span class="line">pipenv install xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">pipenv update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除包</span></span><br><span class="line">pipenv uninstall xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有包</span></span><br><span class="line">pipenv uninstall --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除项目配置的虚拟环境</span></span><br><span class="line">pipenv --rm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查项目依赖库信息</span></span><br><span class="line">pipenv graph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取虚拟环境的配置路径</span></span><br><span class="line">pipenv --venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前项目路径</span></span><br><span class="line">pipenv --<span class="built_in">where</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行py文件(未激活虚拟环境)</span></span><br><span class="line">pipenv run python xxx.py</span><br></pre></td></tr></table></figure><p><strong>pipenv使用详解参见</strong></p><ul><li><a href="https://pypi.org/project/pipenv/">pipenv官网</a></li><li><a href="https://blog.csdn.net/swinfans/article/details/89305301">Pipenv详解</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Python搭建项目常常会在一个封闭而独立的虚拟环境中操作，以便于后续项目的打包迁移到服务器等其它设备中加载运行。当前Python虚拟环境搭建常用工具有&lt;strong&gt;virtualenv&lt;/strong&gt;/ &lt;strong&gt;venv&lt;/strong&gt;/&lt;strong&gt;p</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="pipenv" scheme="https://bingeone.github.io/bione/tags/pipenv/"/>
    
  </entry>
  
  <entry>
    <title>redis非关系型数据库知识点</title>
    <link href="https://bingeone.github.io/bione/posts/19434.html"/>
    <id>https://bingeone.github.io/bione/posts/19434.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-25T10:46:24.713Z</updated>
    
    <content type="html"><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库,Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><ul><li>widows下安装</li></ul><blockquote><p><a href="https://github.com/tporadowski/redis/releases">官网下载地址</a>：根据系统选择相应的32位或64位安装包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在命令行cmd中启动redis服务</span></span><br><span class="line">redis-server.exe redis.windows.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现对应的redis运行界面，可以看到运行的端口6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到另一个cmd窗口，运行redis</span></span><br><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置键值对</span></span><br><span class="line"><span class="built_in">set</span> key1 abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取键值对</span></span><br><span class="line">get key1</span><br></pre></td></tr></table></figure><ul><li>ubuntu中安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载redis</span></span><br><span class="line">sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动redis服务</span></span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行redis</span></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>安装详情及Linux中编译安装<a href="https://www.runoob.com/redis/redis-install.html">教程</a></p><h2 id="数据库特点"><a href="#数据库特点" class="headerlink" title="数据库特点"></a>数据库特点</h2><ul><li>支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时再次加载</li><li>支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</li><li>支持数据的备份，即master-slave模式的数据备份</li></ul><blockquote><p>redis                 总共有16个库，0-15<br>select 15        选择15号库，默认0号库<br>key-values      key 同一个库不能重复</p></blockquote><h2 id="redis服务命令操作"><a href="#redis服务命令操作" class="headerlink" title="redis服务命令操作"></a>redis服务命令操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载服务：</span></span><br><span class="line">redis-server --service-uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启服务：</span></span><br><span class="line">redis-server --service-start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务：</span></span><br><span class="line">redis-server --service-stop</span><br></pre></td></tr></table></figure><h2 id="redis中key的类型"><a href="#redis中key的类型" class="headerlink" title="redis中key的类型"></a>redis中key的类型</h2><blockquote><p>type key：查看key的类型<br>    none (key不存在)<br>    string (字符串)<br>    list (列表)<br>    set (集合)<br>    zset (有序集)<br>    hash (哈希表)</p></blockquote><ul><li>字符串string</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line">get key</span><br><span class="line">mget key1 key2...获取多个的key1 key2的值</span><br><span class="line">getrange key 0 -1获取从头到尾的value字符串</span><br></pre></td></tr></table></figure><ul><li>hash 哈希</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hmset key file1 value1 file2 value2（多个字符串或值）</span><br><span class="line">hgetall key获取哈希所有key-值</span><br><span class="line">hmget key file1 file2获取key中某个file1 file2的值</span><br><span class="line">hdel key file1删除key中file1的值</span><br><span class="line">hexists key file1查询file1是否在key中</span><br><span class="line">hkeys key获取哈希所有key</span><br><span class="line">hvals key获取哈希所有值</span><br><span class="line">hlen key 获取哈希表中字段的数量</span><br></pre></td></tr></table></figure><ul><li>list 列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 value2 value3设置key的多个值</span><br><span class="line">lpush key value在list前插入值</span><br><span class="line">lrange key 0 -1查看key的所有值</span><br><span class="line">lindex key 1索引key的第二个元素（0为第一个）</span><br><span class="line">llen key获取key长度</span><br><span class="line">lpop keyvalue移除key中的元素</span><br><span class="line">lrem key -2 value移除list中重复的元素（删除两个）</span><br><span class="line">lset keylist集合移除重复的元素</span><br><span class="line">ltrim key 1 -1修剪list的一个个元素</span><br><span class="line">rpop key移除列表最后一个元素</span><br><span class="line">rpoplpush key1 key2将key1最后一个元素移动到key2</span><br><span class="line">lrem key 0 <span class="string">&#x27;del&#x27;</span>删除列表中指定的值</span><br></pre></td></tr></table></figure><ul><li>set 集合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sadd key value1 value2</span><br><span class="line">smembers key</span><br><span class="line">sismember key value 查看value是否在key中</span><br><span class="line">scard key查看集合key的元素个数</span><br><span class="line">srem key value删除集合key中的value</span><br><span class="line">mset key1 value1 key2 value2设置一个或多个 key-value 对</span><br></pre></td></tr></table></figure><ul><li>zset 有序集合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zadd key value1 value2设置有序集合</span><br><span class="line">zrange key 0 -1查询有序集合</span><br><span class="line">zcard key查询集合值的数量</span><br><span class="line">zrangebyscore key -inf +inf查询key有序集合中所有成员（递增）</span><br><span class="line">zrangebyscore key -inf 5000 withscores显示工资 &lt;=5000 的所有成员</span><br><span class="line">zrank key 成员   查询成员的排序</span><br><span class="line">zrem key1 key2移除</span><br><span class="line">zrank salary 0 -1 withscores       递增排列</span><br><span class="line">zrevrank salary 0 -1 withscores递减排序</span><br><span class="line">zscore salary 成员   返回值 注意返回值是字符串</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库,Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、</summary>
      
    
    
    
    <category term="数据库" scheme="https://bingeone.github.io/bione/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://bingeone.github.io/bione/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>内置函数(一)</title>
    <link href="https://bingeone.github.io/bione/posts/46956.html"/>
    <id>https://bingeone.github.io/bione/posts/46956.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-24T15:25:30.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python内置函数-一"><a href="#python内置函数-一" class="headerlink" title="python内置函数(一)"></a>python内置函数(一)</h3><ul><li><p>abs()    #取绝对值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#abs()是python内置函数,而fabs()是math中的一个模块</span></span><br><span class="line"><span class="comment">#fabs() 函数只适用于 float 和 integer 类型，而 abs() 也适用于复数。</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">d = <span class="number">1</span>+<span class="number">1.0j</span></span><br><span class="line">e = <span class="number">3</span>+<span class="number">4.0j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d的绝对值:&quot;</span>,<span class="built_in">abs</span>(d))<span class="comment">#结果为1.4142135623730951</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e的绝对值:&quot;</span>,math.fabs(e))<span class="comment">#结果会报错TypeError: can&#x27;t convert complex to float</span></span><br></pre></td></tr></table></figure></li><li><p>dict()         #创建一个字典</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>()<span class="comment">#创建字典</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(a=<span class="string">&quot;a&quot;</span>,b=<span class="string">&quot;b&quot;</span>,c=<span class="string">&quot;c&quot;</span>)<span class="comment">#key-alue 传入参数</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>]))<span class="comment">#映射函数方式创建字典</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&quot;one&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;two&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;three&quot;</span>,<span class="number">3</span>)])<span class="comment">#可迭代对象来构造字典，列表为iterable</span></span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>help ()         #参看对象的帮助信息</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(<span class="string">&#x27;sys&#x27;</span>)             <span class="comment"># 查看 sys 模块的帮助</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(<span class="string">&#x27;str&#x27;</span>)             <span class="comment"># 查看 str 数据类型的帮助</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(a)                 <span class="comment"># 查看列表 list 帮助信息</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(a.append)          <span class="comment"># 显示list的append方法的帮助</span></span><br></pre></td></tr></table></figure></li><li><p>min ()       #返回给定参数的最小值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">&quot;min(80, 103, 1440) : &quot;</span>, <span class="built_in">min</span>(<span class="number">80</span>, <span class="number">103</span>, <span class="number">1440</span>))</span><br><span class="line"><span class="built_in">min</span>(<span class="number">80</span>, <span class="number">103</span>, <span class="number">1440</span>) :  <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><p>setattr()    #设置属性值，属性不一定存在</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a,<span class="string">&quot;bar&quot;</span>)<span class="comment">#获取属性bar值</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">setattr</span>(a,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>)<span class="comment">#设置属性b值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>all()      #用于判断给定的可迭代对象iterable中所有元素是否都为True，元素除了是 0、空、None、False 外都算 True。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#iterable 是元组或列表空元组、空列表返回值为True，这里要特别注意。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])<span class="comment"># 列表list，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])<span class="comment"># 列表list，存在一个空的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment"># 列表list，存在一个为0的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>))<span class="comment"># 元组tuple，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;d&#x27;</span>))<span class="comment"># 元组tuple，存在一个空的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))<span class="comment"># 列表list，存在一个为0的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([])<span class="comment"># 空列表</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>(())<span class="comment"># 空元组</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>dir()         #函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>()<span class="comment"># 获取当前模块的属性列表</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>([])<span class="comment"># 参看列表的方法</span></span><br></pre></td></tr></table></figure></li><li><p>hex()      #函数用于将一个指定数字转换为 16 进制数,返回的是一个字符串，以0x开头</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">255</span>)</span><br><span class="line"><span class="string">&#x27;0xff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(-<span class="number">42</span>)</span><br><span class="line"><span class="string">&#x27;-0x2a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">12</span>)</span><br><span class="line"><span class="string">&#x27;0xc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">hex</span>(<span class="number">12</span>))<span class="comment">#查看类型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>next()      #返回迭代器的下一个项目，和生成迭代器的 <strong>iter()</strong> 函数一起使用</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li=[<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">63</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(li)<span class="comment">#首先获得Iterator对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    y =<span class="built_in">next</span>(it,<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> y == <span class="string">&quot;aa&quot;</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line">...</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">63</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">aa</span><br></pre></td></tr></table></figure></li><li><p>slice()      #函数实现切片对象，主要用在切片操作函数里的参数传递</p><p>  slice(start, stop[, step])—step间距</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myslice = <span class="built_in">slice</span>(<span class="number">3</span>)<span class="comment"># 设置截取3个元素的切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myslice</span><br><span class="line"><span class="built_in">slice</span>(<span class="literal">None</span>, <span class="number">3</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr[myslice] <span class="comment"># 截取 3 个元素</span></span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;myslice1 = <span class="built_in">slice</span>(<span class="number">0</span>,<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;arr1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">&gt;&gt;&gt;arr1[myslice1]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>any()       #函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])  <span class="comment"># 列表list，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])   <span class="comment"># 列表list，存在一个为空的元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span>])        <span class="comment"># 列表list,元素全为0,&#x27;&#x27;,false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))  <span class="comment"># 元组tuple，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))   <span class="comment"># 元组tuple，存在一个为空的元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span>))        <span class="comment"># 元组tuple，元素全为0,&#x27;&#x27;,false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([]) <span class="comment"># 空列表</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>(()) <span class="comment"># 空元组</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>divmod()      #接受两个非复数类型的数字，返回商和余数的元组</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">7</span>,<span class="number">2</span>)//相当于（a//b,a%b）</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">3</span>,-<span class="number">1.3</span>)</span><br><span class="line">(-<span class="number">3.0</span>, -<span class="number">0.9000000000000001</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">6</span>,-<span class="number">2</span>)</span><br><span class="line">(-<span class="number">3</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>id()       #获取对象的内存地址</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aa=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(aa)</span><br><span class="line"><span class="number">9788608</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bb=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(bb)</span><br><span class="line"><span class="number">9788608</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;whoami&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140185507204528</span></span><br><span class="line"><span class="comment">#-------注意--------</span></span><br><span class="line"><span class="comment">#在对象内存数字类型较小时，对象的内存地址是一样的，一般情况不一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140185507593328</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140185507593424</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140185507593328</span></span><br></pre></td></tr></table></figure></li><li><p>object()      #对象，类默认的对象</p></li><li><p>sorted()      #对可迭代的对象(列表，元组)进行排列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort 和 sorted区别：</span></span><br><span class="line"><span class="comment"># sort 对原来的列表排序操作，sorted 对可迭代对象操作并生成新的列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>])</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">#----------sorted常用-------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(&#123;<span class="number">1</span>:<span class="string">&quot;d&quot;</span>,<span class="number">2</span>:<span class="string">&quot;b&quot;</span>,<span class="number">3</span>:<span class="string">&quot;c&quot;</span>,<span class="number">4</span>:<span class="string">&quot;a&quot;</span>&#125;)//接受任何的iterable</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result_li=<span class="built_in">sorted</span>(li, key = <span class="keyword">lambda</span> y:y*-<span class="number">1</span>)//将序</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result_li</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(li, reverse = <span class="literal">True</span>)</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(li, reverse = <span class="literal">False</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">#------------实例应用------------</span></span><br><span class="line"><span class="comment"># score降序排列，同条件下对name升序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">38</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">18</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;darl&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">28</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;christ&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">28</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = <span class="built_in">sorted</span>(d1, key = <span class="keyword">lambda</span> x:(-x[<span class="string">&quot;score&quot;</span>],x[<span class="string">&quot;name&quot;</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">38</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;christ&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">28</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;darl&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">28</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">18</span>&#125;]</span><br></pre></td></tr></table></figure></li><li><p>ascii()       #返回表示对象的字符串，对于字符串中的非 ASCII 字符则返回通过 repr()  函数使用 \x, \u 或 \U 编码的字符</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ascii</span>(<span class="string">&#x27;whoami&#x27;</span>)//与<span class="built_in">repr</span>()用法相似</span><br><span class="line"><span class="string">&quot;&#x27;whoami&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">repr</span>(<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;#&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>enumerate()     #用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------列出数据的下标和它本身--------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;Spring&#x27;</span>,<span class="string">&#x27;Summer&#x27;</span>,<span class="string">&#x27;Fall&#x27;</span>,<span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(li))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(li,start=<span class="number">2</span>))</span><br><span class="line">[(<span class="number">2</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="comment">#---------在for中的应用---------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>,<span class="string">&#x27;four&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> element <span class="keyword">in</span> li:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, li[i])</span><br><span class="line"><span class="meta">... </span>    i +=<span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br><span class="line"><span class="number">3</span> four</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">    <span class="built_in">print</span>(i, element)</span><br><span class="line"><span class="number">0</span> one</span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br><span class="line"><span class="number">3</span> four</span><br></pre></td></tr></table></figure></li><li><p>input()      #接受一个标准输入数据，返回string数据类型</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aa = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt;:<span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(aa)//查看aa对象的类型</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">bb</span> = <span class="title">input</span>(<span class="params"><span class="string">&quot;&gt;&gt;&gt;:&quot;</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;:</span>string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(bb)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">#-------接受多个值-------</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span> = (<span class="params"><span class="built_in">input</span>(<span class="params"><span class="string">&quot;请输入三角形三边的长：&quot;</span></span>).split(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="class">请输入三角形三边的长：3 4 5</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span> = <span class="title">int</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span> = <span class="title">int</span>(<span class="params">b</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span> = <span class="title">int</span>(<span class="params">c</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">p</span> = (<span class="params">a+b+c</span>)/2</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">p</span></span></span><br><span class="line"><span class="class">6.0</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">s</span> = (<span class="params">p*(<span class="params">p-a</span>)*(<span class="params">p-b</span>)*(<span class="params">p-c</span>)</span>)**0.5</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params"><span class="string">f&quot;三角形的面积为:<span class="subst">&#123;s&#125;</span>&quot;</span></span>)</span></span><br><span class="line"><span class="class">三角形的面积为:</span><span class="number">6.0</span></span><br></pre></td></tr></table></figure></li><li><p>oct()      #将整数转化成8进制字符串，以<strong>0o</strong>作为前缀</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(<span class="number">12</span>)</span><br><span class="line"><span class="string">&#x27;0o14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;0o1&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>staticmethod     #返回函数的静态方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">staticmethod</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.f()// 无实例调用函数</span><br><span class="line">hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cobj = A()// 实例化后调用</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cobj.f()</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li><li><p>bin()     #返回一个整数int或者长整数long int的二进制</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;0b1100100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;0b1011&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>eval()      #执行一个字符串表达式，并返回表达式的值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;a+1&quot;</span>)//计算字符串里的内容</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;pow(2,3)&quot;</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;3*4&quot;</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></li><li><p>int()       # 将一个字符串或数字转换为整型</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>()//没有参数为<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">3</span>)//</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">4.6</span>)//取整数部分</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;12&quot;</span>,<span class="number">16</span>)//将十六进制<span class="number">12</span>，转化成十进制</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;0xa&quot;</span>,<span class="number">16</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;10&quot;</span>,<span class="number">8</span>)//将八进制转化成十进制</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>open()       #用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError</p><blockquote><p>语法格式：</p><p>open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file: 必需，文件路径（相对或者绝对路径）。</span><br><span class="line">mode: 可选，文件打开模式</span><br><span class="line">buffering: 设置缓冲</span><br><span class="line">encoding: 一般使用utf8</span><br><span class="line">errors: 报错级别</span><br><span class="line">newline: 区分换行符</span><br><span class="line">closefd: 传入的file参数类型</span><br><span class="line">opener:</span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line">&gt;&gt;&gt;f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;f.read()</span><br><span class="line">&gt;&gt;&gt;f.close()</span><br></pre></td></tr></table></figure><p>  <strong>mode</strong> 的参数详述：(默认为文本模式，加b就可以用二进，针对图形影视文件)</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>t</td><td>文本模式 (默认)。</td></tr><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>U</td><td>通用换行模式（不推荐）。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></li><li><p>str()      #将对象格式化成string</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span> = &#123;<span class="string">&#x27;baidu&#x27;</span>: <span class="string">&#x27;baidu.com&#x27;</span>, <span class="string">&#x27;google&#x27;</span>: <span class="string">&#x27;google.com&#x27;</span>&#125;//格式化成字符串</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="built_in">dict</span>)</span><br><span class="line"><span class="string">&quot;&#123;&#x27;baidu&#x27;: &#x27;baidu.com&#x27;, &#x27;google&#x27;: &#x27;google.com&#x27;&#125;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;bingeone&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(a)</span><br><span class="line"><span class="string">&#x27;bingeone&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>bool()      #将给定的对象转换成布尔类型，True  或者 False</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">10</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">bool</span>,<span class="built_in">int</span>)   //<span class="built_in">bool</span> 是 <span class="built_in">int</span>的子类</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>exec()      #执行存储在字符串或文件中的python语句</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;hello,world&#x27;)&quot;</span>)</span><br><span class="line">hello,world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;&quot;&quot;for i in range(3):</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    print(&quot; iter time: %d&quot; %i)</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span>)</span><br><span class="line"> <span class="built_in">iter</span> time: <span class="number">0</span></span><br><span class="line"> <span class="built_in">iter</span> time: <span class="number">1</span></span><br><span class="line"> <span class="built_in">iter</span> time: <span class="number">2</span></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">expr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z = 30</span></span><br><span class="line"><span class="string">sum = x + y + z</span></span><br><span class="line"><span class="string">print(sum)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    <span class="built_in">exec</span>(expr)// <span class="number">10</span>+<span class="number">20</span>+<span class="number">30</span></span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;)// <span class="number">1</span>+<span class="number">2</span>+<span class="number">30</span></span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">4</span>&#125;)// <span class="number">1</span>+<span class="number">3</span>+<span class="number">30</span>，两个y取后者，z取定义的，不用传递的<span class="number">4</span></span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line">结果：</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure></li><li><p>isinstance()     #判断一个对象是否是一个已知的类型</p><blockquote><p>与type() 的区别</p><p>type()  不会认为子类是父类类型，不考虑继承关系</p><p>isinstance()  会认为子类是父类类型，考虑继承关系</p><p>可以使用isinstance() 来判断两个类型是否相同</p><p>isinstance(object, classinfo)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a,<span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a,(<span class="built_in">str</span>,<span class="built_in">int</span>,<span class="built_in">list</span>))// 在元组中满足一个，就返回<span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment">#基本类型 classinfo：</span></span><br><span class="line"><span class="comment"># int，float，bool，complex，str(字符串)，list，dict(字典)，set，tuple</span></span><br><span class="line"><span class="comment">#-------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span>// B类继承A类</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(A(),A)//实例A 和类A 一个类型</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(A()) == A</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(B(),A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>ord()     # 返回对应的 ASCII 数值，或者 Unicode 数值，对应的十进制整数。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></li><li><p>sum()     #对序列进行求和计算</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="number">1</span>)//对元组求和后，再加<span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></li><li><p>batearray()    #返回一个新字节数组</p><blockquote><p>bytearray([source[, encoding[, errors]]])</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果 source 为整数，则返回一个长度为 source 的初始化数组；</span></span><br><span class="line"><span class="string">如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</span></span><br><span class="line"><span class="string">如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；</span></span><br><span class="line"><span class="string">如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。</span></span><br><span class="line"><span class="string">如果没有输入任何参数，默认就是初始化数组为0个元素。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytearray</span>()</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytearray</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;\x01\x02\x03&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytearray</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter()        #用于过滤序列，过滤不符合条件的元素，返回一个迭代器对象，可以用<strong>list</strong>将其转化成列表</p><blockquote><p>filter(function, iterrable)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> n %<span class="number">2</span> == <span class="number">1</span>//对<span class="number">2</span>取余，求n为奇数</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp = <span class="built_in">filter</span>(is_sqr, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(tmp)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">#-------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math//引入math模块</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> math.sqrt(x) % <span class="number">1</span>== <span class="number">0</span>//求开平方根得到整数的对象</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmplist = <span class="built_in">filter</span>(is_sqr, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newlist = <span class="built_in">list</span>(tmplist)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newlist</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure></li><li><p>issubclass()          #用于判断参数class是否是类型参数classinfo的子类</p><blockquote><p>issubclass(class, classinfo)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">issubclass</span>(B,A))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>pow()           #返回x^y^ 的值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">100</span>,<span class="number">2</span>)//保留一位小数</span><br><span class="line"><span class="number">10000.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">100</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="number">0.0001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">8.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">1.0</span></span><br></pre></td></tr></table></figure></li><li><p>super()             #用于调用父类(超类)的一个方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,x</span>):</span></span><br><span class="line"><span class="meta">... </span>         y = x+<span class="number">1</span></span><br><span class="line"><span class="meta">... </span>         <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,x</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().add(x)//调用父类中的add函数</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.add(<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#--------------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooParent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.parent = <span class="string">&#x27;I\&#x27;m the parent.&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Parent&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s from Parent&quot;</span> % message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooChild</span>(<span class="params">FooParent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(FooChild,self).__init__()//步骤①</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Child&quot;</span>)//步骤②</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(FooChild,self).bar(message)//步骤③</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Child bar function&#x27;</span>)//步骤④</span><br><span class="line">        <span class="built_in">print</span>(self.parent)//步骤⑤</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fooChild = FooChild()//执行结果打印前两个结果</span><br><span class="line">    fooChild.bar(<span class="string">&quot;Helloworld&quot;</span>)//打印后三个</span><br><span class="line">结果：</span><br><span class="line">Parent</span><br><span class="line">Child</span><br><span class="line">Helloworld <span class="keyword">from</span> Parent</span><br><span class="line">Child bar function</span><br><span class="line">I<span class="string">&#x27;m the parent.</span></span><br></pre></td></tr></table></figure></li></ul><p>​    </p><p>​        <strong>内置函数第二部分详见下文。。。</strong><a href="/bione/posts/30659.html">内置函数(二)</a></p><p>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;python内置函数-一&quot;&gt;&lt;a href=&quot;#python内置函数-一&quot; class=&quot;headerlink&quot; title=&quot;python内置函数(一)&quot;&gt;&lt;/a&gt;python内置函数(一)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;abs()    #取绝对值&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>内置函数(二)</title>
    <link href="https://bingeone.github.io/bione/posts/30659.html"/>
    <id>https://bingeone.github.io/bione/posts/30659.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-24T15:25:00.429Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一部分详见上文。。。</strong><a href="/bione/posts/46956.html">内置函数(一)</a></p><ul><li><p>bytes()[^1]        #返回新的bytes对象，是一个0&lt;= x &lt;=256之间的整数不可变序列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">bytes</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">b&#x27;\x01\x02\x03\x04&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; </span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span> = <span class="title">bytes</span>(<span class="params"><span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span></span></span><br><span class="line"><span class="class"><span class="title">b</span>&#x27;<span class="title">hello</span>&#x27;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>float()           #用于将整数和字符串转换成浮点数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(-<span class="number">112.3</span>)</span><br><span class="line">-<span class="number">112.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure></li><li><p>iter()              #用来生成迭代器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">iter</span>(li):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>print()             #用于打印输出</p><blockquote><p>print(*objects, sep=‘ ’, end=‘\n’, file=sys.stdout, flush=False )</p><p>objects – 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</p><p>sep – 用来间隔多个对象，默认值是一个空格。</p><p>end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串。</p><p>file – 要写入的文件对象。</p><p>flush – 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line">hello,world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="number">1</span> hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;b&quot;</span>)</span><br><span class="line">aa b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;aaa&quot;</span><span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">aaabbb</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;I&quot;</span>,<span class="string">&quot;am&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;student&quot;</span>,sep=<span class="string">&#x27; &#x27;</span>)//设置间断符</span><br><span class="line">I am a student</span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;。&quot;</span>,end=<span class="string">&quot;&quot;</span>,flush = <span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span>    time.sleep(<span class="number">0.5</span>)//输出结果为：间断<span class="number">0.5</span>s输出句号。</span><br></pre></td></tr></table></figure></li><li><p>tuple         #将可迭代对象（如列表）转化成元组</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;am&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;student&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = <span class="built_in">tuple</span>(li)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1</span><br><span class="line">(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;student&#x27;</span>)</span><br><span class="line"><span class="comment">#-------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= <span class="string">&#x27;www&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>(a)//将字符串转化成元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;www&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;ttt&#x27;</span>:<span class="number">456</span>&#125;//将字典的key转化成元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;ttt&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>(<span class="string">&#x27;abcd&#x27;</span>)//将集合转化成元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)//元组形式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;//集合形式</span><br></pre></td></tr></table></figure></li><li><p>callable()      #用于检查一个对象是否可以调用</p><blockquote><p>对于函数、方法、lambda函式、类以及实现了__ all__ 方法的类实例，它的返回True </p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(add)//函数</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(A)//类返回<span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()//没有实现__call__,返回 <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(a)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(B)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(b)//实现__call__,返回 <span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>format()         #格式化函数，可以接受不限个参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;world hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;网站:&#123;name&#125;,url:&#123;url&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;博客&quot;</span>,url=<span class="string">&quot;bingeone.top&quot;</span>))</span><br><span class="line">网站:博客,url:bingeone.top</span><br><span class="line"><span class="comment">#--------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>site = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;博客&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;bingeone.top&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;网站:&#123;name&#125;,url:&#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site))//字典调用</span><br><span class="line">网站:博客,url:bingeone.top</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;博客&#x27;</span>,<span class="string">&#x27;bingeone.top&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;网站:&#123;0[0]&#125;,url:&#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(li))//列表调用，<span class="number">0</span>指定li列表对象</span><br><span class="line">网站:博客,url:bingeone.top</span><br><span class="line"><span class="comment">#---------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AssignValue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.value = value</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_value = AssignValue(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;value 为:&#123;0.value&#125;&quot;</span>.<span class="built_in">format</span>(my_value))</span><br><span class="line">value 为:<span class="number">5</span></span><br></pre></td></tr></table></figure><p>  <strong>数字格式化</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; 对应的位置是&#123;&#123;0&#125;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;bingeone&quot;</span>))</span><br><span class="line">bingeone 对应的位置是&#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">#-----------进制转化-----------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;1011&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:o&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;13&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;0xb&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:#X&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;0XB&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>数字</th><th>格式</th><th>输出</th><th>描述</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>保留小数点后两位</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>+3.14</td><td>带符号保留小数点后两位</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1.00</td><td>带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>不带小数</td></tr><tr><td>5</td><td>{:0&gt;2d}</td><td>05</td><td>数字补零 (填充左边, 宽度为2)</td></tr><tr><td>5</td><td>{:x&lt;4d}</td><td>5xxx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>10</td><td>{:x&lt;4d}</td><td>10xx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td>{:.2%}</td><td>25.00%</td><td>百分比格式</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00e+09</td><td>指数记法</td></tr><tr><td>13</td><td>{:&gt;10d}</td><td>13</td><td>右对齐 (默认, 宽度为10)</td></tr></tbody></table></li><li><p>len()         #返回对象(字符，列表，元组等)长度或者项目个数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;bingeone&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(ll)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>property()         #在新式类中返回属性值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">property</span>.md &gt;folded</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">getx</span>(<span class="params">self</span>):</span>//获取x的值</span><br><span class="line">         <span class="keyword">return</span> self._x</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setx</span>(<span class="params">self</span>):</span>//设置x的值</span><br><span class="line">         self._x = value</span><br><span class="line">      </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">delx</span>(<span class="params">self</span>):</span>//删除x的值</span><br><span class="line">         <span class="keyword">del</span> self._x</span><br><span class="line">     </span><br><span class="line">      x = <span class="built_in">property</span>(getx,setx,delx, <span class="string">&quot;I&#x27;m the &#x27;x&#x27; property&quot;</span>)</span><br><span class="line"><span class="comment">#------------------------两种写法------------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line">     </span><br><span class="line"><span class="meta">     @property</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>//获取x的值</span><br><span class="line">         <span class="keyword">return</span> self._x</span><br><span class="line">      </span><br><span class="line"><span class="meta">     @x.setter</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>//设置x的值</span><br><span class="line">         self._x = value</span><br><span class="line">      </span><br><span class="line"><span class="meta">     @x.deleter</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>//删除x的值</span><br><span class="line">         <span class="keyword">del</span> self._x</span><br></pre></td></tr></table></figure></li><li><p>type()          #一个参数返回对象的类型，三个参数返回新的类型对象</p><blockquote><p>type(object)</p><p>type(name, bases, dict)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">1</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params"><span class="string">&quot;bingeone&quot;</span></span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">[<span class="number">11</span>,<span class="number">22</span>]</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">&#123;<span class="number">1</span>:<span class="string">&#x27;aa&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span> = &#x27;<span class="title">a</span>&#x27;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span> = 1</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">x</span>) == <span class="title">int</span>//判断类型</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class">#--------------------------------</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">class</span> <span class="title">X</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    a = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = <span class="built_in">type</span>(<span class="string">&quot;X&quot;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(a=<span class="number">1</span>))//产生一个新的类型 X</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">X</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>chr()         #一个整数作为参数，返回一个对应的字符</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">65</span>)</span><br><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">97</span>)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">8364</span>)</span><br><span class="line"><span class="string">&#x27;€&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>frozenset()         #返回一个冻结的集合，冻结后集合不能再添加任何元素</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)//生成一个不可变的集合</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">frozenset</span>(<span class="string">&quot;bingeone&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>list()            #用于将元组或者字符串转化成列表</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>_<span class="built_in">tuple</span> = (<span class="number">123</span>,<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;www&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = <span class="built_in">list</span>(_<span class="built_in">tuple</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">123</span>, <span class="string">&#x27;baidu&#x27;</span>, <span class="string">&#x27;www&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li2 = <span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li2</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>range()         #返回的是一个可迭代对象(类型是对象)，而不是列表类型</p><p>  list()函数是一个对象迭代器，可以把range()返回的可迭代对象转化成一个列表</p><blockquote><p>range(stop)</p><p>range(start, stop, step)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)) //给出起点, 终点(到不了的), 步长(正整数,负整数)</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,-<span class="number">10</span>,-<span class="number">2</span>))</span><br><span class="line">[<span class="number">0</span>, -<span class="number">2</span>, -<span class="number">4</span>, -<span class="number">6</span>, -<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2046</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="built_in">len</span>(a)-<span class="number">1</span>])</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2044</span></span><br></pre></td></tr></table></figure></li><li><p>vars()            #函数返回对象object的属性和属性值的字典对象</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">vars</span>(A))</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">vars</span>(a))</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope = <span class="built_in">vars</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope[<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>classmethod()       #对应的函数不需要实例化，不需要self参数，但第一个参数需要是表示自身类的的cls参数，可以用来调用类的属性，类的方法，实例化对象等</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;www&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">classmethod</span>//类方法修饰</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">cls</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(cls.bar)//调用类的属性</span><br><span class="line"><span class="meta">... </span>        cls().func1()//调用类的方法</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.func2()//实例化对象</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">www</span><br></pre></td></tr></table></figure></li><li><p>getatter()              #返回对象的属性值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a,<span class="string">&quot;bar&quot;</span>)//获取bar 属性</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a,<span class="string">&quot;bar1&quot;</span>,<span class="number">2</span>)//没有bar1属性，需要设置默认值，为<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self,a,b</span>):</span></span><br><span class="line"><span class="meta">... </span>        x = a</span><br><span class="line"><span class="meta">... </span>        a = b</span><br><span class="line"><span class="meta">... </span>        b = x</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bb = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc = <span class="built_in">getattr</span>(bb,<span class="string">&quot;set&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>locals()          #以字典的形式返回当前位置的全部局部变量</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">A</span>(<span class="params">arg</span>):</span> //两个局部变量：arg z</span><br><span class="line"><span class="meta">... </span>    z= <span class="number">11</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A(<span class="number">22</span>)</span><br><span class="line">&#123;<span class="string">&#x27;arg&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">11</span>&#125; //返回一个名字/值对的字典</span><br></pre></td></tr></table></figure></li><li><p>repr()            #将对象转化为供解释器读取的形式</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;aabbcc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(a)</span><br><span class="line"><span class="string">&quot;&#x27;aabbcc&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(li)</span><br><span class="line"><span class="string">&#x27;[1, 2, 3, 4]&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>zip()            #将可迭代的对象作为参数，将对象对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样的作用可以节约内存</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped = <span class="built_in">zip</span>(a,b) //返回对象</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped</span><br><span class="line">&lt;<span class="built_in">zip</span> <span class="built_in">object</span> at <span class="number">0x7fa2f71d36c0</span>&gt; //对象地址</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(zipped)//罗列对象成列表形式</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(a,c))//元素的个数与最短的列表一样</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1, a2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a,b))//与 <span class="built_in">zip</span> 相反，<span class="built_in">zip</span>(*) 可理解为解压，返回二维矩阵式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a2)</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>compile()           #将一个字符串编译为字节代码</p><blockquote><p>compile(source, filename, mode[, flags[,dont_inherit]])</p><ul><li>source – 字符串或者AST（Abstract Syntax Trees）对象。。</li><li>filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。</li><li>mode – 指定编译代码的种类。可以指定为 exec, eval, single。</li><li>flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。</li><li>flags和dont_inherit是用来控制编译源码时的标志</li></ul></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;for i in range(1,10): print(i)&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;exec&quot;</span>)//编译为字节代码对象</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x7fa2f71ed5b0</span>, file <span class="string">&quot;&quot;</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(c)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;3*4+5&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;eval&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(a)</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure></li><li><p>globals()            #以字典的形式返回当前位置的全部全局变量</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>map()               #根据提供的函数对序列做映射</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x**<span class="number">2</span>//返回x 的平方</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])//计算列表中各元素的平方</span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x7fa4ad1d2f10</span>&gt;//返回迭代器</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))//转化成列表</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))//使用 <span class="keyword">lambda</span> 匿名函数</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure></li><li><p>reversed()            #返回一个反转的迭代器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqString = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqString)))</span><br><span class="line">[<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqTuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqTuple)))</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqRange = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqRange)))</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqList)))</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>__import__()           #用于动态加载类和函数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;p01.py&#x27;</span>)<span class="comment"># 导入 p01.py 模块</span></span><br></pre></td></tr></table></figure></li><li><p>complex()            #用于创建一个值为renl + imag*j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="number">1</span>)//数字</span><br><span class="line">(<span class="number">1</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="string">&quot;1&quot;</span>)//字符串</span><br><span class="line">(<span class="number">1</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="string">&quot;1+2j&quot;</span>)//这个地方在<span class="string">&quot;+&quot;</span>号两边不能有空格，也就是不能写成<span class="string">&quot;1 + 2j&quot;</span>，应该是<span class="string">&quot;1+2j&quot;</span>，否则会报错</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br></pre></td></tr></table></figure></li><li><p>hasattr()            #用于判断对象是否包含对应的属性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">10</span></span><br><span class="line"><span class="meta">... </span>    y = -<span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    z = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Coordinate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p,<span class="string">&quot;x&quot;</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p,<span class="string">&quot;no&quot;</span>))//没有对应的属性</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>max()                #返回给定的最大值，参数可以为序列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;max(80,30,50,75):&quot;</span>,<span class="built_in">max</span>(<span class="number">80</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">75</span>))</span><br><span class="line"><span class="built_in">max</span>(<span class="number">80</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">75</span>): <span class="number">80</span></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line"><span class="comment">#max(x, y[, z...]):Number|Sequence 入参类型不能混入（要么全Number(int|float|complex|bool），要么全序列）。</span></span><br><span class="line"><span class="comment">#单序列入参，返回序列中最大的一个数值多序列入参, 按索引顺序，逐一对比各序列的当前索引位的 “值”，直到遇见最大值立即停止对比，并返回最大值所在的序列（也就是说，多序列入参，返回值依旧是一个序列，而不是数值）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">0</span>,<span class="literal">True</span>)//<span class="built_in">bool</span> </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])//单序列</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(-<span class="number">1</span>,-<span class="number">0.5</span>,-<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">6</span>])//多序列，按索引位置比较</span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>])</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">1</span>])</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>))</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,<span class="literal">False</span>,<span class="number">0</span>))//<span class="built_in">bool</span>，多序列</span><br><span class="line">(<span class="literal">True</span>, <span class="literal">False</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,<span class="literal">False</span>,<span class="number">2</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">(<span class="literal">True</span>, <span class="literal">False</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,),(<span class="number">1</span>,))</span><br><span class="line">(<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,),(<span class="number">1</span>,))</span><br><span class="line">(<span class="literal">True</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">3</span>,<span class="number">4</span>)//number 和 序列混杂报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])//不同类型序列，报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;list&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;tuple&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>round()            #返回浮点数x的四舍五入，准确的说保留到离上一位更近的一端（四舍六入），精度要求较高的，一般不使用该函数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(70.23456):&quot;</span>,<span class="built_in">round</span>(<span class="number">70.23456</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">70.23456</span>): <span class="number">70</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(56.659,1):&quot;</span>,<span class="built_in">round</span>(<span class="number">56.659</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">56.659</span>,<span class="number">1</span>): <span class="number">56.7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(80.264,2):&quot;</span>,<span class="built_in">round</span>(<span class="number">80.264</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">80.264</span>,<span class="number">2</span>): <span class="number">80.26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(100.000056,3):&quot;</span>,<span class="built_in">round</span>(<span class="number">100.000056</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">100.000056</span>,<span class="number">3</span>): <span class="number">100.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(-100.000056,3):&quot;</span>,<span class="built_in">round</span>(-<span class="number">100.000056</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">round</span>(-<span class="number">100.000056</span>,<span class="number">3</span>): -<span class="number">100.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(2.675,2):&quot;</span>,<span class="built_in">round</span>(<span class="number">2.675</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">2.675</span>,<span class="number">2</span>): <span class="number">2.67</span></span><br><span class="line"><span class="comment"># 按我们的想法返回结果应该是 2.68，可结果却是 2.67，为什么？</span></span><br><span class="line"><span class="comment"># 这跟浮点数的精度有关。我们知道在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。</span></span><br></pre></td></tr></table></figure></li><li><p>delattr()          #用于删除函数属性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>:</span></span><br><span class="line"><span class="meta">... </span>    x =<span class="number">10</span></span><br><span class="line"><span class="meta">... </span>    y = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    z = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Coordinate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;x=:&quot;</span>,p.x)</span><br><span class="line">x=: <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;y=:&quot;</span>,p.y)</span><br><span class="line">y=: <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;z=:&quot;</span>,p.z)</span><br><span class="line">z=: <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">delattr</span>(Coordinate,<span class="string">&quot;z&quot;</span>)//删除类中 z的属性</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;x=:&quot;</span>,p.x)</span><br><span class="line">x=: <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;y=:&quot;</span>,p.y)</span><br><span class="line">y=: <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;z=:&quot;</span>,p.z)//类中没有该属性，报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Coordinate&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;z&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>hash()          #返回对象的哈希值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="number">3938127732211961192</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">-<span class="number">8986991832632495888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">sorted</span>(&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>&#125;)))</span><br><span class="line"><span class="number">341477958600190998</span></span><br></pre></td></tr></table></figure></li><li><p>memoryview()           #返回给定参数的内存查看对象（memory view）</p><blockquote><p>所谓内存查看对象，是指支持缓冲协议的数据进行包装，在不需要复制对象基础上允许python代码访问</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">memoryview</span>(<span class="built_in">bytearray</span>(<span class="string">&quot;abcefg&quot;</span>,<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">0</span>])//索引 <span class="number">0</span>位的asii码</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[-<span class="number">1</span>])</span><br><span class="line"><span class="number">103</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">&lt;memory at <span class="number">0x7fa845b14580</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>].tobytes())</span><br><span class="line"><span class="string">b&#x27;bce&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>toBytes()方法是将参数使用UTF-8的编码格式转换成byte[],<br>getBytes()是用读取file.encoding的编码格式,然后用读取的格式进行转换,</p></blockquote></li><li><p>set()       #创建一个无序不重复元素集，可以进行关系测试，删除重复数据，还可以计算交集，差集，并集等</p><blockquote><p><strong>交集 &amp;</strong>  : x&amp;y，返回一个新的集合，包括同时在集合 x 和y中的共同元素。</p><p><strong>并集 |</strong>  :  x|y，返回一个新的集合，包括集合 x 和 y 中所有元素。</p><p><strong>差集 -</strong>   : x-y，返回一个新的集合,包括在集合 x 中但不在集合 y 中的元素。</p><p><strong>补集 ^</strong>  : x^y，返回一个新的集合，包括集合 x 和 y 的非共同元素。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">set</span>(<span class="string">&#x27;alibaba&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">set</span>(<span class="string">&#x27;google&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y</span><br><span class="line">(&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;, &#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x - y</span><br><span class="line">&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ y</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y ^ x</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​        以上总共68个python内置函数，学习资料来自<a href="https://www.runoob.com/python3/python3-built-in-functions.html">菜鸟教程</a></p><p><strong>内置函数</strong></p><table><thead><tr><th><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs()</a></th><th><a href="https://www.runoob.com/python/python-func-dict.html">dict()</a></th><th><a href="https://www.runoob.com/python/python-func-help.html">help()</a></th><th><a href="https://www.runoob.com/python3/python3-func-number-min.html">min()</a></th><th><a href="https://www.runoob.com/python/python-func-setattr.html">setattr()</a></th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/python-func-all.html">all()</a></td><td><a href="https://www.runoob.com/python/python-func-dir.html">dir()</a></td><td><a href="https://www.runoob.com/python3/python3-func-hex.html">hex()</a></td><td><a href="https://www.runoob.com/python/python-func-next.html">next()</a></td><td><a href="https://www.runoob.com/python/python-func-slice.html">slice()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-any.html">any()</a></td><td><a href="https://www.runoob.com/python3/python3-func-divmod.html">divmod()</a></td><td><a href="https://www.runoob.com/python/python-func-id.html">id()</a></td><td>object()</td><td><a href="https://www.runoob.com/python3/python3-func-sorted.html">sorted()</a></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-ascii.html">ascii()</a></td><td><a href="https://www.runoob.com/python3/python3-func-enumerate.html">enumerate()</a></td><td><a href="https://www.runoob.com/python/python3-func-input.html">input()</a></td><td><a href="https://www.runoob.com/python/python3-func-oct.html">oct()</a></td><td><a href="https://www.runoob.com/python/python-func-staticmethod.html">staticmethod()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bin.html">bin()</a></td><td><a href="https://www.runoob.com/python/python-func-eval.html">eval()</a></td><td><a href="https://www.runoob.com/python/python-func-int.html">int()</a></td><td><a href="https://www.runoob.com/python3/python3-func-open.html">open()</a></td><td><a href="https://www.runoob.com/python/python-func-str.html">str()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bool.html">bool()</a></td><td><a href="https://www.runoob.com/python3/python3-func-exec.html">exec()</a></td><td><a href="https://www.runoob.com/python/python-func-isinstance.html">isinstance()</a></td><td><a href="https://www.runoob.com/python3/python3-func-ord.html">ord()</a></td><td><a href="https://www.runoob.com/python/python-func-sum.html">sum()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bytearray.html">bytearray()</a></td><td><a href="https://www.runoob.com/python3/python3-func-filter.html">filter()</a></td><td><a href="https://www.runoob.com/python/python-func-issubclass.html">issubclass()</a></td><td><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow()</a></td><td><a href="https://www.runoob.com/python/python-func-super.html">super()</a></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-bytes.html">bytes()</a></td><td><a href="https://www.runoob.com/python/python-func-float.html">float()</a></td><td><a href="https://www.runoob.com/python/python-func-iter.html">iter()</a></td><td><a href="https://www.runoob.com/python/python-func-print.html">print()</a></td><td><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-callable.html">callable()</a></td><td><a href="https://www.runoob.com/python/att-string-format.html">format()</a></td><td><a href="https://www.runoob.com/python3/python3-string-len.html">len()</a></td><td><a href="https://www.runoob.com/python/python-func-property.html">property()</a></td><td><a href="https://www.runoob.com/python/python-func-type.html">type()</a></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-chr.html">chr()</a></td><td><a href="https://www.runoob.com/python/python-func-frozenset.html">frozenset()</a></td><td><a href="https://www.runoob.com/python3/python3-att-list-list.html">list()</a></td><td><a href="https://www.runoob.com/python3/python3-func-range.html">range()</a></td><td><a href="https://www.runoob.com/python/python-func-vars.html">vars()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-classmethod.html">classmethod()</a></td><td><a href="https://www.runoob.com/python/python-func-getattr.html">getattr()</a></td><td><a href="https://www.runoob.com/python/python-func-locals.html">locals()</a></td><td><a href="https://www.runoob.com/python/python-func-repr.html">repr()</a></td><td><a href="https://www.runoob.com/python3/python3-func-zip.html">zip()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-compile.html">compile()</a></td><td><a href="https://www.runoob.com/python/python-func-globals.html">globals()</a></td><td><a href="https://www.runoob.com/python/python3-func-map.html">map()</a></td><td><a href="https://www.runoob.com/python3/python3-func-reversed.html">reversed()</a></td><td><a href="https://www.runoob.com/python/python-func-__import__.html">__import__()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-complex.html">complex()</a></td><td><a href="https://www.runoob.com/python/python-func-hasattr.html">hasattr()</a></td><td><a href="https://www.runoob.com/python3/python3-func-number-max.html">max()</a></td><td><a href="https://www.runoob.com/python3/python3-func-number-round.html">round()</a></td><td></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-delattr.html">delattr()</a></td><td><a href="https://www.runoob.com/python/python-func-hash.html">hash()</a></td><td><a href="https://www.runoob.com/python/python-func-memoryview.html">memoryview()</a></td><td><a href="https://www.runoob.com/python/python-func-set.html">set()</a></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;第一部分详见上文。。。&lt;/strong&gt;&lt;a href=&quot;/bione/posts/46956.html&quot;&gt;内置函数(一)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bytes()[^1]        #返回新的bytes对象，是一个0&amp;lt;= x &amp;lt</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门学习收录</title>
    <link href="https://bingeone.github.io/bione/posts/974.html"/>
    <id>https://bingeone.github.io/bione/posts/974.html</id>
    <published>2021-10-23T14:13:15.308Z</published>
    <updated>2021-10-23T14:48:41.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h3><ul><li>cursor: hand和cursor:pointer的区别</li></ul><blockquote><p>cursor:hand 与 cursor:pointer 的效果是一样的，都像光标指向链接一样，光标变成手行。cursor:hand ：IE完全支持。但是在firefox是不支持的，没有效果。<br>cursor:pointer ：是CSS2.0的标准。所以firefox是支持的，但是IE5.0既之前版本不支持。IE6开始支持。 </p></blockquote><ul><li>background-size: length/percentage/cover/contain  属性规定背景图像的尺寸</li></ul><blockquote><p>background-size：100%;总是X轴100%铺满整个容器，Y轴可能被裁剪会出现空白填不满部分，图片不变形。<br>background-size：100% 100%;图片不保持比例放大或缩小使X轴与Y轴都铺满整个容器，图片可能会变形。<br>background-size：cover;图片保持比例放大或缩小使X轴与Y轴都铺满整个容器，但图片超出容器部分会被裁剪掉，图片不变形。<br>background-size：contain;图片保持比例放大或缩小填充容器，若不能完整填充容器，X轴或Y轴都有可能出现白边，图片不变形。</p></blockquote><ul><li>perspective 属性定义 3D 元素距视图的距离,以像素计</li></ul><h4 id="文本设置"><a href="#文本设置" class="headerlink" title="文本设置"></a>文本设置</h4><ul><li>font-ice：字号参数</li><li>font-style：字体格式</li><li>font-weight：字体粗细</li><li>颜色属性color</li></ul><h4 id="超链接设置"><a href="#超链接设置" class="headerlink" title="超链接设置"></a>超链接设置</h4><ul><li>text_decoration：作用改变浏览器显示文字链接时的下划线（参数）<ul><li>underline：为文字加下画线</li><li>overline：为文字加上画线</li><li>line-through：为文字加删除线</li><li>blink：是文字闪烁</li><li>none：不显示任何效果</li></ul></li></ul><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>background color：参数</li><li>background image：url（背景图片存放路径）</li><li>background repeat：参数（图片重复）<ul><li>now repeat：不重复平铺背景图片</li><li>repeat-x: 使图片只在水平方向上平铺</li><li>repeat-y: 使图片只在垂直方向上平铺</li></ul></li><li>background-attachment：参数（图片固定）<ul><li>filed：网页滚动，图片相对窗口固定不动</li><li>scroll：网页滚动，图片随窗口滚动</li></ul></li></ul><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><ul><li>word-spacing: 单词间距</li><li>letter-spacing：字母间距</li><li>text-align：参数（文本对齐）<ul><li>left：左对齐</li><li>right：右对齐</li><li>center：居中对齐</li><li>justify：相对左右对齐</li></ul></li><li>vertical-align：参数（垂直对齐）<ul><li>top：顶对齐</li><li>bottom：底对齐</li><li>text-top：相对文本顶对齐</li><li>text-bottom：相对文本底对齐</li><li>baseline：基准线对齐</li><li>middle：中心对齐</li><li>sub：以下标的形式显示</li><li>super：以上标的形式显示</li></ul></li><li>text-indent：文本缩进（12px相当一个文字距离）</li><li>white-space：参数（空格）<ul><li>normal：正常</li><li>pre：保留</li><li>nowrap：不换行</li></ul></li><li>display：参数（显示样式）<ul><li>block：块级元素，在对象前后都换行</li><li>inline：在对象前后都不换行</li><li>list-item：在对象前后都换行，增加项目符号</li><li>none：无显示</li></ul></li></ul><h4 id="方框"><a href="#方框" class="headerlink" title="方框"></a>方框</h4><ul><li>height：高度</li><li>width：kuandu</li><li>padding：内边距</li><li>margin：外边距</li><li>float：浮动（可以让块级元素在一行中排列）</li><li>clear：清除浮动</li></ul><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><ul><li>border style：参数（边框样式）<ul><li>none：无边框</li><li>dotted：边框为点样式</li><li>dashed：边框为长短线</li><li>solid：边框为实线</li><li>double：边框为双线</li></ul></li><li>border width：宽度</li><li>border color：颜色</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>list-style-type：列表样式（不同浏览器的列表符不同，显示会出错，一般以图片显示）</li></ul><h4 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h4><ul><li>cursor：鼠标形状参数<ul><li>style=“cursor：hand” 手形</li><li>style=“cursor：help” 问号形</li></ul></li></ul><h3 id="CSS好用工具"><a href="#CSS好用工具" class="headerlink" title="CSS好用工具"></a>CSS好用工具</h3><ul><li><strong>动效</strong></li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://cubic-bezier.com/">cubic-bezier—响应时间曲线</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="http://michalsnik.github.io/aos/">动效进场</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://animate.style/">animate.style—动画</a></button></p><ul><li>背景形状</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://css-tricks.com/the-shapes-of-css/">css-tricks—形状</a></button></p><ul><li>背景颜色</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://cssgradient.io/">cssgradient—颜色</a></button></p><ul><li>CSS和html格式校对</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="http://jigsaw.w3.org/css-validator/#validate_by_upload">css-validator</a></button></p><ul><li>html中特殊符号</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="http://jigsaw.w3.org/css-validator/#validate_by_upload">charref</a></button></p><ul><li>图片尺寸修改生成器</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://cloudconvert.com/jpeg-to-webp">webp网页图片修改</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://www.responsivebreakpoints.com/">Image Breakpoints Generator </a></button></p><ul><li>矢量图标</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.3">阿里矢量图标</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://icons.getbootstrap.com/">Bootstrap图标</a></button></p><h3 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h3><ul><li>表单</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://ogp.me/">开放图谱协议</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://getbootstrap.com/">Bootstrap</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://formspree.io/">Fromspree</a></button></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CSS基础&quot;&gt;&lt;a href=&quot;#CSS基础&quot; class=&quot;headerlink&quot; title=&quot;CSS基础&quot;&gt;&lt;/a&gt;CSS基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cursor: hand和cursor:pointer的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquot</summary>
      
    
    
    
    <category term="CSS" scheme="https://bingeone.github.io/bione/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://bingeone.github.io/bione/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>vscode基础使用文档</title>
    <link href="https://bingeone.github.io/bione/posts/43791.html"/>
    <id>https://bingeone.github.io/bione/posts/43791.html</id>
    <published>2021-10-19T15:11:57.000Z</published>
    <updated>2021-10-24T14:24:44.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vs-code-快捷键详述"><a href="#Vs-code-快捷键详述" class="headerlink" title="Vs code 快捷键详述"></a>Vs code 快捷键详述</h3><p>1、注释：</p><p>　　a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/</p><p>　　b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</p><p>　　c) 多行注释：[alt+shift+A]</p><p>　　d) 多行注释：/**</p><p>2、移动行：alt+up/down</p><p>3、显示/隐藏左侧目录栏 ctrl + b</p><p>4、复制当前行：shift + alt +up/down</p><p>5、删除当前行：shift + ctrl + k</p><p>6、控制台终端显示与隐藏：ctrl + ~</p><p>7、查找文件/安装vs code 插件地址：ctrl + p</p><p>8、代码格式化：shift + alt +f</p><p>9、新建一个窗口: ctrl + shift + n</p><p>10、行增加缩进: ctrl + [</p><p>11、行减少缩进: ctrl + ]</p><p>12、裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</p><p>13、字体放大/缩小: ctrl + ( + 或 - )</p><p>14、拆分编辑器 :ctrl + 1/2/3</p><p>15、切换窗口:  ctrl + shift + left/right</p><p>16、关闭编辑器窗口:  ctrl + w</p><p>17、关闭所有窗口 : ctrl + k + w</p><p>18、切换全屏 :F11</p><p>19、自动换行:  alt + z</p><p>20、显示git:   ctrl + shift + g</p><p>21、全局查找文件：ctrl + p</p><p>22、显示相关插件的命令(如：git log)：ctrl + shift + p</p><p>23、选中文字：shift + left / right / up / down</p><p>24、折叠代码： ctrl + k + 0-9 (0是完全折叠)</p><p>25、展开代码： ctrl + k + j (完全展开代码)</p><p>26、删除行 ： ctrl + shift + k</p><p>27、快速切换主题：ctrl + k / ctrl + t</p><p>28、快速回到顶部 ： ctrl + home</p><p>29、快速回到底部 : ctrl + end</p><p>30、格式化选定代码 ：ctrl + k / ctrl +f</p><p>31、选中代码 ： shift + 鼠标左键</p><p>32、多行同时添加内容（光标） ：ctrl + alt + up/down</p><p>33、全局替换：ctrl + shift + h</p><p>34、当前文件替换：ctrl + h</p><p>35、打开最近打开的文件：ctrl + r</p><p>36、打开新的命令窗：ctrl + shift + c</p><p>37、自动生成闭合标签：VsCode内置了Emmet语法,在后缀为.html/.css中输入缩写后按Tab键即会自动生成相应代码</p><h3 id="Vs-code-高频快捷键"><a href="#Vs-code-高频快捷键" class="headerlink" title="Vs code 高频快捷键"></a>Vs code 高频快捷键</h3><table><thead><tr><th>功能</th><th>快捷键</th><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>文件检索</td><td>ctrl + p</td><td>关闭文件</td><td>ctrl + w</td></tr><tr><td>打开命令面板</td><td>ctrl + shift + p</td><td>当前行上下移动</td><td>alt+Up/Down</td></tr><tr><td>打开终端</td><td>ctrl + `</td><td>变量名统一命名</td><td>F2</td></tr><tr><td>关闭侧边栏</td><td>ctrl + B</td><td>转到变量定义处</td><td>F12</td></tr><tr><td>复制文本</td><td>ctrl + c</td><td>保存文本</td><td>ctrl + s</td></tr><tr><td>粘贴文本</td><td>ctrl + v</td><td>撤销操作</td><td>ctrl + z</td></tr><tr><td>删除当前行</td><td>ctrl + d（自定义）</td><td>代码格式化</td><td>ctrl +shift + i（Format Document)</td></tr><tr><td>在当前行向下插入一行</td><td>ctrl + enter</td><td>光标移到行首/行尾</td><td>home/end</td></tr><tr><td>在当前行向上插入一行</td><td>ctrl + shift + enter</td><td>根据单词快速移动光标</td><td>ctrl + 左右方向键</td></tr><tr><td>查找/替换</td><td>ctrl+F/ctrl +H</td><td>单词小写转大写</td><td>shift + q（自定义）</td></tr><tr><td>全屏</td><td>F11</td><td>单词大写转小写</td><td>shift + w（自定义）</td></tr><tr><td>空间大小缩放</td><td>ctrl + +/-</td><td>编辑区大小缩放</td><td>ctrl + 鼠标滚轮</td></tr></tbody></table><h3 id="Vs-code拓展插件"><a href="#Vs-code拓展插件" class="headerlink" title="Vs code拓展插件"></a>Vs code拓展插件</h3><h4 id="HTMl必备"><a href="#HTMl必备" class="headerlink" title="HTMl必备"></a>HTMl必备</h4><ul><li><p>Chinese (Simplified) Language Pack for Visual Studio Code    （汉化）</p></li><li><p>open in browser                    （打开浏览器，快捷键“Alt+B”）</p></li><li><p>vscode-icons                    （编辑器的文件图标 =&gt; 好看）</p></li><li><p>Auto Rename Tag                    （自动匹配HMTL标签）</p></li><li><p>Bracket Pair Colorizer            （彩色的括号）</p></li><li><p>Highlight Matching Tag            （高亮对应HTML标签 &amp; 表示对应括号，高效）</p></li><li><p>stylelint（css/sass/less语法检查）</p></li><li><p>Path Intellisense（智能路径提示）</p></li><li><p>HTML Snippets    （智能填充）</p></li><li><p>TODO Hightlight  （注释语法高亮）</p></li><li><p>Prettier-Code formatter   （代码格式化）</p></li></ul><h4 id="CSS必备"><a href="#CSS必备" class="headerlink" title="CSS必备"></a>CSS必备</h4><ul><li>CSS Peek    (智能提取)</li><li>HTML CSS Support</li></ul><h4 id="Python必备"><a href="#Python必备" class="headerlink" title="Python必备"></a>Python必备</h4><ul><li>Python</li><li>Pylance</li><li>Jupyter</li></ul><h4 id="C-C-必备"><a href="#C-C-必备" class="headerlink" title="C/C++必备"></a>C/C++必备</h4><ul><li>C/C++</li><li>CMake</li><li>CMake Tools</li></ul><h4 id="Vue必备"><a href="#Vue必备" class="headerlink" title="Vue必备"></a>Vue必备</h4><ul><li><p>Vetur（Vue必备，提示的嘛，方便）</p></li><li><p>Live Server（代码保存后，浏览器自动更新）</p></li></ul><h4 id="React必备"><a href="#React必备" class="headerlink" title="React必备"></a>React必备</h4><ul><li>Prettier（格式化插件，比Beautify好）</li></ul><h4 id="Egg框架必备"><a href="#Egg框架必备" class="headerlink" title="Egg框架必备"></a>Egg框架必备</h4><ul><li>Egg.js dev tools（NodeJs中 EggJs框架，方便）</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>SQLite </li><li>MySQL</li></ul><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><ul><li><p>carbon-now-sh（截获代码为PNG，Ctrl+Shift+P =&gt; Carbon）</p></li><li><p>background（界面右下角有个小人）</p></li><li><p>Code Runner   (运行代码)</p></li><li><p>Git Blame   (git管理工具)</p></li><li><p>Vscode Google Translate (谷歌翻译)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vs-code-快捷键详述&quot;&gt;&lt;a href=&quot;#Vs-code-快捷键详述&quot; class=&quot;headerlink&quot; title=&quot;Vs code 快捷键详述&quot;&gt;&lt;/a&gt;Vs code 快捷键详述&lt;/h3&gt;&lt;p&gt;1、注释：&lt;/p&gt;
&lt;p&gt;　　a) 单行注释：[ct</summary>
      
    
    
    
    <category term="开发工具" scheme="https://bingeone.github.io/bione/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="vscode" scheme="https://bingeone.github.io/bione/tags/vscode/"/>
    
    <category term="工具" scheme="https://bingeone.github.io/bione/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
