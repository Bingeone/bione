<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bingeone博客园</title>
  
  <subtitle>博客</subtitle>
  <link href="https://bingeone.github.io/bione/atom.xml" rel="self"/>
  
  <link href="https://bingeone.github.io/bione/"/>
  <updated>2021-10-25T10:44:52.943Z</updated>
  <id>https://bingeone.github.io/bione/</id>
  
  <author>
    <name>Bingeone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql关系数据库知识点精简版</title>
    <link href="https://bingeone.github.io/bione/posts/22842.html"/>
    <id>https://bingeone.github.io/bione/posts/22842.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-25T10:44:52.943Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 是最流行的关系型数据库管理系统，web应用开发常用的数据库之一，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。</p><h3 id="mysql数据库特点"><a href="#mysql数据库特点" class="headerlink" title="mysql数据库特点"></a>mysql数据库特点</h3><ul><li>是开源的，目前隶属于 Oracle 旗下产品。</li><li>支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>使用标准的 SQL 数据语言形式。</li><li>可以运行于多个系统上，并且支持多种语言。</li><li>对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。</li><li>支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li> 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>创建并使用数据库</li></ul><blockquote><p>create datebase ‘mydatebase’;</p><p>use ‘mydatebase’;</p></blockquote><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">create table `students`(</span><br><span class="line">`id` int not null auto_increment primary key,</span><br><span class="line"> `name` varchar(200) not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 定义联合主键</span><br><span class="line">CREATE TABLE tb_enp4</span><br><span class="line">(</span><br><span class="line">    name  varchar(25),</span><br><span class="line">    deptld  int(11),</span><br><span class="line">    salary  float,</span><br><span class="line">    PRIMARY KEY(name,deptld)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 较完整形式</span><br><span class="line">create table students(</span><br><span class="line">id int unsigned not null auto_increment primary key,</span><br><span class="line">name varchar(30),</span><br><span class="line">age tinyint unsigned default 0,</span><br><span class="line">high decimal(5,2),</span><br><span class="line">gender enum(&quot;男&quot;,&quot;女&quot;),</span><br><span class="line">cls_id int unsigned</span><br><span class="line">);</span><br><span class="line">sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVSION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>数值类型</li></ul><blockquote><p>值数据类型(integer、smallint、decimal 和 numeric)，以及近似数值数据类型(float、real 和 double precision)</p></blockquote><ul><li>日期和时间类型</li></ul><blockquote><p>表示时间值的日期和时间类型为datetime(YYYY-MM-DD HH:MM:SS)、date(YYYY-MM-DD)、timestamp(YYYYMMDD HHMMSS)、time(HH:MM:SS)和year(YYYY)。</p></blockquote><ul><li>字符串类型</li></ul><br><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>char</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255 bytes</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>tinytext</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><br><blockquote><p>常见类型</p><p>int    char    varchar    datetime</p></blockquote><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全部插入（先查看desc students, 表的数据结构）</span><br><span class="line">insert into students values (0,&#x27;小乔&#x27;,18,160.00,02);</span><br><span class="line"></span><br><span class="line"># 部分插入或全部</span><br><span class="line">INSERT INTO `students` (`NAME`,`NICKNAME`,`SEX`) VALUES(&#x27;小张&#x27;,&#x27;张哥&#x27;,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><ul><li>普通查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 字段查询</span><br><span class="line">SELECT name,nickname FROM students;</span><br><span class="line"></span><br><span class="line"># id 倒叙查询</span><br><span class="line">SELECT id,name,nickname FROM students WHERE sex=&#x27;男&#x27; ORDER BY id DESC;</span><br><span class="line"></span><br><span class="line"># 按数据条数跳转查询: (0,2)表示从0开始2为步数跳转</span><br><span class="line">SELECT id,name,nickname FROM students WHERE sex=&#x27;男&#x27; ORDER BY id DESC LIMIT 0,2;</span><br><span class="line"></span><br><span class="line"># 查看表的结构，名字，字段和字段属性</span><br><span class="line">desc students(表名);</span><br><span class="line"></span><br><span class="line"># 查看表内容</span><br><span class="line">select * from students;</span><br><span class="line"></span><br><span class="line"># 查看表的完整属性</span><br><span class="line">show create table studebts</span><br><span class="line"></span><br><span class="line"># 查询字段</span><br><span class="line">select * from students where id&gt;3;/* 满足条件的所有字段 */</span><br><span class="line">select name,gender from students;/* 指定的字段 */</span><br><span class="line"></span><br><span class="line"># 查看运行时间</span><br><span class="line">show profiles;</span><br></pre></td></tr></table></figure><ul><li>多条件+逻辑符号查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"># and 同时满足条件</span><br><span class="line">select */字段名(表示所有字段) from 表名 where age&gt;18(条件)and age&lt;30;</span><br><span class="line"> </span><br><span class="line">#or 满足一种条件</span><br><span class="line">select */字段名(表示所有字段) from 表名 where age&gt;18(条件)or gender=2;</span><br><span class="line"> </span><br><span class="line"># not </span><br><span class="line">select */字段名(表示所有字段) from 表名 not(where age&gt;18(条件)or gender=2);同时否定两个条件</span><br><span class="line">select */字段名(表示所有字段) from 表名 notwhere age&gt;18(条件)or gender=2;否定not</span><br><span class="line">后面的条件。</span><br><span class="line"> </span><br><span class="line"># like 模糊查询</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;%小%&quot;；能查询名字中包含小的。</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;小%&quot; %代表字符或没有，能查询名字以小开头的。</span><br><span class="line"> </span><br><span class="line"># 查询名字是两个字</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;__&quot;(两个下划线);</span><br><span class="line">查询名字至少是两个字</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name like &quot;__%&quot;;</span><br><span class="line"> </span><br><span class="line"># rlike后面接正则表达式</span><br><span class="line"># 查询以周开始的姓名</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name rlike &quot;^周.*&quot;;</span><br><span class="line"># 查询以周开始以伦结束的姓名</span><br><span class="line">select */name/字段名(表示所有字段) from 表名 where name rlike &quot;^周.*伦s&quot;;</span><br><span class="line"> </span><br><span class="line"># in 查询年龄为12,18,30的</span><br><span class="line">select */字段名(表示所有字段) from 表名 not where age = 18 or age=22 or age=30;</span><br><span class="line">select */字段名(表示所有字段) from 表名 not where age in (18,22,30);</span><br><span class="line"></span><br><span class="line"># not in 查询年龄不是12,18,30的</span><br><span class="line">select */字段名(表示所有字段) from 表名 not where age not in (18,22,30);</span><br><span class="line"></span><br><span class="line"># 查询范围之内；</span><br><span class="line"># between...and..</span><br><span class="line">select */字段名(表示所有字段) from 表名  where age between 18 and 35;</span><br><span class="line"># 不在范围内</span><br><span class="line">select */字段名(表示所有字段) from 表名  where age not between 18 and 35;</span><br><span class="line">select */字段名(表示所有字段) from 表名  where not age not between 18 and 35;</span><br><span class="line"> </span><br><span class="line"># 空值判断</span><br><span class="line">select */字段名(表示所有字段) from 表名  where 字段名 is null;</span><br><span class="line"># 不空</span><br><span class="line">select */字段名(表示所有字段) from 表名  where 字段名 is not null;</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line"># 按照年龄18到35的男性排序,默认从小到大</span><br><span class="line">select */字段名(表示所有字段) from 表名  where （age between 18 and 35）and gender=1 order by age;</span><br><span class="line">select */字段名(表示所有字段) from 表名  where （age between 18 and 35）and gender=1 order by age asc;</span><br><span class="line"># 从大到小,支持按照多字段排序。</span><br><span class="line">select */字段名(表示所有字段) from 表名  where （age between 18 and 35）and gender=1 order by age dasc，id dasc;/*先age后id*/</span><br><span class="line"> </span><br><span class="line"># 聚合函数</span><br><span class="line"># count总数</span><br><span class="line">select count(*) as 男性人数（显示注解）from students where gender=1(条件);</span><br><span class="line"># 最大值max,最小值min，求和sum，求平均值avg</span><br><span class="line">select max/min/(age) from students;</span><br><span class="line"># 在students里女性的最大身高</span><br><span class="line">select max/sum(height) from students where gender=2;</span><br><span class="line"># 求平均值</span><br><span class="line">select sum(height)/count(*) from students where gender=2</span><br><span class="line"> </span><br><span class="line"># 保留几位小数round,还有四舍五入的作用</span><br><span class="line">select round(sum(height)/count(*),2(两位小数)) from students where gender=2;</span><br><span class="line"> </span><br><span class="line"># 分组</span><br><span class="line"># group by</span><br><span class="line">select gender(分组后的同一属性) from students group by gender;</span><br><span class="line">select gender，group_concat(name) from students group by gender; /* 可以显示分组后每一组里人的姓名 */</span><br><span class="line"></span><br><span class="line"># 分组后每一组的人数,count（*）是对分组后的数据进行聚合</span><br><span class="line">select gender，count(*) from students group by gender;</span><br><span class="line">select gender，max(age) from students group by gender;每组的最大年龄</span><br><span class="line">select gender，avg(age) from students group by gender;</span><br><span class="line"># 分组后男性的人数</span><br><span class="line">select gender，count(*) from students where gender=1 group by gender;</span><br><span class="line"></span><br><span class="line"># 分组后的跟多操作</span><br><span class="line"># 分组后查询男性的名字，id和年龄，中间添加空格。</span><br><span class="line">select gender，group_concat(name,&#x27; &#x27;,id,&#x27; &#x27;,gae) from students where gender=1 group by gender;</span><br><span class="line"> </span><br><span class="line"># having对结果的判断，where对原始数据的判断所以写的位置不同。</span><br><span class="line">select gender，group_concat(name），avg(age) from students where gender=1 group by gender having avg(age)&gt;30;</span><br><span class="line">select gender，group_concat(name） from students where group by gender having avg(age)&gt;30</span><br><span class="line"> </span><br><span class="line"># 分页</span><br><span class="line">select * from students where 条件 limit 2;只显示两行；</span><br><span class="line">select * from students where 条件 limit 5（开始位置，根据列表，这是第六个），2（两行）;</span><br><span class="line"># 分页显示公式</span><br><span class="line">select * from students where 条件 limit （第m页-1）*n，n;不能直接输入.</span><br><span class="line">                           </span><br><span class="line"># 连接查询 </span><br><span class="line"># inner join ...on on取交集，两个表的匹配列的交集</span><br><span class="line">select *(表示显示所有字段) from students inner join calsses on students.cla_id=classes.id; /* 通过students表里的cla_id和classes表里的id字段匹配连接 */</span><br><span class="line">select s.name,c.name from students as s inner join calsses as c on s.cla_id=c.id; /* 只显示students表里的姓名和classes表里的班级。*/</span><br><span class="line">                           </span><br><span class="line"># 例班级名字在前，学生所有信息在后，按班级排列后，按照id排列</span><br><span class="line">select c.name，s.* from students as s inner join calsses as c on s.cla_id=c.id order by c.name,s.id;</span><br><span class="line">                          </span><br><span class="line"># 左连接 left join on 两个表匹配以后把左边表的信息全部显示，右边表对不上的为空</span><br><span class="line">select c.name，s.* from students as s left join calsses as c on s.cla_id=c.id order by c.name,s.id;</span><br><span class="line">                           </span><br><span class="line"># 上边的语句可以当做新的表来查询</span><br><span class="line">select c.name，s.* from students as s left join calsses as c on s.cla_id=c.id order by c.name,s.id having c.id si null; /*查询两个表内无法匹配的内容。*/</span><br><span class="line">                           </span><br><span class="line"># 自关联 同一个表里的不同列有关联，例如省市县</span><br><span class="line">select *(显示内容) from m（表1）as n inne join m（表1） as s（第二个名字，一个表就可以相当于两个表用。） on n.列=s.列 having（条件） n.列=??;</span><br><span class="line"></span><br><span class="line"># 把一个sql语句当做另一个sql语句的条件</span><br><span class="line">select * from students where height=(select max(height);</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 按特定条件修改字段内容</span><br><span class="line">UPDATE students SET sex=&#x27;女&#x27; WHERE id&lt;=2;</span><br><span class="line"></span><br><span class="line"># 添加字段</span><br><span class="line">alter table students(表名) add 字段名 数据类型;</span><br><span class="line"></span><br><span class="line"># 修改字段的数据类型</span><br><span class="line">alter table students modify 字段名 数据类型;</span><br><span class="line"></span><br><span class="line"># 修改字段的名称</span><br><span class="line">alter table students change 字段名 新名字 数据类型;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 按条件删除数据</span><br><span class="line">delete from students where name=**; </span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line">alter table students dorp 字段名;</span><br><span class="line"></span><br><span class="line"># 删除表格</span><br><span class="line">dorp table students(表名)</span><br><span class="line"></span><br><span class="line"># 删除视图</span><br><span class="line">dorp view 视图名称</span><br><span class="line"></span><br><span class="line"># 逻辑删除</span><br><span class="line"># 逻辑删除增加新行进行删除标记</span><br><span class="line">alter table students add is_delete bit default 0;</span><br><span class="line">update students set is_delete = 1 where id=**;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 建立视图 用以方便查询</span><br><span class="line">create view 视图名称 as select 语句</span><br><span class="line"> </span><br><span class="line"># 查看视图</span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"># 使用视图</span><br><span class="line">select * from 视图名称</span><br><span class="line"></span><br><span class="line"># 删除视图</span><br><span class="line">dorp view 视图名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysql详细使用参见该<a href="https://www.runoob.com/mysql/mysql-data-types.html">教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MySQL 是最流行的关系型数据库管理系统，web应用开发常用的数据库之一，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。&lt;/p&gt;
&lt;h3 id=&quot;mysql数据库特点&quot;&gt;&lt;a href=&quot;#mysql数据库特点&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="数据库" scheme="https://bingeone.github.io/bione/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mysql" scheme="https://bingeone.github.io/bione/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python虚拟环境的搭建方式</title>
    <link href="https://bingeone.github.io/bione/posts/55879.html"/>
    <id>https://bingeone.github.io/bione/posts/55879.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-25T10:44:52.943Z</updated>
    
    <content type="html"><![CDATA[<p>在Python搭建项目常常会在一个封闭而独立的虚拟环境中操作，以便于后续项目的打包迁移到服务器等其它设备中加载运行。当前Python虚拟环境搭建常用工具有<strong>virtualenv</strong>/ <strong>venv</strong>/<strong>pipenv</strong>。</p><blockquote><p>virtualenv和venv使用方式相似，依赖模块环境在requirements.txt，需要手动更新内容</p><p>pipenv搭建环境会生成Pipfile和Pipfile.lock 两个特殊文件，项目所有模块环境包信息都会自动实时更新，项目迁移只需要将项目源码和这两个文件，在新的环境中（pipenv install –dev）一键安装其中的依赖包</p></blockquote><h3 id="virtualenv或venv"><a href="#virtualenv或venv" class="headerlink" title="virtualenv或venv"></a>virtualenv或venv</h3><blockquote><p>演示在Linux（ubuntu 20.04)环境下virtualenv和venv安装</p></blockquote><ul><li>安装virtualenv或venv模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line">pip3 install virtualenv<span class="comment"># 可以使用对python版本的pip进行安装 如</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># venv [linux(Ubuntu)]</span></span><br><span class="line">sudo apt install python3.9-venv<span class="comment"># 此处python最好指定搭建项目使用python的版本来安装</span></span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="comment">#在python3.3版本以后，venv作为标准模块配套在python环境中，无需单独安装</span></span><br></pre></td></tr></table></figure><ul><li>创建项目文件夹,并进入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir my_project</span><br><span class="line"><span class="built_in">cd</span> my_project</span><br></pre></td></tr></table></figure><ul><li>创建python虚拟环境文件夹为：my_env</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line">virtualenv --no-site-packages my_env</span><br><span class="line"></span><br><span class="line"><span class="comment"># venv</span></span><br><span class="line">python3 -m venv my_env</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">py -3 -m venv my_env</span><br></pre></td></tr></table></figure><blockquote><p>–no-site-packages参数说明：忽略配置系统中python环境所有第三方包，创建初始化pyhton环境</p><p>文件my_env：包含独立于系统外的pyhton文件</p></blockquote><ul><li>激活虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># virtualenv</span></span><br><span class="line"><span class="comment"># venv</span></span><br><span class="line"><span class="built_in">source</span> my_env/bin/activate<span class="comment"># 两者命令相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows</span></span><br><span class="line">my_env\Scripts\activate.bat<span class="comment"># windows 命令使用反斜杠\</span></span><br></pre></td></tr></table></figure><blockquote><p>激活后，命令行前缀会加上“(my_env)”虚拟环境文件夹名，与pipenv有点不同，后者添加当前文件夹名</p></blockquote><ul><li>安装第三方包及运行文件方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装模块环境</span></span><br><span class="line">pip install requests<span class="comment"># 跟正常系统中安装方式一样，只不过安装包配置在当前虚拟环境中</span></span><br><span class="line"><span class="comment"># 运行文件</span></span><br><span class="line">python demo_01.py</span><br></pre></td></tr></table></figure><blockquote><p>pip常用命令：</p><p>(前面加上 python -m 指定特定python版本)</p><p>python -m pip install 包名 -i 代理url</p><p>python -m pip uninstall 包名</p><p>pip show 包名                                        将显示有关特定包的信息</p><p>pip list                                                     将显示虚拟环境中安装的所有软件包</p><p>pip freeze &gt; requirements.txt        将生成一个类似的已安装包列表，txt格式文件</p><p>python -m pip install -r requirements.txt    安装所有必需的包</p></blockquote><ul><li>退出虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3/tutorial/venv.html">详细教程参考官网</a></p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><blockquote><p>将 pip 和 virtualenv 功能结合，更加符合项目迁移快速部署的pipenv，是当下主流推荐使用搭建pyhton虚拟环境的不二选择。</p></blockquote><ul><li>安装pipenv（前提安装pip ）</li></ul><p>sudo apt install python3-pip    安装pip，若安装忽略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install pipenv<span class="comment"># 正常安装</span></span><br><span class="line"></span><br><span class="line">sudo pip install --user pipenv<span class="comment"># --user可以单独给当前用户安装，但需要额外配置环境</span></span><br><span class="line"></span><br><span class="line">sudo -H pip install -U pipenv<span class="comment"># 全局安装 pipenv</span></span><br></pre></td></tr></table></figure><ul><li>查看安装环境配置是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ pipenv --version<span class="comment"># 显示版本号成功配置</span></span><br><span class="line">pipenv, version 2021.5.29</span><br></pre></td></tr></table></figure><p>若安装配置环境失败，<a href="https://blog.csdn.net/ksws0292756/article/details/79121558">可以参考此博文详细说明</a></p><ul><li>创建项目文件，并进入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir my_project</span><br><span class="line"><span class="built_in">cd</span> my_project</span><br></pre></td></tr></table></figure><ul><li>创建虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install  <span class="comment"># 会生成Pipfile 和 Pipfile.lock 两个项目依赖环境包</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/13/VCmvUnbdKsFMihB.png"></p><ul><li>下载第三方包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install pillow <span class="comment"># 模块pillow</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/13/DqXHLEx2N4negv8.png"></p><ul><li>生成Pipfile 和 Pipfile.lock项目文件</li></ul><blockquote><p>Pipfile:    列出了 pillow包的信息和 Python 版本信息</p><p>Pipfile.lock ： 保存了pillow包的哈希值</p><p>注：迁移项目时，在这两个文件所在文件中，执行pipenv install，即可安装开发所需的第三包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pipfile文件</span></span><br><span class="line">[[<span class="built_in">source</span>]]</span><br><span class="line"><span class="comment"># pipenv 下载第三方包地址，可以更换成国内pip镜像源，如阿里等</span></span><br><span class="line">url = <span class="string">&quot;https://mirrors.aliyun.com/pypi/simple/&quot;</span></span><br><span class="line">verify_ssl = <span class="literal">true</span></span><br><span class="line">name = <span class="string">&quot;pypi&quot;</span></span><br><span class="line"></span><br><span class="line">[packages]<span class="comment"># 第三方包信息</span></span><br><span class="line">pillow = <span class="string">&quot;*&quot;</span><span class="comment"># 表示最新版本</span></span><br><span class="line"></span><br><span class="line">[dev-packages]<span class="comment"># pipenv install pillow --dev这种方式安装包会在此处显示</span></span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">&quot;3.9&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pipfile.lock文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hash&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;sha256&quot;</span>: <span class="string">&quot;50541ebd1e358e19fd1abf7ff833c7dbd5e3484685f8b85c606d51ffe7892041&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;pipfile-spec&quot;</span>: 6,</span><br><span class="line">        <span class="string">&quot;requires&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;python_version&quot;</span>: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;sources&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;pypi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://mirrors.aliyun.com/pypi/simple/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;verify_ssl&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;pillow&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hashes&quot;</span>: [  <span class="string">&quot;sha256:0412516dcc9de9b0a1e0ae25a280015809de8270f134cc2c1e32c4eeb397cf30&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;index&quot;</span>: <span class="string">&quot;pypi&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;==8.3.2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;develop&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pipenv常用命令</li></ul><blockquote><p>直接在命令行中输入 pipenv 可查看它的子命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建指定python版本的虚拟环境</span></span><br><span class="line">pipenv --python 3.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活项目虚拟环境</span></span><br><span class="line">pipenv shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line"><span class="built_in">exit</span>  或 deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装第三方包</span></span><br><span class="line">pipenv install xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">pipenv update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除包</span></span><br><span class="line">pipenv uninstall xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有包</span></span><br><span class="line">pipenv uninstall --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除项目配置的虚拟环境</span></span><br><span class="line">pipenv --rm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查项目依赖库信息</span></span><br><span class="line">pipenv graph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取虚拟环境的配置路径</span></span><br><span class="line">pipenv --venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前项目路径</span></span><br><span class="line">pipenv --<span class="built_in">where</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行py文件(未激活虚拟环境)</span></span><br><span class="line">pipenv run python xxx.py</span><br></pre></td></tr></table></figure><p><strong>pipenv使用详解参见</strong></p><ul><li><a href="https://pypi.org/project/pipenv/">pipenv官网</a></li><li><a href="https://blog.csdn.net/swinfans/article/details/89305301">Pipenv详解</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Python搭建项目常常会在一个封闭而独立的虚拟环境中操作，以便于后续项目的打包迁移到服务器等其它设备中加载运行。当前Python虚拟环境搭建常用工具有&lt;strong&gt;virtualenv&lt;/strong&gt;/ &lt;strong&gt;venv&lt;/strong&gt;/&lt;strong&gt;p</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="pipenv" scheme="https://bingeone.github.io/bione/tags/pipenv/"/>
    
  </entry>
  
  <entry>
    <title>redis非关系型数据库知识点</title>
    <link href="https://bingeone.github.io/bione/posts/19434.html"/>
    <id>https://bingeone.github.io/bione/posts/19434.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-25T10:46:24.713Z</updated>
    
    <content type="html"><![CDATA[<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库,Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><ul><li>widows下安装</li></ul><blockquote><p><a href="https://github.com/tporadowski/redis/releases">官网下载地址</a>：根据系统选择相应的32位或64位安装包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在命令行cmd中启动redis服务</span></span><br><span class="line">redis-server.exe redis.windows.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现对应的redis运行界面，可以看到运行的端口6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到另一个cmd窗口，运行redis</span></span><br><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置键值对</span></span><br><span class="line"><span class="built_in">set</span> key1 abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取键值对</span></span><br><span class="line">get key1</span><br></pre></td></tr></table></figure><ul><li>ubuntu中安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载redis</span></span><br><span class="line">sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动redis服务</span></span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行redis</span></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>安装详情及Linux中编译安装<a href="https://www.runoob.com/redis/redis-install.html">教程</a></p><h2 id="数据库特点"><a href="#数据库特点" class="headerlink" title="数据库特点"></a>数据库特点</h2><ul><li>支持数据的持久化，可以将内存中的数据保存在磁盘中，重启时再次加载</li><li>支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</li><li>支持数据的备份，即master-slave模式的数据备份</li></ul><blockquote><p>redis                 总共有16个库，0-15<br>select 15        选择15号库，默认0号库<br>key-values      key 同一个库不能重复</p></blockquote><h2 id="redis服务命令操作"><a href="#redis服务命令操作" class="headerlink" title="redis服务命令操作"></a>redis服务命令操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载服务：</span></span><br><span class="line">redis-server --service-uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启服务：</span></span><br><span class="line">redis-server --service-start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务：</span></span><br><span class="line">redis-server --service-stop</span><br></pre></td></tr></table></figure><h2 id="redis中key的类型"><a href="#redis中key的类型" class="headerlink" title="redis中key的类型"></a>redis中key的类型</h2><blockquote><p>type key：查看key的类型<br>    none (key不存在)<br>    string (字符串)<br>    list (列表)<br>    set (集合)<br>    zset (有序集)<br>    hash (哈希表)</p></blockquote><ul><li>字符串string</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line">get key</span><br><span class="line">mget key1 key2...获取多个的key1 key2的值</span><br><span class="line">getrange key 0 -1获取从头到尾的value字符串</span><br></pre></td></tr></table></figure><ul><li>hash 哈希</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hmset key file1 value1 file2 value2（多个字符串或值）</span><br><span class="line">hgetall key获取哈希所有key-值</span><br><span class="line">hmget key file1 file2获取key中某个file1 file2的值</span><br><span class="line">hdel key file1删除key中file1的值</span><br><span class="line">hexists key file1查询file1是否在key中</span><br><span class="line">hkeys key获取哈希所有key</span><br><span class="line">hvals key获取哈希所有值</span><br><span class="line">hlen key 获取哈希表中字段的数量</span><br></pre></td></tr></table></figure><ul><li>list 列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 value2 value3设置key的多个值</span><br><span class="line">lpush key value在list前插入值</span><br><span class="line">lrange key 0 -1查看key的所有值</span><br><span class="line">lindex key 1索引key的第二个元素（0为第一个）</span><br><span class="line">llen key获取key长度</span><br><span class="line">lpop keyvalue移除key中的元素</span><br><span class="line">lrem key -2 value移除list中重复的元素（删除两个）</span><br><span class="line">lset keylist集合移除重复的元素</span><br><span class="line">ltrim key 1 -1修剪list的一个个元素</span><br><span class="line">rpop key移除列表最后一个元素</span><br><span class="line">rpoplpush key1 key2将key1最后一个元素移动到key2</span><br><span class="line">lrem key 0 <span class="string">&#x27;del&#x27;</span>删除列表中指定的值</span><br></pre></td></tr></table></figure><ul><li>set 集合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sadd key value1 value2</span><br><span class="line">smembers key</span><br><span class="line">sismember key value 查看value是否在key中</span><br><span class="line">scard key查看集合key的元素个数</span><br><span class="line">srem key value删除集合key中的value</span><br><span class="line">mset key1 value1 key2 value2设置一个或多个 key-value 对</span><br></pre></td></tr></table></figure><ul><li>zset 有序集合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zadd key value1 value2设置有序集合</span><br><span class="line">zrange key 0 -1查询有序集合</span><br><span class="line">zcard key查询集合值的数量</span><br><span class="line">zrangebyscore key -inf +inf查询key有序集合中所有成员（递增）</span><br><span class="line">zrangebyscore key -inf 5000 withscores显示工资 &lt;=5000 的所有成员</span><br><span class="line">zrank key 成员   查询成员的排序</span><br><span class="line">zrem key1 key2移除</span><br><span class="line">zrank salary 0 -1 withscores       递增排列</span><br><span class="line">zrevrank salary 0 -1 withscores递减排序</span><br><span class="line">zscore salary 成员   返回值 注意返回值是字符串</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库,Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、</summary>
      
    
    
    
    <category term="数据库" scheme="https://bingeone.github.io/bione/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://bingeone.github.io/bione/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>内置函数(一)</title>
    <link href="https://bingeone.github.io/bione/posts/46956.html"/>
    <id>https://bingeone.github.io/bione/posts/46956.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-24T15:25:30.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python内置函数-一"><a href="#python内置函数-一" class="headerlink" title="python内置函数(一)"></a>python内置函数(一)</h3><ul><li><p>abs()    #取绝对值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#abs()是python内置函数,而fabs()是math中的一个模块</span></span><br><span class="line"><span class="comment">#fabs() 函数只适用于 float 和 integer 类型，而 abs() 也适用于复数。</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">d = <span class="number">1</span>+<span class="number">1.0j</span></span><br><span class="line">e = <span class="number">3</span>+<span class="number">4.0j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;d的绝对值:&quot;</span>,<span class="built_in">abs</span>(d))<span class="comment">#结果为1.4142135623730951</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e的绝对值:&quot;</span>,math.fabs(e))<span class="comment">#结果会报错TypeError: can&#x27;t convert complex to float</span></span><br></pre></td></tr></table></figure></li><li><p>dict()         #创建一个字典</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>()<span class="comment">#创建字典</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(a=<span class="string">&quot;a&quot;</span>,b=<span class="string">&quot;b&quot;</span>,c=<span class="string">&quot;c&quot;</span>)<span class="comment">#key-alue 传入参数</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>],[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>]))<span class="comment">#映射函数方式创建字典</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&quot;one&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;two&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;three&quot;</span>,<span class="number">3</span>)])<span class="comment">#可迭代对象来构造字典，列表为iterable</span></span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>help ()         #参看对象的帮助信息</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(<span class="string">&#x27;sys&#x27;</span>)             <span class="comment"># 查看 sys 模块的帮助</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(<span class="string">&#x27;str&#x27;</span>)             <span class="comment"># 查看 str 数据类型的帮助</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(a)                 <span class="comment"># 查看列表 list 帮助信息</span></span><br><span class="line">……显示帮助信息……</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">help</span>(a.append)          <span class="comment"># 显示list的append方法的帮助</span></span><br></pre></td></tr></table></figure></li><li><p>min ()       #返回给定参数的最小值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">&quot;min(80, 103, 1440) : &quot;</span>, <span class="built_in">min</span>(<span class="number">80</span>, <span class="number">103</span>, <span class="number">1440</span>))</span><br><span class="line"><span class="built_in">min</span>(<span class="number">80</span>, <span class="number">103</span>, <span class="number">1440</span>) :  <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><p>setattr()    #设置属性值，属性不一定存在</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a,<span class="string">&quot;bar&quot;</span>)<span class="comment">#获取属性bar值</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">setattr</span>(a,<span class="string">&quot;b&quot;</span>,<span class="number">2</span>)<span class="comment">#设置属性b值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>all()      #用于判断给定的可迭代对象iterable中所有元素是否都为True，元素除了是 0、空、None、False 外都算 True。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#iterable 是元组或列表空元组、空列表返回值为True，这里要特别注意。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])<span class="comment"># 列表list，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])<span class="comment"># 列表list，存在一个空的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment"># 列表list，存在一个为0的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>))<span class="comment"># 元组tuple，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;d&#x27;</span>))<span class="comment"># 元组tuple，存在一个空的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))<span class="comment"># 列表list，存在一个为0的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([])<span class="comment"># 空列表</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>(())<span class="comment"># 空元组</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>dir()         #函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>()<span class="comment"># 获取当前模块的属性列表</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>([])<span class="comment"># 参看列表的方法</span></span><br></pre></td></tr></table></figure></li><li><p>hex()      #函数用于将一个指定数字转换为 16 进制数,返回的是一个字符串，以0x开头</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">255</span>)</span><br><span class="line"><span class="string">&#x27;0xff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(-<span class="number">42</span>)</span><br><span class="line"><span class="string">&#x27;-0x2a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">12</span>)</span><br><span class="line"><span class="string">&#x27;0xc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">hex</span>(<span class="number">12</span>))<span class="comment">#查看类型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>next()      #返回迭代器的下一个项目，和生成迭代器的 <strong>iter()</strong> 函数一起使用</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li=[<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">63</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(li)<span class="comment">#首先获得Iterator对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    y =<span class="built_in">next</span>(it,<span class="string">&quot;aa&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> y == <span class="string">&quot;aa&quot;</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line">...</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">63</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">aa</span><br></pre></td></tr></table></figure></li><li><p>slice()      #函数实现切片对象，主要用在切片操作函数里的参数传递</p><p>  slice(start, stop[, step])—step间距</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myslice = <span class="built_in">slice</span>(<span class="number">3</span>)<span class="comment"># 设置截取3个元素的切片</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myslice</span><br><span class="line"><span class="built_in">slice</span>(<span class="literal">None</span>, <span class="number">3</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr[myslice] <span class="comment"># 截取 3 个元素</span></span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;myslice1 = <span class="built_in">slice</span>(<span class="number">0</span>,<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;arr1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">&gt;&gt;&gt;arr1[myslice1]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>any()       #函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])  <span class="comment"># 列表list，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])   <span class="comment"># 列表list，存在一个为空的元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span>])        <span class="comment"># 列表list,元素全为0,&#x27;&#x27;,false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))  <span class="comment"># 元组tuple，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))   <span class="comment"># 元组tuple，存在一个为空的元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span>))        <span class="comment"># 元组tuple，元素全为0,&#x27;&#x27;,false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([]) <span class="comment"># 空列表</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>(()) <span class="comment"># 空元组</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>divmod()      #接受两个非复数类型的数字，返回商和余数的元组</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">7</span>,<span class="number">2</span>)//相当于（a//b,a%b）</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">3</span>,-<span class="number">1.3</span>)</span><br><span class="line">(-<span class="number">3.0</span>, -<span class="number">0.9000000000000001</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">6</span>,-<span class="number">2</span>)</span><br><span class="line">(-<span class="number">3</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>id()       #获取对象的内存地址</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aa=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(aa)</span><br><span class="line"><span class="number">9788608</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bb=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(bb)</span><br><span class="line"><span class="number">9788608</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;whoami&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140185507204528</span></span><br><span class="line"><span class="comment">#-------注意--------</span></span><br><span class="line"><span class="comment">#在对象内存数字类型较小时，对象的内存地址是一样的，一般情况不一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">140185507593328</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1234</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140185507593424</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">140185507593328</span></span><br></pre></td></tr></table></figure></li><li><p>object()      #对象，类默认的对象</p></li><li><p>sorted()      #对可迭代的对象(列表，元组)进行排列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort 和 sorted区别：</span></span><br><span class="line"><span class="comment"># sort 对原来的列表排序操作，sorted 对可迭代对象操作并生成新的列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>([<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>])</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="comment">#----------sorted常用-------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(&#123;<span class="number">1</span>:<span class="string">&quot;d&quot;</span>,<span class="number">2</span>:<span class="string">&quot;b&quot;</span>,<span class="number">3</span>:<span class="string">&quot;c&quot;</span>,<span class="number">4</span>:<span class="string">&quot;a&quot;</span>&#125;)//接受任何的iterable</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result_li=<span class="built_in">sorted</span>(li, key = <span class="keyword">lambda</span> y:y*-<span class="number">1</span>)//将序</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result_li</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(li, reverse = <span class="literal">True</span>)</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(li, reverse = <span class="literal">False</span>)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">#------------实例应用------------</span></span><br><span class="line"><span class="comment"># score降序排列，同条件下对name升序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">38</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">18</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;darl&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">28</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;christ&#x27;</span>, <span class="string">&#x27;score&#x27;</span>:<span class="number">28</span>&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = <span class="built_in">sorted</span>(d1, key = <span class="keyword">lambda</span> x:(-x[<span class="string">&quot;score&quot;</span>],x[<span class="string">&quot;name&quot;</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">38</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;christ&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">28</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;darl&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">28</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">18</span>&#125;]</span><br></pre></td></tr></table></figure></li><li><p>ascii()       #返回表示对象的字符串，对于字符串中的非 ASCII 字符则返回通过 repr()  函数使用 \x, \u 或 \U 编码的字符</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ascii</span>(<span class="string">&#x27;whoami&#x27;</span>)//与<span class="built_in">repr</span>()用法相似</span><br><span class="line"><span class="string">&quot;&#x27;whoami&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">repr</span>(<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;#&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>enumerate()     #用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------列出数据的下标和它本身--------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;Spring&#x27;</span>,<span class="string">&#x27;Summer&#x27;</span>,<span class="string">&#x27;Fall&#x27;</span>,<span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(li))</span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">enumerate</span>(li,start=<span class="number">2</span>))</span><br><span class="line">[(<span class="number">2</span>, <span class="string">&#x27;Spring&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;Summer&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;Fall&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;Winter&#x27;</span>)]</span><br><span class="line"><span class="comment">#---------在for中的应用---------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>,<span class="string">&#x27;four&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> element <span class="keyword">in</span> li:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, li[i])</span><br><span class="line"><span class="meta">... </span>    i +=<span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br><span class="line"><span class="number">3</span> four</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">    <span class="built_in">print</span>(i, element)</span><br><span class="line"><span class="number">0</span> one</span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br><span class="line"><span class="number">3</span> four</span><br></pre></td></tr></table></figure></li><li><p>input()      #接受一个标准输入数据，返回string数据类型</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aa = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt;:<span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(aa)//查看aa对象的类型</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">bb</span> = <span class="title">input</span>(<span class="params"><span class="string">&quot;&gt;&gt;&gt;:&quot;</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;:</span>string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(bb)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">#-------接受多个值-------</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span> = (<span class="params"><span class="built_in">input</span>(<span class="params"><span class="string">&quot;请输入三角形三边的长：&quot;</span></span>).split(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="class">请输入三角形三边的长：3 4 5</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span> = <span class="title">int</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span> = <span class="title">int</span>(<span class="params">b</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span> = <span class="title">int</span>(<span class="params">c</span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">p</span> = (<span class="params">a+b+c</span>)/2</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">p</span></span></span><br><span class="line"><span class="class">6.0</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">s</span> = (<span class="params">p*(<span class="params">p-a</span>)*(<span class="params">p-b</span>)*(<span class="params">p-c</span>)</span>)**0.5</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params"><span class="string">f&quot;三角形的面积为:<span class="subst">&#123;s&#125;</span>&quot;</span></span>)</span></span><br><span class="line"><span class="class">三角形的面积为:</span><span class="number">6.0</span></span><br></pre></td></tr></table></figure></li><li><p>oct()      #将整数转化成8进制字符串，以<strong>0o</strong>作为前缀</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(<span class="number">12</span>)</span><br><span class="line"><span class="string">&#x27;0o14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">oct</span>(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;0o1&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>staticmethod     #返回函数的静态方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">staticmethod</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.f()// 无实例调用函数</span><br><span class="line">hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cobj = A()// 实例化后调用</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cobj.f()</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></li><li><p>bin()     #返回一个整数int或者长整数long int的二进制</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;0b1100100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bin</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;0b1011&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>eval()      #执行一个字符串表达式，并返回表达式的值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;a+1&quot;</span>)//计算字符串里的内容</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;pow(2,3)&quot;</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&quot;3*4&quot;</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></li><li><p>int()       # 将一个字符串或数字转换为整型</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>()//没有参数为<span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">3</span>)//</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">4.6</span>)//取整数部分</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;12&quot;</span>,<span class="number">16</span>)//将十六进制<span class="number">12</span>，转化成十进制</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;0xa&quot;</span>,<span class="number">16</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&quot;10&quot;</span>,<span class="number">8</span>)//将八进制转化成十进制</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>open()       #用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数，如果该文件无法被打开，会抛出 OSError</p><blockquote><p>语法格式：</p><p>open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file: 必需，文件路径（相对或者绝对路径）。</span><br><span class="line">mode: 可选，文件打开模式</span><br><span class="line">buffering: 设置缓冲</span><br><span class="line">encoding: 一般使用utf8</span><br><span class="line">errors: 报错级别</span><br><span class="line">newline: 区分换行符</span><br><span class="line">closefd: 传入的file参数类型</span><br><span class="line">opener:</span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line">&gt;&gt;&gt;f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;f.read()</span><br><span class="line">&gt;&gt;&gt;f.close()</span><br></pre></td></tr></table></figure><p>  <strong>mode</strong> 的参数详述：(默认为文本模式，加b就可以用二进，针对图形影视文件)</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>t</td><td>文本模式 (默认)。</td></tr><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>U</td><td>通用换行模式（不推荐）。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></li><li><p>str()      #将对象格式化成string</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span> = &#123;<span class="string">&#x27;baidu&#x27;</span>: <span class="string">&#x27;baidu.com&#x27;</span>, <span class="string">&#x27;google&#x27;</span>: <span class="string">&#x27;google.com&#x27;</span>&#125;//格式化成字符串</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="built_in">dict</span>)</span><br><span class="line"><span class="string">&quot;&#123;&#x27;baidu&#x27;: &#x27;baidu.com&#x27;, &#x27;google&#x27;: &#x27;google.com&#x27;&#125;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;bingeone&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(a)</span><br><span class="line"><span class="string">&#x27;bingeone&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>bool()      #将给定的对象转换成布尔类型，True  或者 False</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">10</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">bool</span>,<span class="built_in">int</span>)   //<span class="built_in">bool</span> 是 <span class="built_in">int</span>的子类</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>exec()      #执行存储在字符串或文件中的python语句</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;hello,world&#x27;)&quot;</span>)</span><br><span class="line">hello,world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&quot;&quot;&quot;for i in range(3):</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    print(&quot; iter time: %d&quot; %i)</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span>)</span><br><span class="line"> <span class="built_in">iter</span> time: <span class="number">0</span></span><br><span class="line"> <span class="built_in">iter</span> time: <span class="number">1</span></span><br><span class="line"> <span class="built_in">iter</span> time: <span class="number">2</span></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">expr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z = 30</span></span><br><span class="line"><span class="string">sum = x + y + z</span></span><br><span class="line"><span class="string">print(sum)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    <span class="built_in">exec</span>(expr)// <span class="number">10</span>+<span class="number">20</span>+<span class="number">30</span></span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;)// <span class="number">1</span>+<span class="number">2</span>+<span class="number">30</span></span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">4</span>&#125;)// <span class="number">1</span>+<span class="number">3</span>+<span class="number">30</span>，两个y取后者，z取定义的，不用传递的<span class="number">4</span></span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line">结果：</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure></li><li><p>isinstance()     #判断一个对象是否是一个已知的类型</p><blockquote><p>与type() 的区别</p><p>type()  不会认为子类是父类类型，不考虑继承关系</p><p>isinstance()  会认为子类是父类类型，考虑继承关系</p><p>可以使用isinstance() 来判断两个类型是否相同</p><p>isinstance(object, classinfo)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a,<span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a,(<span class="built_in">str</span>,<span class="built_in">int</span>,<span class="built_in">list</span>))// 在元组中满足一个，就返回<span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment">#基本类型 classinfo：</span></span><br><span class="line"><span class="comment"># int，float，bool，complex，str(字符串)，list，dict(字典)，set，tuple</span></span><br><span class="line"><span class="comment">#-------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span>// B类继承A类</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(A(),A)//实例A 和类A 一个类型</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(A()) == A</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(B(),A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>ord()     # 返回对应的 ASCII 数值，或者 Unicode 数值，对应的十进制整数。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></li><li><p>sum()     #对序列进行求和计算</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="number">1</span>)//对元组求和后，再加<span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></li><li><p>batearray()    #返回一个新字节数组</p><blockquote><p>bytearray([source[, encoding[, errors]]])</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如果 source 为整数，则返回一个长度为 source 的初始化数组；</span></span><br><span class="line"><span class="string">如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</span></span><br><span class="line"><span class="string">如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；</span></span><br><span class="line"><span class="string">如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。</span></span><br><span class="line"><span class="string">如果没有输入任何参数，默认就是初始化数组为0个元素。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytearray</span>()</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytearray</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;\x01\x02\x03&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bytearray</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">bytearray</span>(<span class="string">b&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter()        #用于过滤序列，过滤不符合条件的元素，返回一个迭代器对象，可以用<strong>list</strong>将其转化成列表</p><blockquote><p>filter(function, iterrable)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> n %<span class="number">2</span> == <span class="number">1</span>//对<span class="number">2</span>取余，求n为奇数</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp = <span class="built_in">filter</span>(is_sqr, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(tmp)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">#-------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math//引入math模块</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> math.sqrt(x) % <span class="number">1</span>== <span class="number">0</span>//求开平方根得到整数的对象</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmplist = <span class="built_in">filter</span>(is_sqr, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newlist = <span class="built_in">list</span>(tmplist)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newlist</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure></li><li><p>issubclass()          #用于判断参数class是否是类型参数classinfo的子类</p><blockquote><p>issubclass(class, classinfo)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">issubclass</span>(B,A))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>pow()           #返回x^y^ 的值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">100</span>,<span class="number">2</span>)//保留一位小数</span><br><span class="line"><span class="number">10000.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">pow</span>(<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">100</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="number">0.0001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">8.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.<span class="built_in">pow</span>(<span class="number">100</span>,<span class="number">0</span>)</span><br><span class="line"><span class="number">1.0</span></span><br></pre></td></tr></table></figure></li><li><p>super()             #用于调用父类(超类)的一个方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,x</span>):</span></span><br><span class="line"><span class="meta">... </span>         y = x+<span class="number">1</span></span><br><span class="line"><span class="meta">... </span>         <span class="built_in">print</span>(y)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,x</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().add(x)//调用父类中的add函数</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.add(<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#--------------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooParent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.parent = <span class="string">&#x27;I\&#x27;m the parent.&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Parent&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s from Parent&quot;</span> % message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooChild</span>(<span class="params">FooParent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(FooChild,self).__init__()//步骤①</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Child&quot;</span>)//步骤②</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self,message</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(FooChild,self).bar(message)//步骤③</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Child bar function&#x27;</span>)//步骤④</span><br><span class="line">        <span class="built_in">print</span>(self.parent)//步骤⑤</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fooChild = FooChild()//执行结果打印前两个结果</span><br><span class="line">    fooChild.bar(<span class="string">&quot;Helloworld&quot;</span>)//打印后三个</span><br><span class="line">结果：</span><br><span class="line">Parent</span><br><span class="line">Child</span><br><span class="line">Helloworld <span class="keyword">from</span> Parent</span><br><span class="line">Child bar function</span><br><span class="line">I<span class="string">&#x27;m the parent.</span></span><br></pre></td></tr></table></figure></li></ul><p>​    </p><p>​        <strong>内置函数第二部分详见下文。。。</strong><a href="/bione/posts/30659.html">内置函数(二)</a></p><p>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;python内置函数-一&quot;&gt;&lt;a href=&quot;#python内置函数-一&quot; class=&quot;headerlink&quot; title=&quot;python内置函数(一)&quot;&gt;&lt;/a&gt;python内置函数(一)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;abs()    #取绝对值&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>内置函数(二)</title>
    <link href="https://bingeone.github.io/bione/posts/30659.html"/>
    <id>https://bingeone.github.io/bione/posts/30659.html</id>
    <published>2021-10-24T14:01:32.564Z</published>
    <updated>2021-10-24T15:25:00.429Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一部分详见上文。。。</strong><a href="/bione/posts/46956.html">内置函数(一)</a></p><ul><li><p>bytes()[^1]        #返回新的bytes对象，是一个0&lt;= x &lt;=256之间的整数不可变序列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">bytes</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">b&#x27;\x01\x02\x03\x04&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; </span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span> = <span class="title">bytes</span>(<span class="params"><span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span></span></span><br><span class="line"><span class="class"><span class="title">b</span>&#x27;<span class="title">hello</span>&#x27;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>float()           #用于将整数和字符串转换成浮点数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(-<span class="number">112.3</span>)</span><br><span class="line">-<span class="number">112.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure></li><li><p>iter()              #用来生成迭代器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">iter</span>(li):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>print()             #用于打印输出</p><blockquote><p>print(*objects, sep=‘ ’, end=‘\n’, file=sys.stdout, flush=False )</p><p>objects – 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</p><p>sep – 用来间隔多个对象，默认值是一个空格。</p><p>end – 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串。</p><p>file – 要写入的文件对象。</p><p>flush – 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line">hello,world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="number">1</span> hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;b&quot;</span>)</span><br><span class="line">aa b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;aaa&quot;</span><span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">aaabbb</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;I&quot;</span>,<span class="string">&quot;am&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;student&quot;</span>,sep=<span class="string">&#x27; &#x27;</span>)//设置间断符</span><br><span class="line">I am a student</span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;。&quot;</span>,end=<span class="string">&quot;&quot;</span>,flush = <span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span>    time.sleep(<span class="number">0.5</span>)//输出结果为：间断<span class="number">0.5</span>s输出句号。</span><br></pre></td></tr></table></figure></li><li><p>tuple         #将可迭代对象（如列表）转化成元组</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;am&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;student&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = <span class="built_in">tuple</span>(li)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1</span><br><span class="line">(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;student&#x27;</span>)</span><br><span class="line"><span class="comment">#-------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= <span class="string">&#x27;www&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>(a)//将字符串转化成元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;www&#x27;</span>:<span class="number">123</span>,<span class="string">&#x27;ttt&#x27;</span>:<span class="number">456</span>&#125;//将字典的key转化成元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;ttt&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>(<span class="string">&#x27;abcd&#x27;</span>)//将集合转化成元组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">tuple</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)//元组形式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;//集合形式</span><br></pre></td></tr></table></figure></li><li><p>callable()      #用于检查一个对象是否可以调用</p><blockquote><p>对于函数、方法、lambda函式、类以及实现了__ all__ 方法的类实例，它的返回True </p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(add)//函数</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(A)//类返回<span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()//没有实现__call__,返回 <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(a)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(B)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">callable</span>(b)//实现__call__,返回 <span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>format()         #格式化函数，可以接受不限个参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="string">&#x27;world hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;网站:&#123;name&#125;,url:&#123;url&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;博客&quot;</span>,url=<span class="string">&quot;bingeone.top&quot;</span>))</span><br><span class="line">网站:博客,url:bingeone.top</span><br><span class="line"><span class="comment">#--------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>site = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;博客&quot;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;bingeone.top&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;网站:&#123;name&#125;,url:&#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site))//字典调用</span><br><span class="line">网站:博客,url:bingeone.top</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">&#x27;博客&#x27;</span>,<span class="string">&#x27;bingeone.top&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;网站:&#123;0[0]&#125;,url:&#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(li))//列表调用，<span class="number">0</span>指定li列表对象</span><br><span class="line">网站:博客,url:bingeone.top</span><br><span class="line"><span class="comment">#---------------------------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AssignValue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.value = value</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_value = AssignValue(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;value 为:&#123;0.value&#125;&quot;</span>.<span class="built_in">format</span>(my_value))</span><br><span class="line">value 为:<span class="number">5</span></span><br></pre></td></tr></table></figure><p>  <strong>数字格式化</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; 对应的位置是&#123;&#123;0&#125;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;bingeone&quot;</span>))</span><br><span class="line">bingeone 对应的位置是&#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">#-----------进制转化-----------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;1011&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:o&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;13&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;0xb&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;:#X&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">11</span>)</span><br><span class="line"><span class="string">&#x27;0XB&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>数字</th><th>格式</th><th>输出</th><th>描述</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>保留小数点后两位</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>+3.14</td><td>带符号保留小数点后两位</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1.00</td><td>带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>不带小数</td></tr><tr><td>5</td><td>{:0&gt;2d}</td><td>05</td><td>数字补零 (填充左边, 宽度为2)</td></tr><tr><td>5</td><td>{:x&lt;4d}</td><td>5xxx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>10</td><td>{:x&lt;4d}</td><td>10xx</td><td>数字补x (填充右边, 宽度为4)</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td>{:.2%}</td><td>25.00%</td><td>百分比格式</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00e+09</td><td>指数记法</td></tr><tr><td>13</td><td>{:&gt;10d}</td><td>13</td><td>右对齐 (默认, 宽度为10)</td></tr></tbody></table></li><li><p>len()         #返回对象(字符，列表，元组等)长度或者项目个数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;bingeone&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ll = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(ll)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>property()         #在新式类中返回属性值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">property</span>.md &gt;folded</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">getx</span>(<span class="params">self</span>):</span>//获取x的值</span><br><span class="line">         <span class="keyword">return</span> self._x</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setx</span>(<span class="params">self</span>):</span>//设置x的值</span><br><span class="line">         self._x = value</span><br><span class="line">      </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">delx</span>(<span class="params">self</span>):</span>//删除x的值</span><br><span class="line">         <span class="keyword">del</span> self._x</span><br><span class="line">     </span><br><span class="line">      x = <span class="built_in">property</span>(getx,setx,delx, <span class="string">&quot;I&#x27;m the &#x27;x&#x27; property&quot;</span>)</span><br><span class="line"><span class="comment">#------------------------两种写法------------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line">     </span><br><span class="line"><span class="meta">     @property</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>//获取x的值</span><br><span class="line">         <span class="keyword">return</span> self._x</span><br><span class="line">      </span><br><span class="line"><span class="meta">     @x.setter</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>//设置x的值</span><br><span class="line">         self._x = value</span><br><span class="line">      </span><br><span class="line"><span class="meta">     @x.deleter</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">self</span>):</span>//删除x的值</span><br><span class="line">         <span class="keyword">del</span> self._x</span><br></pre></td></tr></table></figure></li><li><p>type()          #一个参数返回对象的类型，三个参数返回新的类型对象</p><blockquote><p>type(object)</p><p>type(name, bases, dict)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">1</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params"><span class="string">&quot;bingeone&quot;</span></span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">[<span class="number">11</span>,<span class="number">22</span>]</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">list</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">&#123;<span class="number">1</span>:<span class="string">&#x27;aa&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span> = &#x27;<span class="title">a</span>&#x27;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">x</span> = 1</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">x</span>) == <span class="title">int</span>//判断类型</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class">#--------------------------------</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">class</span> <span class="title">X</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    a = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = <span class="built_in">type</span>(<span class="string">&quot;X&quot;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(a=<span class="number">1</span>))//产生一个新的类型 X</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">X</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>chr()         #一个整数作为参数，返回一个对应的字符</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">65</span>)</span><br><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">97</span>)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">8364</span>)</span><br><span class="line"><span class="string">&#x27;€&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>frozenset()         #返回一个冻结的集合，冻结后集合不能再添加任何元素</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">frozenset</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)//生成一个不可变的集合</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">frozenset</span>(<span class="string">&quot;bingeone&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>list()            #用于将元组或者字符串转化成列表</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>_<span class="built_in">tuple</span> = (<span class="number">123</span>,<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;www&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = <span class="built_in">list</span>(_<span class="built_in">tuple</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li</span><br><span class="line">[<span class="number">123</span>, <span class="string">&#x27;baidu&#x27;</span>, <span class="string">&#x27;www&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li2 = <span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li2</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>range()         #返回的是一个可迭代对象(类型是对象)，而不是列表类型</p><p>  list()函数是一个对象迭代器，可以把range()返回的可迭代对象转化成一个列表</p><blockquote><p>range(stop)</p><p>range(start, stop, step)</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)) //给出起点, 终点(到不了的), 步长(正整数,负整数)</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>,-<span class="number">10</span>,-<span class="number">2</span>))</span><br><span class="line">[<span class="number">0</span>, -<span class="number">2</span>, -<span class="number">4</span>, -<span class="number">6</span>, -<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2046</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="built_in">len</span>(a)-<span class="number">1</span>])</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2044</span></span><br></pre></td></tr></table></figure></li><li><p>vars()            #函数返回对象object的属性和属性值的字典对象</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">vars</span>(A))</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">vars</span>(a))</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope = <span class="built_in">vars</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scope[<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>classmethod()       #对应的函数不需要实例化，不需要self参数，但第一个参数需要是表示自身类的的cls参数，可以用来调用类的属性，类的方法，实例化对象等</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;www&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">classmethod</span>//类方法修饰</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">cls</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(cls.bar)//调用类的属性</span><br><span class="line"><span class="meta">... </span>        cls().func1()//调用类的方法</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.func2()//实例化对象</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">www</span><br></pre></td></tr></table></figure></li><li><p>getatter()              #返回对象的属性值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a,<span class="string">&quot;bar&quot;</span>)//获取bar 属性</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">getattr</span>(a,<span class="string">&quot;bar1&quot;</span>,<span class="number">2</span>)//没有bar1属性，需要设置默认值，为<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">#---------------------------------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self,a,b</span>):</span></span><br><span class="line"><span class="meta">... </span>        x = a</span><br><span class="line"><span class="meta">... </span>        a = b</span><br><span class="line"><span class="meta">... </span>        b = x</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bb = B()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc = <span class="built_in">getattr</span>(bb,<span class="string">&quot;set&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>locals()          #以字典的形式返回当前位置的全部局部变量</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">A</span>(<span class="params">arg</span>):</span> //两个局部变量：arg z</span><br><span class="line"><span class="meta">... </span>    z= <span class="number">11</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A(<span class="number">22</span>)</span><br><span class="line">&#123;<span class="string">&#x27;arg&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">11</span>&#125; //返回一个名字/值对的字典</span><br></pre></td></tr></table></figure></li><li><p>repr()            #将对象转化为供解释器读取的形式</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;aabbcc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(a)</span><br><span class="line"><span class="string">&quot;&#x27;aabbcc&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(li)</span><br><span class="line"><span class="string">&#x27;[1, 2, 3, 4]&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>zip()            #将可迭代的对象作为参数，将对象对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样的作用可以节约内存</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped = <span class="built_in">zip</span>(a,b) //返回对象</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped</span><br><span class="line">&lt;<span class="built_in">zip</span> <span class="built_in">object</span> at <span class="number">0x7fa2f71d36c0</span>&gt; //对象地址</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(zipped)//罗列对象成列表形式</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(a,c))//元素的个数与最短的列表一样</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1, a2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a,b))//与 <span class="built_in">zip</span> 相反，<span class="built_in">zip</span>(*) 可理解为解压，返回二维矩阵式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a2)</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>compile()           #将一个字符串编译为字节代码</p><blockquote><p>compile(source, filename, mode[, flags[,dont_inherit]])</p><ul><li>source – 字符串或者AST（Abstract Syntax Trees）对象。。</li><li>filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。</li><li>mode – 指定编译代码的种类。可以指定为 exec, eval, single。</li><li>flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。</li><li>flags和dont_inherit是用来控制编译源码时的标志</li></ul></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;for i in range(1,10): print(i)&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;exec&quot;</span>)//编译为字节代码对象</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x7fa2f71ed5b0</span>, file <span class="string">&quot;&quot;</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(c)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;3*4+5&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;eval&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(a)</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure></li><li><p>globals()            #以字典的形式返回当前位置的全部全局变量</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>&#x27;&gt;, &#x27;<span class="title">__spec__</span>&#x27;:</span> <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;a&#x27;</span>: <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>map()               #根据提供的函数对序列做映射</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x**<span class="number">2</span>//返回x 的平方</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])//计算列表中各元素的平方</span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x7fa4ad1d2f10</span>&gt;//返回迭代器</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))//转化成列表</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))//使用 <span class="keyword">lambda</span> 匿名函数</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure></li><li><p>reversed()            #返回一个反转的迭代器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqString = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqString)))</span><br><span class="line">[<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqTuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqTuple)))</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqRange = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqRange)))</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seqList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(seqList)))</span><br><span class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>__import__()           #用于动态加载类和函数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;p01.py&#x27;</span>)<span class="comment"># 导入 p01.py 模块</span></span><br></pre></td></tr></table></figure></li><li><p>complex()            #用于创建一个值为renl + imag*j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="number">1</span>)//数字</span><br><span class="line">(<span class="number">1</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="string">&quot;1&quot;</span>)//字符串</span><br><span class="line">(<span class="number">1</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">complex</span>(<span class="string">&quot;1+2j&quot;</span>)//这个地方在<span class="string">&quot;+&quot;</span>号两边不能有空格，也就是不能写成<span class="string">&quot;1 + 2j&quot;</span>，应该是<span class="string">&quot;1+2j&quot;</span>，否则会报错</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br></pre></td></tr></table></figure></li><li><p>hasattr()            #用于判断对象是否包含对应的属性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">10</span></span><br><span class="line"><span class="meta">... </span>    y = -<span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    z = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Coordinate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p,<span class="string">&quot;x&quot;</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p,<span class="string">&quot;no&quot;</span>))//没有对应的属性</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>max()                #返回给定的最大值，参数可以为序列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;max(80,30,50,75):&quot;</span>,<span class="built_in">max</span>(<span class="number">80</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">75</span>))</span><br><span class="line"><span class="built_in">max</span>(<span class="number">80</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">75</span>): <span class="number">80</span></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line"><span class="comment">#max(x, y[, z...]):Number|Sequence 入参类型不能混入（要么全Number(int|float|complex|bool），要么全序列）。</span></span><br><span class="line"><span class="comment">#单序列入参，返回序列中最大的一个数值多序列入参, 按索引顺序，逐一对比各序列的当前索引位的 “值”，直到遇见最大值立即停止对比，并返回最大值所在的序列（也就是说，多序列入参，返回值依旧是一个序列，而不是数值）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">0</span>,<span class="literal">True</span>)//<span class="built_in">bool</span> </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])//单序列</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(-<span class="number">1</span>,-<span class="number">0.5</span>,-<span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">6</span>])//多序列，按索引位置比较</span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>])</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">2</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">1</span>])</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>))</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,<span class="literal">False</span>,<span class="number">0</span>))//<span class="built_in">bool</span>，多序列</span><br><span class="line">(<span class="literal">True</span>, <span class="literal">False</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,<span class="literal">False</span>,<span class="number">2</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">(<span class="literal">True</span>, <span class="literal">False</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,),(<span class="number">1</span>,))</span><br><span class="line">(<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>),(<span class="literal">True</span>,),(<span class="number">1</span>,))</span><br><span class="line">(<span class="literal">True</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">3</span>,<span class="number">4</span>)//number 和 序列混杂报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])//不同类型序列，报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">not</span> supported between instances of <span class="string">&#x27;list&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;tuple&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>round()            #返回浮点数x的四舍五入，准确的说保留到离上一位更近的一端（四舍六入），精度要求较高的，一般不使用该函数</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(70.23456):&quot;</span>,<span class="built_in">round</span>(<span class="number">70.23456</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">70.23456</span>): <span class="number">70</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(56.659,1):&quot;</span>,<span class="built_in">round</span>(<span class="number">56.659</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">56.659</span>,<span class="number">1</span>): <span class="number">56.7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(80.264,2):&quot;</span>,<span class="built_in">round</span>(<span class="number">80.264</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">80.264</span>,<span class="number">2</span>): <span class="number">80.26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(100.000056,3):&quot;</span>,<span class="built_in">round</span>(<span class="number">100.000056</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">100.000056</span>,<span class="number">3</span>): <span class="number">100.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(-100.000056,3):&quot;</span>,<span class="built_in">round</span>(-<span class="number">100.000056</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">round</span>(-<span class="number">100.000056</span>,<span class="number">3</span>): -<span class="number">100.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;round(2.675,2):&quot;</span>,<span class="built_in">round</span>(<span class="number">2.675</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">round</span>(<span class="number">2.675</span>,<span class="number">2</span>): <span class="number">2.67</span></span><br><span class="line"><span class="comment"># 按我们的想法返回结果应该是 2.68，可结果却是 2.67，为什么？</span></span><br><span class="line"><span class="comment"># 这跟浮点数的精度有关。我们知道在机器中浮点数不一定能精确表达，因为换算成一串 1 和 0 后可能是无限位数的，机器已经做出了截断处理。那么在机器中保存的2.675这个数字就比实际数字要小那么一点点。这一点点就导致了它离 2.67 要更近一点点，所以保留两位小数时就近似到了 2.67。</span></span><br></pre></td></tr></table></figure></li><li><p>delattr()          #用于删除函数属性</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>:</span></span><br><span class="line"><span class="meta">... </span>    x =<span class="number">10</span></span><br><span class="line"><span class="meta">... </span>    y = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    z = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Coordinate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;x=:&quot;</span>,p.x)</span><br><span class="line">x=: <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;y=:&quot;</span>,p.y)</span><br><span class="line">y=: <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;z=:&quot;</span>,p.z)</span><br><span class="line">z=: <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">delattr</span>(Coordinate,<span class="string">&quot;z&quot;</span>)//删除类中 z的属性</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;x=:&quot;</span>,p.x)</span><br><span class="line">x=: <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;y=:&quot;</span>,p.y)</span><br><span class="line">y=: <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;z=:&quot;</span>,p.z)//类中没有该属性，报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Coordinate&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;z&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>hash()          #返回对象的哈希值</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="number">3938127732211961192</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">str</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">-<span class="number">8986991832632495888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">sorted</span>(&#123;<span class="string">&#x27;1&#x27;</span>:<span class="number">1</span>&#125;)))</span><br><span class="line"><span class="number">341477958600190998</span></span><br></pre></td></tr></table></figure></li><li><p>memoryview()           #返回给定参数的内存查看对象（memory view）</p><blockquote><p>所谓内存查看对象，是指支持缓冲协议的数据进行包装，在不需要复制对象基础上允许python代码访问</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">memoryview</span>(<span class="built_in">bytearray</span>(<span class="string">&quot;abcefg&quot;</span>,<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">0</span>])//索引 <span class="number">0</span>位的asii码</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[-<span class="number">1</span>])</span><br><span class="line"><span class="number">103</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">&lt;memory at <span class="number">0x7fa845b14580</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>].tobytes())</span><br><span class="line"><span class="string">b&#x27;bce&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>toBytes()方法是将参数使用UTF-8的编码格式转换成byte[],<br>getBytes()是用读取file.encoding的编码格式,然后用读取的格式进行转换,</p></blockquote></li><li><p>set()       #创建一个无序不重复元素集，可以进行关系测试，删除重复数据，还可以计算交集，差集，并集等</p><blockquote><p><strong>交集 &amp;</strong>  : x&amp;y，返回一个新的集合，包括同时在集合 x 和y中的共同元素。</p><p><strong>并集 |</strong>  :  x|y，返回一个新的集合，包括集合 x 和 y 中所有元素。</p><p><strong>差集 -</strong>   : x-y，返回一个新的集合,包括在集合 x 中但不在集合 y 中的元素。</p><p><strong>补集 ^</strong>  : x^y，返回一个新的集合，包括集合 x 和 y 的非共同元素。</p></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">set</span>(<span class="string">&#x27;alibaba&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">set</span>(<span class="string">&#x27;google&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y</span><br><span class="line">(&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;, &#123;<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x - y</span><br><span class="line">&#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ y</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y ^ x</span><br><span class="line">&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​        以上总共68个python内置函数，学习资料来自<a href="https://www.runoob.com/python3/python3-built-in-functions.html">菜鸟教程</a></p><p><strong>内置函数</strong></p><table><thead><tr><th><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs()</a></th><th><a href="https://www.runoob.com/python/python-func-dict.html">dict()</a></th><th><a href="https://www.runoob.com/python/python-func-help.html">help()</a></th><th><a href="https://www.runoob.com/python3/python3-func-number-min.html">min()</a></th><th><a href="https://www.runoob.com/python/python-func-setattr.html">setattr()</a></th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/python-func-all.html">all()</a></td><td><a href="https://www.runoob.com/python/python-func-dir.html">dir()</a></td><td><a href="https://www.runoob.com/python3/python3-func-hex.html">hex()</a></td><td><a href="https://www.runoob.com/python/python-func-next.html">next()</a></td><td><a href="https://www.runoob.com/python/python-func-slice.html">slice()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-any.html">any()</a></td><td><a href="https://www.runoob.com/python3/python3-func-divmod.html">divmod()</a></td><td><a href="https://www.runoob.com/python/python-func-id.html">id()</a></td><td>object()</td><td><a href="https://www.runoob.com/python3/python3-func-sorted.html">sorted()</a></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-ascii.html">ascii()</a></td><td><a href="https://www.runoob.com/python3/python3-func-enumerate.html">enumerate()</a></td><td><a href="https://www.runoob.com/python/python3-func-input.html">input()</a></td><td><a href="https://www.runoob.com/python/python3-func-oct.html">oct()</a></td><td><a href="https://www.runoob.com/python/python-func-staticmethod.html">staticmethod()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bin.html">bin()</a></td><td><a href="https://www.runoob.com/python/python-func-eval.html">eval()</a></td><td><a href="https://www.runoob.com/python/python-func-int.html">int()</a></td><td><a href="https://www.runoob.com/python3/python3-func-open.html">open()</a></td><td><a href="https://www.runoob.com/python/python-func-str.html">str()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bool.html">bool()</a></td><td><a href="https://www.runoob.com/python3/python3-func-exec.html">exec()</a></td><td><a href="https://www.runoob.com/python/python-func-isinstance.html">isinstance()</a></td><td><a href="https://www.runoob.com/python3/python3-func-ord.html">ord()</a></td><td><a href="https://www.runoob.com/python/python-func-sum.html">sum()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bytearray.html">bytearray()</a></td><td><a href="https://www.runoob.com/python3/python3-func-filter.html">filter()</a></td><td><a href="https://www.runoob.com/python/python-func-issubclass.html">issubclass()</a></td><td><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow()</a></td><td><a href="https://www.runoob.com/python/python-func-super.html">super()</a></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-bytes.html">bytes()</a></td><td><a href="https://www.runoob.com/python/python-func-float.html">float()</a></td><td><a href="https://www.runoob.com/python/python-func-iter.html">iter()</a></td><td><a href="https://www.runoob.com/python/python-func-print.html">print()</a></td><td><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-callable.html">callable()</a></td><td><a href="https://www.runoob.com/python/att-string-format.html">format()</a></td><td><a href="https://www.runoob.com/python3/python3-string-len.html">len()</a></td><td><a href="https://www.runoob.com/python/python-func-property.html">property()</a></td><td><a href="https://www.runoob.com/python/python-func-type.html">type()</a></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-chr.html">chr()</a></td><td><a href="https://www.runoob.com/python/python-func-frozenset.html">frozenset()</a></td><td><a href="https://www.runoob.com/python3/python3-att-list-list.html">list()</a></td><td><a href="https://www.runoob.com/python3/python3-func-range.html">range()</a></td><td><a href="https://www.runoob.com/python/python-func-vars.html">vars()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-classmethod.html">classmethod()</a></td><td><a href="https://www.runoob.com/python/python-func-getattr.html">getattr()</a></td><td><a href="https://www.runoob.com/python/python-func-locals.html">locals()</a></td><td><a href="https://www.runoob.com/python/python-func-repr.html">repr()</a></td><td><a href="https://www.runoob.com/python3/python3-func-zip.html">zip()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-compile.html">compile()</a></td><td><a href="https://www.runoob.com/python/python-func-globals.html">globals()</a></td><td><a href="https://www.runoob.com/python/python3-func-map.html">map()</a></td><td><a href="https://www.runoob.com/python3/python3-func-reversed.html">reversed()</a></td><td><a href="https://www.runoob.com/python/python-func-__import__.html">__import__()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-complex.html">complex()</a></td><td><a href="https://www.runoob.com/python/python-func-hasattr.html">hasattr()</a></td><td><a href="https://www.runoob.com/python3/python3-func-number-max.html">max()</a></td><td><a href="https://www.runoob.com/python3/python3-func-number-round.html">round()</a></td><td></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-delattr.html">delattr()</a></td><td><a href="https://www.runoob.com/python/python-func-hash.html">hash()</a></td><td><a href="https://www.runoob.com/python/python-func-memoryview.html">memoryview()</a></td><td><a href="https://www.runoob.com/python/python-func-set.html">set()</a></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;第一部分详见上文。。。&lt;/strong&gt;&lt;a href=&quot;/bione/posts/46956.html&quot;&gt;内置函数(一)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bytes()[^1]        #返回新的bytes对象，是一个0&amp;lt;= x &amp;lt</summary>
      
    
    
    
    <category term="编程" scheme="https://bingeone.github.io/bione/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="python" scheme="https://bingeone.github.io/bione/tags/python/"/>
    
    <category term="程序" scheme="https://bingeone.github.io/bione/tags/%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门学习收录</title>
    <link href="https://bingeone.github.io/bione/posts/974.html"/>
    <id>https://bingeone.github.io/bione/posts/974.html</id>
    <published>2021-10-23T14:13:15.308Z</published>
    <updated>2021-10-23T14:48:41.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h3><ul><li>cursor: hand和cursor:pointer的区别</li></ul><blockquote><p>cursor:hand 与 cursor:pointer 的效果是一样的，都像光标指向链接一样，光标变成手行。cursor:hand ：IE完全支持。但是在firefox是不支持的，没有效果。<br>cursor:pointer ：是CSS2.0的标准。所以firefox是支持的，但是IE5.0既之前版本不支持。IE6开始支持。 </p></blockquote><ul><li>background-size: length/percentage/cover/contain  属性规定背景图像的尺寸</li></ul><blockquote><p>background-size：100%;总是X轴100%铺满整个容器，Y轴可能被裁剪会出现空白填不满部分，图片不变形。<br>background-size：100% 100%;图片不保持比例放大或缩小使X轴与Y轴都铺满整个容器，图片可能会变形。<br>background-size：cover;图片保持比例放大或缩小使X轴与Y轴都铺满整个容器，但图片超出容器部分会被裁剪掉，图片不变形。<br>background-size：contain;图片保持比例放大或缩小填充容器，若不能完整填充容器，X轴或Y轴都有可能出现白边，图片不变形。</p></blockquote><ul><li>perspective 属性定义 3D 元素距视图的距离,以像素计</li></ul><h4 id="文本设置"><a href="#文本设置" class="headerlink" title="文本设置"></a>文本设置</h4><ul><li>font-ice：字号参数</li><li>font-style：字体格式</li><li>font-weight：字体粗细</li><li>颜色属性color</li></ul><h4 id="超链接设置"><a href="#超链接设置" class="headerlink" title="超链接设置"></a>超链接设置</h4><ul><li>text_decoration：作用改变浏览器显示文字链接时的下划线（参数）<ul><li>underline：为文字加下画线</li><li>overline：为文字加上画线</li><li>line-through：为文字加删除线</li><li>blink：是文字闪烁</li><li>none：不显示任何效果</li></ul></li></ul><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>background color：参数</li><li>background image：url（背景图片存放路径）</li><li>background repeat：参数（图片重复）<ul><li>now repeat：不重复平铺背景图片</li><li>repeat-x: 使图片只在水平方向上平铺</li><li>repeat-y: 使图片只在垂直方向上平铺</li></ul></li><li>background-attachment：参数（图片固定）<ul><li>filed：网页滚动，图片相对窗口固定不动</li><li>scroll：网页滚动，图片随窗口滚动</li></ul></li></ul><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><ul><li>word-spacing: 单词间距</li><li>letter-spacing：字母间距</li><li>text-align：参数（文本对齐）<ul><li>left：左对齐</li><li>right：右对齐</li><li>center：居中对齐</li><li>justify：相对左右对齐</li></ul></li><li>vertical-align：参数（垂直对齐）<ul><li>top：顶对齐</li><li>bottom：底对齐</li><li>text-top：相对文本顶对齐</li><li>text-bottom：相对文本底对齐</li><li>baseline：基准线对齐</li><li>middle：中心对齐</li><li>sub：以下标的形式显示</li><li>super：以上标的形式显示</li></ul></li><li>text-indent：文本缩进（12px相当一个文字距离）</li><li>white-space：参数（空格）<ul><li>normal：正常</li><li>pre：保留</li><li>nowrap：不换行</li></ul></li><li>display：参数（显示样式）<ul><li>block：块级元素，在对象前后都换行</li><li>inline：在对象前后都不换行</li><li>list-item：在对象前后都换行，增加项目符号</li><li>none：无显示</li></ul></li></ul><h4 id="方框"><a href="#方框" class="headerlink" title="方框"></a>方框</h4><ul><li>height：高度</li><li>width：kuandu</li><li>padding：内边距</li><li>margin：外边距</li><li>float：浮动（可以让块级元素在一行中排列）</li><li>clear：清除浮动</li></ul><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><ul><li>border style：参数（边框样式）<ul><li>none：无边框</li><li>dotted：边框为点样式</li><li>dashed：边框为长短线</li><li>solid：边框为实线</li><li>double：边框为双线</li></ul></li><li>border width：宽度</li><li>border color：颜色</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>list-style-type：列表样式（不同浏览器的列表符不同，显示会出错，一般以图片显示）</li></ul><h4 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h4><ul><li>cursor：鼠标形状参数<ul><li>style=“cursor：hand” 手形</li><li>style=“cursor：help” 问号形</li></ul></li></ul><h3 id="CSS好用工具"><a href="#CSS好用工具" class="headerlink" title="CSS好用工具"></a>CSS好用工具</h3><ul><li><strong>动效</strong></li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://cubic-bezier.com/">cubic-bezier—响应时间曲线</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="http://michalsnik.github.io/aos/">动效进场</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://animate.style/">animate.style—动画</a></button></p><ul><li>背景形状</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://css-tricks.com/the-shapes-of-css/">css-tricks—形状</a></button></p><ul><li>背景颜色</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://cssgradient.io/">cssgradient—颜色</a></button></p><ul><li>CSS和html格式校对</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="http://jigsaw.w3.org/css-validator/#validate_by_upload">css-validator</a></button></p><ul><li>html中特殊符号</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="http://jigsaw.w3.org/css-validator/#validate_by_upload">charref</a></button></p><ul><li>图片尺寸修改生成器</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://cloudconvert.com/jpeg-to-webp">webp网页图片修改</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://www.responsivebreakpoints.com/">Image Breakpoints Generator </a></button></p><ul><li>矢量图标</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.3">阿里矢量图标</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://icons.getbootstrap.com/">Bootstrap图标</a></button></p><h3 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h3><ul><li>表单</li></ul><p><button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://ogp.me/">开放图谱协议</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://getbootstrap.com/">Bootstrap</a></button> <button class="btn btn-outline-success" onclick="showHitokoto(event)"><a href="https://formspree.io/">Fromspree</a></button></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CSS基础&quot;&gt;&lt;a href=&quot;#CSS基础&quot; class=&quot;headerlink&quot; title=&quot;CSS基础&quot;&gt;&lt;/a&gt;CSS基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cursor: hand和cursor:pointer的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquot</summary>
      
    
    
    
    <category term="CSS" scheme="https://bingeone.github.io/bione/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://bingeone.github.io/bione/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>vscode基础使用文档</title>
    <link href="https://bingeone.github.io/bione/posts/43791.html"/>
    <id>https://bingeone.github.io/bione/posts/43791.html</id>
    <published>2021-10-19T15:11:57.000Z</published>
    <updated>2021-10-24T14:24:44.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vs-code-快捷键详述"><a href="#Vs-code-快捷键详述" class="headerlink" title="Vs code 快捷键详述"></a>Vs code 快捷键详述</h3><p>1、注释：</p><p>　　a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/</p><p>　　b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u)</p><p>　　c) 多行注释：[alt+shift+A]</p><p>　　d) 多行注释：/**</p><p>2、移动行：alt+up/down</p><p>3、显示/隐藏左侧目录栏 ctrl + b</p><p>4、复制当前行：shift + alt +up/down</p><p>5、删除当前行：shift + ctrl + k</p><p>6、控制台终端显示与隐藏：ctrl + ~</p><p>7、查找文件/安装vs code 插件地址：ctrl + p</p><p>8、代码格式化：shift + alt +f</p><p>9、新建一个窗口: ctrl + shift + n</p><p>10、行增加缩进: ctrl + [</p><p>11、行减少缩进: ctrl + ]</p><p>12、裁剪尾随空格(去掉一行的末尾那些没用的空格) : ctrl + shift + x</p><p>13、字体放大/缩小: ctrl + ( + 或 - )</p><p>14、拆分编辑器 :ctrl + 1/2/3</p><p>15、切换窗口:  ctrl + shift + left/right</p><p>16、关闭编辑器窗口:  ctrl + w</p><p>17、关闭所有窗口 : ctrl + k + w</p><p>18、切换全屏 :F11</p><p>19、自动换行:  alt + z</p><p>20、显示git:   ctrl + shift + g</p><p>21、全局查找文件：ctrl + p</p><p>22、显示相关插件的命令(如：git log)：ctrl + shift + p</p><p>23、选中文字：shift + left / right / up / down</p><p>24、折叠代码： ctrl + k + 0-9 (0是完全折叠)</p><p>25、展开代码： ctrl + k + j (完全展开代码)</p><p>26、删除行 ： ctrl + shift + k</p><p>27、快速切换主题：ctrl + k / ctrl + t</p><p>28、快速回到顶部 ： ctrl + home</p><p>29、快速回到底部 : ctrl + end</p><p>30、格式化选定代码 ：ctrl + k / ctrl +f</p><p>31、选中代码 ： shift + 鼠标左键</p><p>32、多行同时添加内容（光标） ：ctrl + alt + up/down</p><p>33、全局替换：ctrl + shift + h</p><p>34、当前文件替换：ctrl + h</p><p>35、打开最近打开的文件：ctrl + r</p><p>36、打开新的命令窗：ctrl + shift + c</p><p>37、自动生成闭合标签：VsCode内置了Emmet语法,在后缀为.html/.css中输入缩写后按Tab键即会自动生成相应代码</p><h3 id="Vs-code-高频快捷键"><a href="#Vs-code-高频快捷键" class="headerlink" title="Vs code 高频快捷键"></a>Vs code 高频快捷键</h3><table><thead><tr><th>功能</th><th>快捷键</th><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>文件检索</td><td>ctrl + p</td><td>关闭文件</td><td>ctrl + w</td></tr><tr><td>打开命令面板</td><td>ctrl + shift + p</td><td>当前行上下移动</td><td>alt+Up/Down</td></tr><tr><td>打开终端</td><td>ctrl + `</td><td>变量名统一命名</td><td>F2</td></tr><tr><td>关闭侧边栏</td><td>ctrl + B</td><td>转到变量定义处</td><td>F12</td></tr><tr><td>复制文本</td><td>ctrl + c</td><td>保存文本</td><td>ctrl + s</td></tr><tr><td>粘贴文本</td><td>ctrl + v</td><td>撤销操作</td><td>ctrl + z</td></tr><tr><td>删除当前行</td><td>ctrl + d（自定义）</td><td>代码格式化</td><td>ctrl +shift + i（Format Document)</td></tr><tr><td>在当前行向下插入一行</td><td>ctrl + enter</td><td>光标移到行首/行尾</td><td>home/end</td></tr><tr><td>在当前行向上插入一行</td><td>ctrl + shift + enter</td><td>根据单词快速移动光标</td><td>ctrl + 左右方向键</td></tr><tr><td>查找/替换</td><td>ctrl+F/ctrl +H</td><td>单词小写转大写</td><td>shift + q（自定义）</td></tr><tr><td>全屏</td><td>F11</td><td>单词大写转小写</td><td>shift + w（自定义）</td></tr><tr><td>空间大小缩放</td><td>ctrl + +/-</td><td>编辑区大小缩放</td><td>ctrl + 鼠标滚轮</td></tr></tbody></table><h3 id="Vs-code拓展插件"><a href="#Vs-code拓展插件" class="headerlink" title="Vs code拓展插件"></a>Vs code拓展插件</h3><h4 id="HTMl必备"><a href="#HTMl必备" class="headerlink" title="HTMl必备"></a>HTMl必备</h4><ul><li><p>Chinese (Simplified) Language Pack for Visual Studio Code    （汉化）</p></li><li><p>open in browser                    （打开浏览器，快捷键“Alt+B”）</p></li><li><p>vscode-icons                    （编辑器的文件图标 =&gt; 好看）</p></li><li><p>Auto Rename Tag                    （自动匹配HMTL标签）</p></li><li><p>Bracket Pair Colorizer            （彩色的括号）</p></li><li><p>Highlight Matching Tag            （高亮对应HTML标签 &amp; 表示对应括号，高效）</p></li><li><p>stylelint（css/sass/less语法检查）</p></li><li><p>Path Intellisense（智能路径提示）</p></li><li><p>HTML Snippets    （智能填充）</p></li><li><p>TODO Hightlight  （注释语法高亮）</p></li><li><p>Prettier-Code formatter   （代码格式化）</p></li></ul><h4 id="CSS必备"><a href="#CSS必备" class="headerlink" title="CSS必备"></a>CSS必备</h4><ul><li>CSS Peek    (智能提取)</li><li>HTML CSS Support</li></ul><h4 id="Python必备"><a href="#Python必备" class="headerlink" title="Python必备"></a>Python必备</h4><ul><li>Python</li><li>Pylance</li><li>Jupyter</li></ul><h4 id="C-C-必备"><a href="#C-C-必备" class="headerlink" title="C/C++必备"></a>C/C++必备</h4><ul><li>C/C++</li><li>CMake</li><li>CMake Tools</li></ul><h4 id="Vue必备"><a href="#Vue必备" class="headerlink" title="Vue必备"></a>Vue必备</h4><ul><li><p>Vetur（Vue必备，提示的嘛，方便）</p></li><li><p>Live Server（代码保存后，浏览器自动更新）</p></li></ul><h4 id="React必备"><a href="#React必备" class="headerlink" title="React必备"></a>React必备</h4><ul><li>Prettier（格式化插件，比Beautify好）</li></ul><h4 id="Egg框架必备"><a href="#Egg框架必备" class="headerlink" title="Egg框架必备"></a>Egg框架必备</h4><ul><li>Egg.js dev tools（NodeJs中 EggJs框架，方便）</li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li>SQLite </li><li>MySQL</li></ul><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><ul><li><p>carbon-now-sh（截获代码为PNG，Ctrl+Shift+P =&gt; Carbon）</p></li><li><p>background（界面右下角有个小人）</p></li><li><p>Code Runner   (运行代码)</p></li><li><p>Git Blame   (git管理工具)</p></li><li><p>Vscode Google Translate (谷歌翻译)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vs-code-快捷键详述&quot;&gt;&lt;a href=&quot;#Vs-code-快捷键详述&quot; class=&quot;headerlink&quot; title=&quot;Vs code 快捷键详述&quot;&gt;&lt;/a&gt;Vs code 快捷键详述&lt;/h3&gt;&lt;p&gt;1、注释：&lt;/p&gt;
&lt;p&gt;　　a) 单行注释：[ct</summary>
      
    
    
    
    <category term="开发工具" scheme="https://bingeone.github.io/bione/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="vscode" scheme="https://bingeone.github.io/bione/tags/vscode/"/>
    
    <category term="工具" scheme="https://bingeone.github.io/bione/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
